// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: storage_engine_instance.proto
#ifndef GRPC_storage_5fengine_5finstance_2eproto__INCLUDED
#define GRPC_storage_5fengine_5finstance_2eproto__INCLUDED

#include "storage_engine_instance.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace StorageEngineInstance {

class StorageEngineInterface final {
 public:
  static constexpr char const* service_full_name() {
    return "StorageEngineInstance.StorageEngineInterface";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    std::unique_ptr< ::grpc::ClientWriterInterface< ::StorageEngineInstance::SnippetRequest>> OffloadingQueryInterface(::grpc::ClientContext* context, ::StorageEngineInstance::QueryStringResult* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::StorageEngineInstance::SnippetRequest>>(OffloadingQueryInterfaceRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::StorageEngineInstance::SnippetRequest>> AsyncOffloadingQueryInterface(::grpc::ClientContext* context, ::StorageEngineInstance::QueryStringResult* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::StorageEngineInstance::SnippetRequest>>(AsyncOffloadingQueryInterfaceRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::StorageEngineInstance::SnippetRequest>> PrepareAsyncOffloadingQueryInterface(::grpc::ClientContext* context, ::StorageEngineInstance::QueryStringResult* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::StorageEngineInstance::SnippetRequest>>(PrepareAsyncOffloadingQueryInterfaceRaw(context, response, cq));
    }
    virtual ::grpc::Status PushCSDMetric(::grpc::ClientContext* context, const ::StorageEngineInstance::CSDMetricList& request, ::StorageEngineInstance::Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StorageEngineInstance::Response>> AsyncPushCSDMetric(::grpc::ClientContext* context, const ::StorageEngineInstance::CSDMetricList& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StorageEngineInstance::Response>>(AsyncPushCSDMetricRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StorageEngineInstance::Response>> PrepareAsyncPushCSDMetric(::grpc::ClientContext* context, const ::StorageEngineInstance::CSDMetricList& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StorageEngineInstance::Response>>(PrepareAsyncPushCSDMetricRaw(context, request, cq));
    }
    virtual ::grpc::Status keti_send_snippet(::grpc::ClientContext* context, const ::StorageEngineInstance::TmaxRequest& request, ::StorageEngineInstance::TmaxResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StorageEngineInstance::TmaxResponse>> Asyncketi_send_snippet(::grpc::ClientContext* context, const ::StorageEngineInstance::TmaxRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StorageEngineInstance::TmaxResponse>>(Asyncketi_send_snippetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StorageEngineInstance::TmaxResponse>> PrepareAsyncketi_send_snippet(::grpc::ClientContext* context, const ::StorageEngineInstance::TmaxRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StorageEngineInstance::TmaxResponse>>(PrepareAsyncketi_send_snippetRaw(context, request, cq));
    }
    virtual ::grpc::Status keti_get_csd_status(::grpc::ClientContext* context, const ::StorageEngineInstance::Empty& request, ::StorageEngineInstance::CSDMetricList* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StorageEngineInstance::CSDMetricList>> Asyncketi_get_csd_status(::grpc::ClientContext* context, const ::StorageEngineInstance::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StorageEngineInstance::CSDMetricList>>(Asyncketi_get_csd_statusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StorageEngineInstance::CSDMetricList>> PrepareAsyncketi_get_csd_status(::grpc::ClientContext* context, const ::StorageEngineInstance::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StorageEngineInstance::CSDMetricList>>(PrepareAsyncketi_get_csd_statusRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void OffloadingQueryInterface(::grpc::ClientContext* context, ::StorageEngineInstance::QueryStringResult* response, ::grpc::ClientWriteReactor< ::StorageEngineInstance::SnippetRequest>* reactor) = 0;
      virtual void PushCSDMetric(::grpc::ClientContext* context, const ::StorageEngineInstance::CSDMetricList* request, ::StorageEngineInstance::Response* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PushCSDMetric(::grpc::ClientContext* context, const ::StorageEngineInstance::CSDMetricList* request, ::StorageEngineInstance::Response* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void keti_send_snippet(::grpc::ClientContext* context, const ::StorageEngineInstance::TmaxRequest* request, ::StorageEngineInstance::TmaxResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void keti_send_snippet(::grpc::ClientContext* context, const ::StorageEngineInstance::TmaxRequest* request, ::StorageEngineInstance::TmaxResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void keti_get_csd_status(::grpc::ClientContext* context, const ::StorageEngineInstance::Empty* request, ::StorageEngineInstance::CSDMetricList* response, std::function<void(::grpc::Status)>) = 0;
      virtual void keti_get_csd_status(::grpc::ClientContext* context, const ::StorageEngineInstance::Empty* request, ::StorageEngineInstance::CSDMetricList* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientWriterInterface< ::StorageEngineInstance::SnippetRequest>* OffloadingQueryInterfaceRaw(::grpc::ClientContext* context, ::StorageEngineInstance::QueryStringResult* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::StorageEngineInstance::SnippetRequest>* AsyncOffloadingQueryInterfaceRaw(::grpc::ClientContext* context, ::StorageEngineInstance::QueryStringResult* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::StorageEngineInstance::SnippetRequest>* PrepareAsyncOffloadingQueryInterfaceRaw(::grpc::ClientContext* context, ::StorageEngineInstance::QueryStringResult* response, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::StorageEngineInstance::Response>* AsyncPushCSDMetricRaw(::grpc::ClientContext* context, const ::StorageEngineInstance::CSDMetricList& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::StorageEngineInstance::Response>* PrepareAsyncPushCSDMetricRaw(::grpc::ClientContext* context, const ::StorageEngineInstance::CSDMetricList& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::StorageEngineInstance::TmaxResponse>* Asyncketi_send_snippetRaw(::grpc::ClientContext* context, const ::StorageEngineInstance::TmaxRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::StorageEngineInstance::TmaxResponse>* PrepareAsyncketi_send_snippetRaw(::grpc::ClientContext* context, const ::StorageEngineInstance::TmaxRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::StorageEngineInstance::CSDMetricList>* Asyncketi_get_csd_statusRaw(::grpc::ClientContext* context, const ::StorageEngineInstance::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::StorageEngineInstance::CSDMetricList>* PrepareAsyncketi_get_csd_statusRaw(::grpc::ClientContext* context, const ::StorageEngineInstance::Empty& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    std::unique_ptr< ::grpc::ClientWriter< ::StorageEngineInstance::SnippetRequest>> OffloadingQueryInterface(::grpc::ClientContext* context, ::StorageEngineInstance::QueryStringResult* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::StorageEngineInstance::SnippetRequest>>(OffloadingQueryInterfaceRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::StorageEngineInstance::SnippetRequest>> AsyncOffloadingQueryInterface(::grpc::ClientContext* context, ::StorageEngineInstance::QueryStringResult* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::StorageEngineInstance::SnippetRequest>>(AsyncOffloadingQueryInterfaceRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::StorageEngineInstance::SnippetRequest>> PrepareAsyncOffloadingQueryInterface(::grpc::ClientContext* context, ::StorageEngineInstance::QueryStringResult* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::StorageEngineInstance::SnippetRequest>>(PrepareAsyncOffloadingQueryInterfaceRaw(context, response, cq));
    }
    ::grpc::Status PushCSDMetric(::grpc::ClientContext* context, const ::StorageEngineInstance::CSDMetricList& request, ::StorageEngineInstance::Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::Response>> AsyncPushCSDMetric(::grpc::ClientContext* context, const ::StorageEngineInstance::CSDMetricList& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::Response>>(AsyncPushCSDMetricRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::Response>> PrepareAsyncPushCSDMetric(::grpc::ClientContext* context, const ::StorageEngineInstance::CSDMetricList& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::Response>>(PrepareAsyncPushCSDMetricRaw(context, request, cq));
    }
    ::grpc::Status keti_send_snippet(::grpc::ClientContext* context, const ::StorageEngineInstance::TmaxRequest& request, ::StorageEngineInstance::TmaxResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::TmaxResponse>> Asyncketi_send_snippet(::grpc::ClientContext* context, const ::StorageEngineInstance::TmaxRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::TmaxResponse>>(Asyncketi_send_snippetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::TmaxResponse>> PrepareAsyncketi_send_snippet(::grpc::ClientContext* context, const ::StorageEngineInstance::TmaxRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::TmaxResponse>>(PrepareAsyncketi_send_snippetRaw(context, request, cq));
    }
    ::grpc::Status keti_get_csd_status(::grpc::ClientContext* context, const ::StorageEngineInstance::Empty& request, ::StorageEngineInstance::CSDMetricList* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::CSDMetricList>> Asyncketi_get_csd_status(::grpc::ClientContext* context, const ::StorageEngineInstance::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::CSDMetricList>>(Asyncketi_get_csd_statusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::CSDMetricList>> PrepareAsyncketi_get_csd_status(::grpc::ClientContext* context, const ::StorageEngineInstance::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::CSDMetricList>>(PrepareAsyncketi_get_csd_statusRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void OffloadingQueryInterface(::grpc::ClientContext* context, ::StorageEngineInstance::QueryStringResult* response, ::grpc::ClientWriteReactor< ::StorageEngineInstance::SnippetRequest>* reactor) override;
      void PushCSDMetric(::grpc::ClientContext* context, const ::StorageEngineInstance::CSDMetricList* request, ::StorageEngineInstance::Response* response, std::function<void(::grpc::Status)>) override;
      void PushCSDMetric(::grpc::ClientContext* context, const ::StorageEngineInstance::CSDMetricList* request, ::StorageEngineInstance::Response* response, ::grpc::ClientUnaryReactor* reactor) override;
      void keti_send_snippet(::grpc::ClientContext* context, const ::StorageEngineInstance::TmaxRequest* request, ::StorageEngineInstance::TmaxResponse* response, std::function<void(::grpc::Status)>) override;
      void keti_send_snippet(::grpc::ClientContext* context, const ::StorageEngineInstance::TmaxRequest* request, ::StorageEngineInstance::TmaxResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void keti_get_csd_status(::grpc::ClientContext* context, const ::StorageEngineInstance::Empty* request, ::StorageEngineInstance::CSDMetricList* response, std::function<void(::grpc::Status)>) override;
      void keti_get_csd_status(::grpc::ClientContext* context, const ::StorageEngineInstance::Empty* request, ::StorageEngineInstance::CSDMetricList* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientWriter< ::StorageEngineInstance::SnippetRequest>* OffloadingQueryInterfaceRaw(::grpc::ClientContext* context, ::StorageEngineInstance::QueryStringResult* response) override;
    ::grpc::ClientAsyncWriter< ::StorageEngineInstance::SnippetRequest>* AsyncOffloadingQueryInterfaceRaw(::grpc::ClientContext* context, ::StorageEngineInstance::QueryStringResult* response, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncWriter< ::StorageEngineInstance::SnippetRequest>* PrepareAsyncOffloadingQueryInterfaceRaw(::grpc::ClientContext* context, ::StorageEngineInstance::QueryStringResult* response, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::Response>* AsyncPushCSDMetricRaw(::grpc::ClientContext* context, const ::StorageEngineInstance::CSDMetricList& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::Response>* PrepareAsyncPushCSDMetricRaw(::grpc::ClientContext* context, const ::StorageEngineInstance::CSDMetricList& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::TmaxResponse>* Asyncketi_send_snippetRaw(::grpc::ClientContext* context, const ::StorageEngineInstance::TmaxRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::TmaxResponse>* PrepareAsyncketi_send_snippetRaw(::grpc::ClientContext* context, const ::StorageEngineInstance::TmaxRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::CSDMetricList>* Asyncketi_get_csd_statusRaw(::grpc::ClientContext* context, const ::StorageEngineInstance::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::CSDMetricList>* PrepareAsyncketi_get_csd_statusRaw(::grpc::ClientContext* context, const ::StorageEngineInstance::Empty& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_OffloadingQueryInterface_;
    const ::grpc::internal::RpcMethod rpcmethod_PushCSDMetric_;
    const ::grpc::internal::RpcMethod rpcmethod_keti_send_snippet_;
    const ::grpc::internal::RpcMethod rpcmethod_keti_get_csd_status_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status OffloadingQueryInterface(::grpc::ServerContext* context, ::grpc::ServerReader< ::StorageEngineInstance::SnippetRequest>* reader, ::StorageEngineInstance::QueryStringResult* response);
    virtual ::grpc::Status PushCSDMetric(::grpc::ServerContext* context, const ::StorageEngineInstance::CSDMetricList* request, ::StorageEngineInstance::Response* response);
    virtual ::grpc::Status keti_send_snippet(::grpc::ServerContext* context, const ::StorageEngineInstance::TmaxRequest* request, ::StorageEngineInstance::TmaxResponse* response);
    virtual ::grpc::Status keti_get_csd_status(::grpc::ServerContext* context, const ::StorageEngineInstance::Empty* request, ::StorageEngineInstance::CSDMetricList* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_OffloadingQueryInterface : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_OffloadingQueryInterface() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_OffloadingQueryInterface() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OffloadingQueryInterface(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::StorageEngineInstance::SnippetRequest>* /*reader*/, ::StorageEngineInstance::QueryStringResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOffloadingQueryInterface(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::StorageEngineInstance::QueryStringResult, ::StorageEngineInstance::SnippetRequest>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(0, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PushCSDMetric : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PushCSDMetric() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_PushCSDMetric() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PushCSDMetric(::grpc::ServerContext* /*context*/, const ::StorageEngineInstance::CSDMetricList* /*request*/, ::StorageEngineInstance::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPushCSDMetric(::grpc::ServerContext* context, ::StorageEngineInstance::CSDMetricList* request, ::grpc::ServerAsyncResponseWriter< ::StorageEngineInstance::Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_keti_send_snippet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_keti_send_snippet() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_keti_send_snippet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status keti_send_snippet(::grpc::ServerContext* /*context*/, const ::StorageEngineInstance::TmaxRequest* /*request*/, ::StorageEngineInstance::TmaxResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestketi_send_snippet(::grpc::ServerContext* context, ::StorageEngineInstance::TmaxRequest* request, ::grpc::ServerAsyncResponseWriter< ::StorageEngineInstance::TmaxResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_keti_get_csd_status : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_keti_get_csd_status() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_keti_get_csd_status() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status keti_get_csd_status(::grpc::ServerContext* /*context*/, const ::StorageEngineInstance::Empty* /*request*/, ::StorageEngineInstance::CSDMetricList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestketi_get_csd_status(::grpc::ServerContext* context, ::StorageEngineInstance::Empty* request, ::grpc::ServerAsyncResponseWriter< ::StorageEngineInstance::CSDMetricList>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_OffloadingQueryInterface<WithAsyncMethod_PushCSDMetric<WithAsyncMethod_keti_send_snippet<WithAsyncMethod_keti_get_csd_status<Service > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_OffloadingQueryInterface : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_OffloadingQueryInterface() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackClientStreamingHandler< ::StorageEngineInstance::SnippetRequest, ::StorageEngineInstance::QueryStringResult>(
            [this](
                   ::grpc::CallbackServerContext* context, ::StorageEngineInstance::QueryStringResult* response) { return this->OffloadingQueryInterface(context, response); }));
    }
    ~WithCallbackMethod_OffloadingQueryInterface() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OffloadingQueryInterface(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::StorageEngineInstance::SnippetRequest>* /*reader*/, ::StorageEngineInstance::QueryStringResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::StorageEngineInstance::SnippetRequest>* OffloadingQueryInterface(
      ::grpc::CallbackServerContext* /*context*/, ::StorageEngineInstance::QueryStringResult* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_PushCSDMetric : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_PushCSDMetric() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::StorageEngineInstance::CSDMetricList, ::StorageEngineInstance::Response>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::StorageEngineInstance::CSDMetricList* request, ::StorageEngineInstance::Response* response) { return this->PushCSDMetric(context, request, response); }));}
    void SetMessageAllocatorFor_PushCSDMetric(
        ::grpc::MessageAllocator< ::StorageEngineInstance::CSDMetricList, ::StorageEngineInstance::Response>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::StorageEngineInstance::CSDMetricList, ::StorageEngineInstance::Response>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_PushCSDMetric() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PushCSDMetric(::grpc::ServerContext* /*context*/, const ::StorageEngineInstance::CSDMetricList* /*request*/, ::StorageEngineInstance::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PushCSDMetric(
      ::grpc::CallbackServerContext* /*context*/, const ::StorageEngineInstance::CSDMetricList* /*request*/, ::StorageEngineInstance::Response* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_keti_send_snippet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_keti_send_snippet() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::StorageEngineInstance::TmaxRequest, ::StorageEngineInstance::TmaxResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::StorageEngineInstance::TmaxRequest* request, ::StorageEngineInstance::TmaxResponse* response) { return this->keti_send_snippet(context, request, response); }));}
    void SetMessageAllocatorFor_keti_send_snippet(
        ::grpc::MessageAllocator< ::StorageEngineInstance::TmaxRequest, ::StorageEngineInstance::TmaxResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::StorageEngineInstance::TmaxRequest, ::StorageEngineInstance::TmaxResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_keti_send_snippet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status keti_send_snippet(::grpc::ServerContext* /*context*/, const ::StorageEngineInstance::TmaxRequest* /*request*/, ::StorageEngineInstance::TmaxResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* keti_send_snippet(
      ::grpc::CallbackServerContext* /*context*/, const ::StorageEngineInstance::TmaxRequest* /*request*/, ::StorageEngineInstance::TmaxResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_keti_get_csd_status : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_keti_get_csd_status() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::StorageEngineInstance::Empty, ::StorageEngineInstance::CSDMetricList>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::StorageEngineInstance::Empty* request, ::StorageEngineInstance::CSDMetricList* response) { return this->keti_get_csd_status(context, request, response); }));}
    void SetMessageAllocatorFor_keti_get_csd_status(
        ::grpc::MessageAllocator< ::StorageEngineInstance::Empty, ::StorageEngineInstance::CSDMetricList>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::StorageEngineInstance::Empty, ::StorageEngineInstance::CSDMetricList>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_keti_get_csd_status() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status keti_get_csd_status(::grpc::ServerContext* /*context*/, const ::StorageEngineInstance::Empty* /*request*/, ::StorageEngineInstance::CSDMetricList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* keti_get_csd_status(
      ::grpc::CallbackServerContext* /*context*/, const ::StorageEngineInstance::Empty* /*request*/, ::StorageEngineInstance::CSDMetricList* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_OffloadingQueryInterface<WithCallbackMethod_PushCSDMetric<WithCallbackMethod_keti_send_snippet<WithCallbackMethod_keti_get_csd_status<Service > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_OffloadingQueryInterface : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_OffloadingQueryInterface() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_OffloadingQueryInterface() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OffloadingQueryInterface(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::StorageEngineInstance::SnippetRequest>* /*reader*/, ::StorageEngineInstance::QueryStringResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PushCSDMetric : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PushCSDMetric() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_PushCSDMetric() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PushCSDMetric(::grpc::ServerContext* /*context*/, const ::StorageEngineInstance::CSDMetricList* /*request*/, ::StorageEngineInstance::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_keti_send_snippet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_keti_send_snippet() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_keti_send_snippet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status keti_send_snippet(::grpc::ServerContext* /*context*/, const ::StorageEngineInstance::TmaxRequest* /*request*/, ::StorageEngineInstance::TmaxResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_keti_get_csd_status : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_keti_get_csd_status() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_keti_get_csd_status() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status keti_get_csd_status(::grpc::ServerContext* /*context*/, const ::StorageEngineInstance::Empty* /*request*/, ::StorageEngineInstance::CSDMetricList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_OffloadingQueryInterface : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_OffloadingQueryInterface() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_OffloadingQueryInterface() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OffloadingQueryInterface(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::StorageEngineInstance::SnippetRequest>* /*reader*/, ::StorageEngineInstance::QueryStringResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOffloadingQueryInterface(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(0, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PushCSDMetric : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PushCSDMetric() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_PushCSDMetric() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PushCSDMetric(::grpc::ServerContext* /*context*/, const ::StorageEngineInstance::CSDMetricList* /*request*/, ::StorageEngineInstance::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPushCSDMetric(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_keti_send_snippet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_keti_send_snippet() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_keti_send_snippet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status keti_send_snippet(::grpc::ServerContext* /*context*/, const ::StorageEngineInstance::TmaxRequest* /*request*/, ::StorageEngineInstance::TmaxResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestketi_send_snippet(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_keti_get_csd_status : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_keti_get_csd_status() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_keti_get_csd_status() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status keti_get_csd_status(::grpc::ServerContext* /*context*/, const ::StorageEngineInstance::Empty* /*request*/, ::StorageEngineInstance::CSDMetricList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestketi_get_csd_status(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_OffloadingQueryInterface : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_OffloadingQueryInterface() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackClientStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, ::grpc::ByteBuffer* response) { return this->OffloadingQueryInterface(context, response); }));
    }
    ~WithRawCallbackMethod_OffloadingQueryInterface() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OffloadingQueryInterface(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::StorageEngineInstance::SnippetRequest>* /*reader*/, ::StorageEngineInstance::QueryStringResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::grpc::ByteBuffer>* OffloadingQueryInterface(
      ::grpc::CallbackServerContext* /*context*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_PushCSDMetric : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_PushCSDMetric() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PushCSDMetric(context, request, response); }));
    }
    ~WithRawCallbackMethod_PushCSDMetric() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PushCSDMetric(::grpc::ServerContext* /*context*/, const ::StorageEngineInstance::CSDMetricList* /*request*/, ::StorageEngineInstance::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PushCSDMetric(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_keti_send_snippet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_keti_send_snippet() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->keti_send_snippet(context, request, response); }));
    }
    ~WithRawCallbackMethod_keti_send_snippet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status keti_send_snippet(::grpc::ServerContext* /*context*/, const ::StorageEngineInstance::TmaxRequest* /*request*/, ::StorageEngineInstance::TmaxResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* keti_send_snippet(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_keti_get_csd_status : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_keti_get_csd_status() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->keti_get_csd_status(context, request, response); }));
    }
    ~WithRawCallbackMethod_keti_get_csd_status() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status keti_get_csd_status(::grpc::ServerContext* /*context*/, const ::StorageEngineInstance::Empty* /*request*/, ::StorageEngineInstance::CSDMetricList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* keti_get_csd_status(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PushCSDMetric : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PushCSDMetric() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::StorageEngineInstance::CSDMetricList, ::StorageEngineInstance::Response>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::StorageEngineInstance::CSDMetricList, ::StorageEngineInstance::Response>* streamer) {
                       return this->StreamedPushCSDMetric(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PushCSDMetric() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PushCSDMetric(::grpc::ServerContext* /*context*/, const ::StorageEngineInstance::CSDMetricList* /*request*/, ::StorageEngineInstance::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPushCSDMetric(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::StorageEngineInstance::CSDMetricList,::StorageEngineInstance::Response>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_keti_send_snippet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_keti_send_snippet() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::StorageEngineInstance::TmaxRequest, ::StorageEngineInstance::TmaxResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::StorageEngineInstance::TmaxRequest, ::StorageEngineInstance::TmaxResponse>* streamer) {
                       return this->Streamedketi_send_snippet(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_keti_send_snippet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status keti_send_snippet(::grpc::ServerContext* /*context*/, const ::StorageEngineInstance::TmaxRequest* /*request*/, ::StorageEngineInstance::TmaxResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedketi_send_snippet(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::StorageEngineInstance::TmaxRequest,::StorageEngineInstance::TmaxResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_keti_get_csd_status : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_keti_get_csd_status() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::StorageEngineInstance::Empty, ::StorageEngineInstance::CSDMetricList>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::StorageEngineInstance::Empty, ::StorageEngineInstance::CSDMetricList>* streamer) {
                       return this->Streamedketi_get_csd_status(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_keti_get_csd_status() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status keti_get_csd_status(::grpc::ServerContext* /*context*/, const ::StorageEngineInstance::Empty* /*request*/, ::StorageEngineInstance::CSDMetricList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedketi_get_csd_status(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::StorageEngineInstance::Empty,::StorageEngineInstance::CSDMetricList>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_PushCSDMetric<WithStreamedUnaryMethod_keti_send_snippet<WithStreamedUnaryMethod_keti_get_csd_status<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_PushCSDMetric<WithStreamedUnaryMethod_keti_send_snippet<WithStreamedUnaryMethod_keti_get_csd_status<Service > > > StreamedService;
};

class MergingModule final {
 public:
  static constexpr char const* service_full_name() {
    return "StorageEngineInstance.MergingModule";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status Aggregation(::grpc::ClientContext* context, const ::StorageEngineInstance::SnippetRequest& request, ::StorageEngineInstance::Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StorageEngineInstance::Response>> AsyncAggregation(::grpc::ClientContext* context, const ::StorageEngineInstance::SnippetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StorageEngineInstance::Response>>(AsyncAggregationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StorageEngineInstance::Response>> PrepareAsyncAggregation(::grpc::ClientContext* context, const ::StorageEngineInstance::SnippetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StorageEngineInstance::Response>>(PrepareAsyncAggregationRaw(context, request, cq));
    }
    virtual ::grpc::Status EndQuery(::grpc::ClientContext* context, const ::StorageEngineInstance::Request& request, ::StorageEngineInstance::Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StorageEngineInstance::Response>> AsyncEndQuery(::grpc::ClientContext* context, const ::StorageEngineInstance::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StorageEngineInstance::Response>>(AsyncEndQueryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StorageEngineInstance::Response>> PrepareAsyncEndQuery(::grpc::ClientContext* context, const ::StorageEngineInstance::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StorageEngineInstance::Response>>(PrepareAsyncEndQueryRaw(context, request, cq));
    }
    virtual ::grpc::Status GetQueryResult(::grpc::ClientContext* context, const ::StorageEngineInstance::Request& request, ::StorageEngineInstance::QueryResult* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StorageEngineInstance::QueryResult>> AsyncGetQueryResult(::grpc::ClientContext* context, const ::StorageEngineInstance::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StorageEngineInstance::QueryResult>>(AsyncGetQueryResultRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StorageEngineInstance::QueryResult>> PrepareAsyncGetQueryResult(::grpc::ClientContext* context, const ::StorageEngineInstance::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StorageEngineInstance::QueryResult>>(PrepareAsyncGetQueryResultRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void Aggregation(::grpc::ClientContext* context, const ::StorageEngineInstance::SnippetRequest* request, ::StorageEngineInstance::Response* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Aggregation(::grpc::ClientContext* context, const ::StorageEngineInstance::SnippetRequest* request, ::StorageEngineInstance::Response* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void EndQuery(::grpc::ClientContext* context, const ::StorageEngineInstance::Request* request, ::StorageEngineInstance::Response* response, std::function<void(::grpc::Status)>) = 0;
      virtual void EndQuery(::grpc::ClientContext* context, const ::StorageEngineInstance::Request* request, ::StorageEngineInstance::Response* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetQueryResult(::grpc::ClientContext* context, const ::StorageEngineInstance::Request* request, ::StorageEngineInstance::QueryResult* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetQueryResult(::grpc::ClientContext* context, const ::StorageEngineInstance::Request* request, ::StorageEngineInstance::QueryResult* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::StorageEngineInstance::Response>* AsyncAggregationRaw(::grpc::ClientContext* context, const ::StorageEngineInstance::SnippetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::StorageEngineInstance::Response>* PrepareAsyncAggregationRaw(::grpc::ClientContext* context, const ::StorageEngineInstance::SnippetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::StorageEngineInstance::Response>* AsyncEndQueryRaw(::grpc::ClientContext* context, const ::StorageEngineInstance::Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::StorageEngineInstance::Response>* PrepareAsyncEndQueryRaw(::grpc::ClientContext* context, const ::StorageEngineInstance::Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::StorageEngineInstance::QueryResult>* AsyncGetQueryResultRaw(::grpc::ClientContext* context, const ::StorageEngineInstance::Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::StorageEngineInstance::QueryResult>* PrepareAsyncGetQueryResultRaw(::grpc::ClientContext* context, const ::StorageEngineInstance::Request& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status Aggregation(::grpc::ClientContext* context, const ::StorageEngineInstance::SnippetRequest& request, ::StorageEngineInstance::Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::Response>> AsyncAggregation(::grpc::ClientContext* context, const ::StorageEngineInstance::SnippetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::Response>>(AsyncAggregationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::Response>> PrepareAsyncAggregation(::grpc::ClientContext* context, const ::StorageEngineInstance::SnippetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::Response>>(PrepareAsyncAggregationRaw(context, request, cq));
    }
    ::grpc::Status EndQuery(::grpc::ClientContext* context, const ::StorageEngineInstance::Request& request, ::StorageEngineInstance::Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::Response>> AsyncEndQuery(::grpc::ClientContext* context, const ::StorageEngineInstance::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::Response>>(AsyncEndQueryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::Response>> PrepareAsyncEndQuery(::grpc::ClientContext* context, const ::StorageEngineInstance::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::Response>>(PrepareAsyncEndQueryRaw(context, request, cq));
    }
    ::grpc::Status GetQueryResult(::grpc::ClientContext* context, const ::StorageEngineInstance::Request& request, ::StorageEngineInstance::QueryResult* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::QueryResult>> AsyncGetQueryResult(::grpc::ClientContext* context, const ::StorageEngineInstance::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::QueryResult>>(AsyncGetQueryResultRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::QueryResult>> PrepareAsyncGetQueryResult(::grpc::ClientContext* context, const ::StorageEngineInstance::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::QueryResult>>(PrepareAsyncGetQueryResultRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void Aggregation(::grpc::ClientContext* context, const ::StorageEngineInstance::SnippetRequest* request, ::StorageEngineInstance::Response* response, std::function<void(::grpc::Status)>) override;
      void Aggregation(::grpc::ClientContext* context, const ::StorageEngineInstance::SnippetRequest* request, ::StorageEngineInstance::Response* response, ::grpc::ClientUnaryReactor* reactor) override;
      void EndQuery(::grpc::ClientContext* context, const ::StorageEngineInstance::Request* request, ::StorageEngineInstance::Response* response, std::function<void(::grpc::Status)>) override;
      void EndQuery(::grpc::ClientContext* context, const ::StorageEngineInstance::Request* request, ::StorageEngineInstance::Response* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetQueryResult(::grpc::ClientContext* context, const ::StorageEngineInstance::Request* request, ::StorageEngineInstance::QueryResult* response, std::function<void(::grpc::Status)>) override;
      void GetQueryResult(::grpc::ClientContext* context, const ::StorageEngineInstance::Request* request, ::StorageEngineInstance::QueryResult* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::Response>* AsyncAggregationRaw(::grpc::ClientContext* context, const ::StorageEngineInstance::SnippetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::Response>* PrepareAsyncAggregationRaw(::grpc::ClientContext* context, const ::StorageEngineInstance::SnippetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::Response>* AsyncEndQueryRaw(::grpc::ClientContext* context, const ::StorageEngineInstance::Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::Response>* PrepareAsyncEndQueryRaw(::grpc::ClientContext* context, const ::StorageEngineInstance::Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::QueryResult>* AsyncGetQueryResultRaw(::grpc::ClientContext* context, const ::StorageEngineInstance::Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::QueryResult>* PrepareAsyncGetQueryResultRaw(::grpc::ClientContext* context, const ::StorageEngineInstance::Request& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Aggregation_;
    const ::grpc::internal::RpcMethod rpcmethod_EndQuery_;
    const ::grpc::internal::RpcMethod rpcmethod_GetQueryResult_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Aggregation(::grpc::ServerContext* context, const ::StorageEngineInstance::SnippetRequest* request, ::StorageEngineInstance::Response* response);
    virtual ::grpc::Status EndQuery(::grpc::ServerContext* context, const ::StorageEngineInstance::Request* request, ::StorageEngineInstance::Response* response);
    virtual ::grpc::Status GetQueryResult(::grpc::ServerContext* context, const ::StorageEngineInstance::Request* request, ::StorageEngineInstance::QueryResult* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Aggregation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Aggregation() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Aggregation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Aggregation(::grpc::ServerContext* /*context*/, const ::StorageEngineInstance::SnippetRequest* /*request*/, ::StorageEngineInstance::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAggregation(::grpc::ServerContext* context, ::StorageEngineInstance::SnippetRequest* request, ::grpc::ServerAsyncResponseWriter< ::StorageEngineInstance::Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_EndQuery : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_EndQuery() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_EndQuery() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EndQuery(::grpc::ServerContext* /*context*/, const ::StorageEngineInstance::Request* /*request*/, ::StorageEngineInstance::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestEndQuery(::grpc::ServerContext* context, ::StorageEngineInstance::Request* request, ::grpc::ServerAsyncResponseWriter< ::StorageEngineInstance::Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetQueryResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetQueryResult() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetQueryResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetQueryResult(::grpc::ServerContext* /*context*/, const ::StorageEngineInstance::Request* /*request*/, ::StorageEngineInstance::QueryResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetQueryResult(::grpc::ServerContext* context, ::StorageEngineInstance::Request* request, ::grpc::ServerAsyncResponseWriter< ::StorageEngineInstance::QueryResult>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Aggregation<WithAsyncMethod_EndQuery<WithAsyncMethod_GetQueryResult<Service > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_Aggregation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Aggregation() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::StorageEngineInstance::SnippetRequest, ::StorageEngineInstance::Response>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::StorageEngineInstance::SnippetRequest* request, ::StorageEngineInstance::Response* response) { return this->Aggregation(context, request, response); }));}
    void SetMessageAllocatorFor_Aggregation(
        ::grpc::MessageAllocator< ::StorageEngineInstance::SnippetRequest, ::StorageEngineInstance::Response>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::StorageEngineInstance::SnippetRequest, ::StorageEngineInstance::Response>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Aggregation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Aggregation(::grpc::ServerContext* /*context*/, const ::StorageEngineInstance::SnippetRequest* /*request*/, ::StorageEngineInstance::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Aggregation(
      ::grpc::CallbackServerContext* /*context*/, const ::StorageEngineInstance::SnippetRequest* /*request*/, ::StorageEngineInstance::Response* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_EndQuery : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_EndQuery() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::StorageEngineInstance::Request, ::StorageEngineInstance::Response>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::StorageEngineInstance::Request* request, ::StorageEngineInstance::Response* response) { return this->EndQuery(context, request, response); }));}
    void SetMessageAllocatorFor_EndQuery(
        ::grpc::MessageAllocator< ::StorageEngineInstance::Request, ::StorageEngineInstance::Response>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::StorageEngineInstance::Request, ::StorageEngineInstance::Response>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_EndQuery() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EndQuery(::grpc::ServerContext* /*context*/, const ::StorageEngineInstance::Request* /*request*/, ::StorageEngineInstance::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* EndQuery(
      ::grpc::CallbackServerContext* /*context*/, const ::StorageEngineInstance::Request* /*request*/, ::StorageEngineInstance::Response* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetQueryResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetQueryResult() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::StorageEngineInstance::Request, ::StorageEngineInstance::QueryResult>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::StorageEngineInstance::Request* request, ::StorageEngineInstance::QueryResult* response) { return this->GetQueryResult(context, request, response); }));}
    void SetMessageAllocatorFor_GetQueryResult(
        ::grpc::MessageAllocator< ::StorageEngineInstance::Request, ::StorageEngineInstance::QueryResult>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::StorageEngineInstance::Request, ::StorageEngineInstance::QueryResult>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetQueryResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetQueryResult(::grpc::ServerContext* /*context*/, const ::StorageEngineInstance::Request* /*request*/, ::StorageEngineInstance::QueryResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetQueryResult(
      ::grpc::CallbackServerContext* /*context*/, const ::StorageEngineInstance::Request* /*request*/, ::StorageEngineInstance::QueryResult* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_Aggregation<WithCallbackMethod_EndQuery<WithCallbackMethod_GetQueryResult<Service > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Aggregation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Aggregation() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Aggregation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Aggregation(::grpc::ServerContext* /*context*/, const ::StorageEngineInstance::SnippetRequest* /*request*/, ::StorageEngineInstance::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_EndQuery : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_EndQuery() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_EndQuery() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EndQuery(::grpc::ServerContext* /*context*/, const ::StorageEngineInstance::Request* /*request*/, ::StorageEngineInstance::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetQueryResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetQueryResult() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetQueryResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetQueryResult(::grpc::ServerContext* /*context*/, const ::StorageEngineInstance::Request* /*request*/, ::StorageEngineInstance::QueryResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Aggregation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Aggregation() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Aggregation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Aggregation(::grpc::ServerContext* /*context*/, const ::StorageEngineInstance::SnippetRequest* /*request*/, ::StorageEngineInstance::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAggregation(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_EndQuery : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_EndQuery() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_EndQuery() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EndQuery(::grpc::ServerContext* /*context*/, const ::StorageEngineInstance::Request* /*request*/, ::StorageEngineInstance::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestEndQuery(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetQueryResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetQueryResult() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_GetQueryResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetQueryResult(::grpc::ServerContext* /*context*/, const ::StorageEngineInstance::Request* /*request*/, ::StorageEngineInstance::QueryResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetQueryResult(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Aggregation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Aggregation() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Aggregation(context, request, response); }));
    }
    ~WithRawCallbackMethod_Aggregation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Aggregation(::grpc::ServerContext* /*context*/, const ::StorageEngineInstance::SnippetRequest* /*request*/, ::StorageEngineInstance::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Aggregation(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_EndQuery : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_EndQuery() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->EndQuery(context, request, response); }));
    }
    ~WithRawCallbackMethod_EndQuery() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EndQuery(::grpc::ServerContext* /*context*/, const ::StorageEngineInstance::Request* /*request*/, ::StorageEngineInstance::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* EndQuery(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetQueryResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetQueryResult() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetQueryResult(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetQueryResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetQueryResult(::grpc::ServerContext* /*context*/, const ::StorageEngineInstance::Request* /*request*/, ::StorageEngineInstance::QueryResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetQueryResult(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Aggregation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Aggregation() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::StorageEngineInstance::SnippetRequest, ::StorageEngineInstance::Response>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::StorageEngineInstance::SnippetRequest, ::StorageEngineInstance::Response>* streamer) {
                       return this->StreamedAggregation(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Aggregation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Aggregation(::grpc::ServerContext* /*context*/, const ::StorageEngineInstance::SnippetRequest* /*request*/, ::StorageEngineInstance::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAggregation(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::StorageEngineInstance::SnippetRequest,::StorageEngineInstance::Response>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_EndQuery : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_EndQuery() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::StorageEngineInstance::Request, ::StorageEngineInstance::Response>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::StorageEngineInstance::Request, ::StorageEngineInstance::Response>* streamer) {
                       return this->StreamedEndQuery(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_EndQuery() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status EndQuery(::grpc::ServerContext* /*context*/, const ::StorageEngineInstance::Request* /*request*/, ::StorageEngineInstance::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedEndQuery(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::StorageEngineInstance::Request,::StorageEngineInstance::Response>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetQueryResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetQueryResult() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::StorageEngineInstance::Request, ::StorageEngineInstance::QueryResult>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::StorageEngineInstance::Request, ::StorageEngineInstance::QueryResult>* streamer) {
                       return this->StreamedGetQueryResult(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetQueryResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetQueryResult(::grpc::ServerContext* /*context*/, const ::StorageEngineInstance::Request* /*request*/, ::StorageEngineInstance::QueryResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetQueryResult(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::StorageEngineInstance::Request,::StorageEngineInstance::QueryResult>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Aggregation<WithStreamedUnaryMethod_EndQuery<WithStreamedUnaryMethod_GetQueryResult<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Aggregation<WithStreamedUnaryMethod_EndQuery<WithStreamedUnaryMethod_GetQueryResult<Service > > > StreamedService;
};

class MonitoringModule final {
 public:
  static constexpr char const* service_full_name() {
    return "StorageEngineInstance.MonitoringModule";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status GetSnippetMetaData(::grpc::ClientContext* context, const ::StorageEngineInstance::MetaDataRequest& request, ::StorageEngineInstance::SnippetMetaData* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StorageEngineInstance::SnippetMetaData>> AsyncGetSnippetMetaData(::grpc::ClientContext* context, const ::StorageEngineInstance::MetaDataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StorageEngineInstance::SnippetMetaData>>(AsyncGetSnippetMetaDataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StorageEngineInstance::SnippetMetaData>> PrepareAsyncGetSnippetMetaData(::grpc::ClientContext* context, const ::StorageEngineInstance::MetaDataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StorageEngineInstance::SnippetMetaData>>(PrepareAsyncGetSnippetMetaDataRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void GetSnippetMetaData(::grpc::ClientContext* context, const ::StorageEngineInstance::MetaDataRequest* request, ::StorageEngineInstance::SnippetMetaData* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetSnippetMetaData(::grpc::ClientContext* context, const ::StorageEngineInstance::MetaDataRequest* request, ::StorageEngineInstance::SnippetMetaData* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::StorageEngineInstance::SnippetMetaData>* AsyncGetSnippetMetaDataRaw(::grpc::ClientContext* context, const ::StorageEngineInstance::MetaDataRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::StorageEngineInstance::SnippetMetaData>* PrepareAsyncGetSnippetMetaDataRaw(::grpc::ClientContext* context, const ::StorageEngineInstance::MetaDataRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status GetSnippetMetaData(::grpc::ClientContext* context, const ::StorageEngineInstance::MetaDataRequest& request, ::StorageEngineInstance::SnippetMetaData* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::SnippetMetaData>> AsyncGetSnippetMetaData(::grpc::ClientContext* context, const ::StorageEngineInstance::MetaDataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::SnippetMetaData>>(AsyncGetSnippetMetaDataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::SnippetMetaData>> PrepareAsyncGetSnippetMetaData(::grpc::ClientContext* context, const ::StorageEngineInstance::MetaDataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::SnippetMetaData>>(PrepareAsyncGetSnippetMetaDataRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void GetSnippetMetaData(::grpc::ClientContext* context, const ::StorageEngineInstance::MetaDataRequest* request, ::StorageEngineInstance::SnippetMetaData* response, std::function<void(::grpc::Status)>) override;
      void GetSnippetMetaData(::grpc::ClientContext* context, const ::StorageEngineInstance::MetaDataRequest* request, ::StorageEngineInstance::SnippetMetaData* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::SnippetMetaData>* AsyncGetSnippetMetaDataRaw(::grpc::ClientContext* context, const ::StorageEngineInstance::MetaDataRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::SnippetMetaData>* PrepareAsyncGetSnippetMetaDataRaw(::grpc::ClientContext* context, const ::StorageEngineInstance::MetaDataRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetSnippetMetaData_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status GetSnippetMetaData(::grpc::ServerContext* context, const ::StorageEngineInstance::MetaDataRequest* request, ::StorageEngineInstance::SnippetMetaData* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetSnippetMetaData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetSnippetMetaData() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetSnippetMetaData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSnippetMetaData(::grpc::ServerContext* /*context*/, const ::StorageEngineInstance::MetaDataRequest* /*request*/, ::StorageEngineInstance::SnippetMetaData* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetSnippetMetaData(::grpc::ServerContext* context, ::StorageEngineInstance::MetaDataRequest* request, ::grpc::ServerAsyncResponseWriter< ::StorageEngineInstance::SnippetMetaData>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetSnippetMetaData<Service > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_GetSnippetMetaData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetSnippetMetaData() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::StorageEngineInstance::MetaDataRequest, ::StorageEngineInstance::SnippetMetaData>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::StorageEngineInstance::MetaDataRequest* request, ::StorageEngineInstance::SnippetMetaData* response) { return this->GetSnippetMetaData(context, request, response); }));}
    void SetMessageAllocatorFor_GetSnippetMetaData(
        ::grpc::MessageAllocator< ::StorageEngineInstance::MetaDataRequest, ::StorageEngineInstance::SnippetMetaData>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::StorageEngineInstance::MetaDataRequest, ::StorageEngineInstance::SnippetMetaData>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetSnippetMetaData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSnippetMetaData(::grpc::ServerContext* /*context*/, const ::StorageEngineInstance::MetaDataRequest* /*request*/, ::StorageEngineInstance::SnippetMetaData* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetSnippetMetaData(
      ::grpc::CallbackServerContext* /*context*/, const ::StorageEngineInstance::MetaDataRequest* /*request*/, ::StorageEngineInstance::SnippetMetaData* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_GetSnippetMetaData<Service > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetSnippetMetaData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetSnippetMetaData() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetSnippetMetaData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSnippetMetaData(::grpc::ServerContext* /*context*/, const ::StorageEngineInstance::MetaDataRequest* /*request*/, ::StorageEngineInstance::SnippetMetaData* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetSnippetMetaData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetSnippetMetaData() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetSnippetMetaData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSnippetMetaData(::grpc::ServerContext* /*context*/, const ::StorageEngineInstance::MetaDataRequest* /*request*/, ::StorageEngineInstance::SnippetMetaData* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetSnippetMetaData(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetSnippetMetaData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetSnippetMetaData() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetSnippetMetaData(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetSnippetMetaData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSnippetMetaData(::grpc::ServerContext* /*context*/, const ::StorageEngineInstance::MetaDataRequest* /*request*/, ::StorageEngineInstance::SnippetMetaData* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetSnippetMetaData(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetSnippetMetaData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetSnippetMetaData() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::StorageEngineInstance::MetaDataRequest, ::StorageEngineInstance::SnippetMetaData>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::StorageEngineInstance::MetaDataRequest, ::StorageEngineInstance::SnippetMetaData>* streamer) {
                       return this->StreamedGetSnippetMetaData(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetSnippetMetaData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetSnippetMetaData(::grpc::ServerContext* /*context*/, const ::StorageEngineInstance::MetaDataRequest* /*request*/, ::StorageEngineInstance::SnippetMetaData* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetSnippetMetaData(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::StorageEngineInstance::MetaDataRequest,::StorageEngineInstance::SnippetMetaData>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetSnippetMetaData<Service > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetSnippetMetaData<Service > StreamedService;
};

class OffloadingModule final {
 public:
  static constexpr char const* service_full_name() {
    return "StorageEngineInstance.OffloadingModule";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status Scheduling(::grpc::ClientContext* context, const ::StorageEngineInstance::SnippetRequest& request, ::StorageEngineInstance::Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StorageEngineInstance::Response>> AsyncScheduling(::grpc::ClientContext* context, const ::StorageEngineInstance::SnippetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StorageEngineInstance::Response>>(AsyncSchedulingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StorageEngineInstance::Response>> PrepareAsyncScheduling(::grpc::ClientContext* context, const ::StorageEngineInstance::SnippetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StorageEngineInstance::Response>>(PrepareAsyncSchedulingRaw(context, request, cq));
    }
    virtual ::grpc::Status PushCSDMetric(::grpc::ClientContext* context, const ::StorageEngineInstance::CSDMetricList& request, ::StorageEngineInstance::Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StorageEngineInstance::Response>> AsyncPushCSDMetric(::grpc::ClientContext* context, const ::StorageEngineInstance::CSDMetricList& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StorageEngineInstance::Response>>(AsyncPushCSDMetricRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StorageEngineInstance::Response>> PrepareAsyncPushCSDMetric(::grpc::ClientContext* context, const ::StorageEngineInstance::CSDMetricList& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StorageEngineInstance::Response>>(PrepareAsyncPushCSDMetricRaw(context, request, cq));
    }
    virtual ::grpc::Status t_snippet_scheduling(::grpc::ClientContext* context, const ::StorageEngineInstance::TmaxRequest& request, ::StorageEngineInstance::Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StorageEngineInstance::Response>> Asynct_snippet_scheduling(::grpc::ClientContext* context, const ::StorageEngineInstance::TmaxRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StorageEngineInstance::Response>>(Asynct_snippet_schedulingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StorageEngineInstance::Response>> PrepareAsynct_snippet_scheduling(::grpc::ClientContext* context, const ::StorageEngineInstance::TmaxRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StorageEngineInstance::Response>>(PrepareAsynct_snippet_schedulingRaw(context, request, cq));
    }
    virtual ::grpc::Status t_get_csd_status(::grpc::ClientContext* context, const ::StorageEngineInstance::Empty& request, ::StorageEngineInstance::CSDMetricList* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StorageEngineInstance::CSDMetricList>> Asynct_get_csd_status(::grpc::ClientContext* context, const ::StorageEngineInstance::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StorageEngineInstance::CSDMetricList>>(Asynct_get_csd_statusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StorageEngineInstance::CSDMetricList>> PrepareAsynct_get_csd_status(::grpc::ClientContext* context, const ::StorageEngineInstance::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StorageEngineInstance::CSDMetricList>>(PrepareAsynct_get_csd_statusRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void Scheduling(::grpc::ClientContext* context, const ::StorageEngineInstance::SnippetRequest* request, ::StorageEngineInstance::Response* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Scheduling(::grpc::ClientContext* context, const ::StorageEngineInstance::SnippetRequest* request, ::StorageEngineInstance::Response* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void PushCSDMetric(::grpc::ClientContext* context, const ::StorageEngineInstance::CSDMetricList* request, ::StorageEngineInstance::Response* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PushCSDMetric(::grpc::ClientContext* context, const ::StorageEngineInstance::CSDMetricList* request, ::StorageEngineInstance::Response* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void t_snippet_scheduling(::grpc::ClientContext* context, const ::StorageEngineInstance::TmaxRequest* request, ::StorageEngineInstance::Response* response, std::function<void(::grpc::Status)>) = 0;
      virtual void t_snippet_scheduling(::grpc::ClientContext* context, const ::StorageEngineInstance::TmaxRequest* request, ::StorageEngineInstance::Response* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void t_get_csd_status(::grpc::ClientContext* context, const ::StorageEngineInstance::Empty* request, ::StorageEngineInstance::CSDMetricList* response, std::function<void(::grpc::Status)>) = 0;
      virtual void t_get_csd_status(::grpc::ClientContext* context, const ::StorageEngineInstance::Empty* request, ::StorageEngineInstance::CSDMetricList* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::StorageEngineInstance::Response>* AsyncSchedulingRaw(::grpc::ClientContext* context, const ::StorageEngineInstance::SnippetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::StorageEngineInstance::Response>* PrepareAsyncSchedulingRaw(::grpc::ClientContext* context, const ::StorageEngineInstance::SnippetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::StorageEngineInstance::Response>* AsyncPushCSDMetricRaw(::grpc::ClientContext* context, const ::StorageEngineInstance::CSDMetricList& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::StorageEngineInstance::Response>* PrepareAsyncPushCSDMetricRaw(::grpc::ClientContext* context, const ::StorageEngineInstance::CSDMetricList& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::StorageEngineInstance::Response>* Asynct_snippet_schedulingRaw(::grpc::ClientContext* context, const ::StorageEngineInstance::TmaxRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::StorageEngineInstance::Response>* PrepareAsynct_snippet_schedulingRaw(::grpc::ClientContext* context, const ::StorageEngineInstance::TmaxRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::StorageEngineInstance::CSDMetricList>* Asynct_get_csd_statusRaw(::grpc::ClientContext* context, const ::StorageEngineInstance::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::StorageEngineInstance::CSDMetricList>* PrepareAsynct_get_csd_statusRaw(::grpc::ClientContext* context, const ::StorageEngineInstance::Empty& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status Scheduling(::grpc::ClientContext* context, const ::StorageEngineInstance::SnippetRequest& request, ::StorageEngineInstance::Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::Response>> AsyncScheduling(::grpc::ClientContext* context, const ::StorageEngineInstance::SnippetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::Response>>(AsyncSchedulingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::Response>> PrepareAsyncScheduling(::grpc::ClientContext* context, const ::StorageEngineInstance::SnippetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::Response>>(PrepareAsyncSchedulingRaw(context, request, cq));
    }
    ::grpc::Status PushCSDMetric(::grpc::ClientContext* context, const ::StorageEngineInstance::CSDMetricList& request, ::StorageEngineInstance::Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::Response>> AsyncPushCSDMetric(::grpc::ClientContext* context, const ::StorageEngineInstance::CSDMetricList& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::Response>>(AsyncPushCSDMetricRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::Response>> PrepareAsyncPushCSDMetric(::grpc::ClientContext* context, const ::StorageEngineInstance::CSDMetricList& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::Response>>(PrepareAsyncPushCSDMetricRaw(context, request, cq));
    }
    ::grpc::Status t_snippet_scheduling(::grpc::ClientContext* context, const ::StorageEngineInstance::TmaxRequest& request, ::StorageEngineInstance::Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::Response>> Asynct_snippet_scheduling(::grpc::ClientContext* context, const ::StorageEngineInstance::TmaxRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::Response>>(Asynct_snippet_schedulingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::Response>> PrepareAsynct_snippet_scheduling(::grpc::ClientContext* context, const ::StorageEngineInstance::TmaxRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::Response>>(PrepareAsynct_snippet_schedulingRaw(context, request, cq));
    }
    ::grpc::Status t_get_csd_status(::grpc::ClientContext* context, const ::StorageEngineInstance::Empty& request, ::StorageEngineInstance::CSDMetricList* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::CSDMetricList>> Asynct_get_csd_status(::grpc::ClientContext* context, const ::StorageEngineInstance::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::CSDMetricList>>(Asynct_get_csd_statusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::CSDMetricList>> PrepareAsynct_get_csd_status(::grpc::ClientContext* context, const ::StorageEngineInstance::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::CSDMetricList>>(PrepareAsynct_get_csd_statusRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void Scheduling(::grpc::ClientContext* context, const ::StorageEngineInstance::SnippetRequest* request, ::StorageEngineInstance::Response* response, std::function<void(::grpc::Status)>) override;
      void Scheduling(::grpc::ClientContext* context, const ::StorageEngineInstance::SnippetRequest* request, ::StorageEngineInstance::Response* response, ::grpc::ClientUnaryReactor* reactor) override;
      void PushCSDMetric(::grpc::ClientContext* context, const ::StorageEngineInstance::CSDMetricList* request, ::StorageEngineInstance::Response* response, std::function<void(::grpc::Status)>) override;
      void PushCSDMetric(::grpc::ClientContext* context, const ::StorageEngineInstance::CSDMetricList* request, ::StorageEngineInstance::Response* response, ::grpc::ClientUnaryReactor* reactor) override;
      void t_snippet_scheduling(::grpc::ClientContext* context, const ::StorageEngineInstance::TmaxRequest* request, ::StorageEngineInstance::Response* response, std::function<void(::grpc::Status)>) override;
      void t_snippet_scheduling(::grpc::ClientContext* context, const ::StorageEngineInstance::TmaxRequest* request, ::StorageEngineInstance::Response* response, ::grpc::ClientUnaryReactor* reactor) override;
      void t_get_csd_status(::grpc::ClientContext* context, const ::StorageEngineInstance::Empty* request, ::StorageEngineInstance::CSDMetricList* response, std::function<void(::grpc::Status)>) override;
      void t_get_csd_status(::grpc::ClientContext* context, const ::StorageEngineInstance::Empty* request, ::StorageEngineInstance::CSDMetricList* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::Response>* AsyncSchedulingRaw(::grpc::ClientContext* context, const ::StorageEngineInstance::SnippetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::Response>* PrepareAsyncSchedulingRaw(::grpc::ClientContext* context, const ::StorageEngineInstance::SnippetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::Response>* AsyncPushCSDMetricRaw(::grpc::ClientContext* context, const ::StorageEngineInstance::CSDMetricList& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::Response>* PrepareAsyncPushCSDMetricRaw(::grpc::ClientContext* context, const ::StorageEngineInstance::CSDMetricList& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::Response>* Asynct_snippet_schedulingRaw(::grpc::ClientContext* context, const ::StorageEngineInstance::TmaxRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::Response>* PrepareAsynct_snippet_schedulingRaw(::grpc::ClientContext* context, const ::StorageEngineInstance::TmaxRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::CSDMetricList>* Asynct_get_csd_statusRaw(::grpc::ClientContext* context, const ::StorageEngineInstance::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::CSDMetricList>* PrepareAsynct_get_csd_statusRaw(::grpc::ClientContext* context, const ::StorageEngineInstance::Empty& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Scheduling_;
    const ::grpc::internal::RpcMethod rpcmethod_PushCSDMetric_;
    const ::grpc::internal::RpcMethod rpcmethod_t_snippet_scheduling_;
    const ::grpc::internal::RpcMethod rpcmethod_t_get_csd_status_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Scheduling(::grpc::ServerContext* context, const ::StorageEngineInstance::SnippetRequest* request, ::StorageEngineInstance::Response* response);
    virtual ::grpc::Status PushCSDMetric(::grpc::ServerContext* context, const ::StorageEngineInstance::CSDMetricList* request, ::StorageEngineInstance::Response* response);
    virtual ::grpc::Status t_snippet_scheduling(::grpc::ServerContext* context, const ::StorageEngineInstance::TmaxRequest* request, ::StorageEngineInstance::Response* response);
    virtual ::grpc::Status t_get_csd_status(::grpc::ServerContext* context, const ::StorageEngineInstance::Empty* request, ::StorageEngineInstance::CSDMetricList* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Scheduling : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Scheduling() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Scheduling() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Scheduling(::grpc::ServerContext* /*context*/, const ::StorageEngineInstance::SnippetRequest* /*request*/, ::StorageEngineInstance::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestScheduling(::grpc::ServerContext* context, ::StorageEngineInstance::SnippetRequest* request, ::grpc::ServerAsyncResponseWriter< ::StorageEngineInstance::Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PushCSDMetric : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PushCSDMetric() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_PushCSDMetric() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PushCSDMetric(::grpc::ServerContext* /*context*/, const ::StorageEngineInstance::CSDMetricList* /*request*/, ::StorageEngineInstance::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPushCSDMetric(::grpc::ServerContext* context, ::StorageEngineInstance::CSDMetricList* request, ::grpc::ServerAsyncResponseWriter< ::StorageEngineInstance::Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_t_snippet_scheduling : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_t_snippet_scheduling() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_t_snippet_scheduling() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status t_snippet_scheduling(::grpc::ServerContext* /*context*/, const ::StorageEngineInstance::TmaxRequest* /*request*/, ::StorageEngineInstance::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestt_snippet_scheduling(::grpc::ServerContext* context, ::StorageEngineInstance::TmaxRequest* request, ::grpc::ServerAsyncResponseWriter< ::StorageEngineInstance::Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_t_get_csd_status : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_t_get_csd_status() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_t_get_csd_status() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status t_get_csd_status(::grpc::ServerContext* /*context*/, const ::StorageEngineInstance::Empty* /*request*/, ::StorageEngineInstance::CSDMetricList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestt_get_csd_status(::grpc::ServerContext* context, ::StorageEngineInstance::Empty* request, ::grpc::ServerAsyncResponseWriter< ::StorageEngineInstance::CSDMetricList>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Scheduling<WithAsyncMethod_PushCSDMetric<WithAsyncMethod_t_snippet_scheduling<WithAsyncMethod_t_get_csd_status<Service > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_Scheduling : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Scheduling() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::StorageEngineInstance::SnippetRequest, ::StorageEngineInstance::Response>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::StorageEngineInstance::SnippetRequest* request, ::StorageEngineInstance::Response* response) { return this->Scheduling(context, request, response); }));}
    void SetMessageAllocatorFor_Scheduling(
        ::grpc::MessageAllocator< ::StorageEngineInstance::SnippetRequest, ::StorageEngineInstance::Response>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::StorageEngineInstance::SnippetRequest, ::StorageEngineInstance::Response>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Scheduling() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Scheduling(::grpc::ServerContext* /*context*/, const ::StorageEngineInstance::SnippetRequest* /*request*/, ::StorageEngineInstance::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Scheduling(
      ::grpc::CallbackServerContext* /*context*/, const ::StorageEngineInstance::SnippetRequest* /*request*/, ::StorageEngineInstance::Response* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_PushCSDMetric : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_PushCSDMetric() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::StorageEngineInstance::CSDMetricList, ::StorageEngineInstance::Response>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::StorageEngineInstance::CSDMetricList* request, ::StorageEngineInstance::Response* response) { return this->PushCSDMetric(context, request, response); }));}
    void SetMessageAllocatorFor_PushCSDMetric(
        ::grpc::MessageAllocator< ::StorageEngineInstance::CSDMetricList, ::StorageEngineInstance::Response>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::StorageEngineInstance::CSDMetricList, ::StorageEngineInstance::Response>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_PushCSDMetric() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PushCSDMetric(::grpc::ServerContext* /*context*/, const ::StorageEngineInstance::CSDMetricList* /*request*/, ::StorageEngineInstance::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PushCSDMetric(
      ::grpc::CallbackServerContext* /*context*/, const ::StorageEngineInstance::CSDMetricList* /*request*/, ::StorageEngineInstance::Response* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_t_snippet_scheduling : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_t_snippet_scheduling() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::StorageEngineInstance::TmaxRequest, ::StorageEngineInstance::Response>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::StorageEngineInstance::TmaxRequest* request, ::StorageEngineInstance::Response* response) { return this->t_snippet_scheduling(context, request, response); }));}
    void SetMessageAllocatorFor_t_snippet_scheduling(
        ::grpc::MessageAllocator< ::StorageEngineInstance::TmaxRequest, ::StorageEngineInstance::Response>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::StorageEngineInstance::TmaxRequest, ::StorageEngineInstance::Response>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_t_snippet_scheduling() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status t_snippet_scheduling(::grpc::ServerContext* /*context*/, const ::StorageEngineInstance::TmaxRequest* /*request*/, ::StorageEngineInstance::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* t_snippet_scheduling(
      ::grpc::CallbackServerContext* /*context*/, const ::StorageEngineInstance::TmaxRequest* /*request*/, ::StorageEngineInstance::Response* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_t_get_csd_status : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_t_get_csd_status() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::StorageEngineInstance::Empty, ::StorageEngineInstance::CSDMetricList>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::StorageEngineInstance::Empty* request, ::StorageEngineInstance::CSDMetricList* response) { return this->t_get_csd_status(context, request, response); }));}
    void SetMessageAllocatorFor_t_get_csd_status(
        ::grpc::MessageAllocator< ::StorageEngineInstance::Empty, ::StorageEngineInstance::CSDMetricList>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::StorageEngineInstance::Empty, ::StorageEngineInstance::CSDMetricList>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_t_get_csd_status() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status t_get_csd_status(::grpc::ServerContext* /*context*/, const ::StorageEngineInstance::Empty* /*request*/, ::StorageEngineInstance::CSDMetricList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* t_get_csd_status(
      ::grpc::CallbackServerContext* /*context*/, const ::StorageEngineInstance::Empty* /*request*/, ::StorageEngineInstance::CSDMetricList* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_Scheduling<WithCallbackMethod_PushCSDMetric<WithCallbackMethod_t_snippet_scheduling<WithCallbackMethod_t_get_csd_status<Service > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Scheduling : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Scheduling() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Scheduling() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Scheduling(::grpc::ServerContext* /*context*/, const ::StorageEngineInstance::SnippetRequest* /*request*/, ::StorageEngineInstance::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PushCSDMetric : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PushCSDMetric() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_PushCSDMetric() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PushCSDMetric(::grpc::ServerContext* /*context*/, const ::StorageEngineInstance::CSDMetricList* /*request*/, ::StorageEngineInstance::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_t_snippet_scheduling : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_t_snippet_scheduling() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_t_snippet_scheduling() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status t_snippet_scheduling(::grpc::ServerContext* /*context*/, const ::StorageEngineInstance::TmaxRequest* /*request*/, ::StorageEngineInstance::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_t_get_csd_status : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_t_get_csd_status() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_t_get_csd_status() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status t_get_csd_status(::grpc::ServerContext* /*context*/, const ::StorageEngineInstance::Empty* /*request*/, ::StorageEngineInstance::CSDMetricList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Scheduling : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Scheduling() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Scheduling() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Scheduling(::grpc::ServerContext* /*context*/, const ::StorageEngineInstance::SnippetRequest* /*request*/, ::StorageEngineInstance::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestScheduling(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PushCSDMetric : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PushCSDMetric() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_PushCSDMetric() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PushCSDMetric(::grpc::ServerContext* /*context*/, const ::StorageEngineInstance::CSDMetricList* /*request*/, ::StorageEngineInstance::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPushCSDMetric(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_t_snippet_scheduling : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_t_snippet_scheduling() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_t_snippet_scheduling() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status t_snippet_scheduling(::grpc::ServerContext* /*context*/, const ::StorageEngineInstance::TmaxRequest* /*request*/, ::StorageEngineInstance::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestt_snippet_scheduling(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_t_get_csd_status : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_t_get_csd_status() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_t_get_csd_status() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status t_get_csd_status(::grpc::ServerContext* /*context*/, const ::StorageEngineInstance::Empty* /*request*/, ::StorageEngineInstance::CSDMetricList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestt_get_csd_status(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Scheduling : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Scheduling() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Scheduling(context, request, response); }));
    }
    ~WithRawCallbackMethod_Scheduling() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Scheduling(::grpc::ServerContext* /*context*/, const ::StorageEngineInstance::SnippetRequest* /*request*/, ::StorageEngineInstance::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Scheduling(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_PushCSDMetric : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_PushCSDMetric() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PushCSDMetric(context, request, response); }));
    }
    ~WithRawCallbackMethod_PushCSDMetric() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PushCSDMetric(::grpc::ServerContext* /*context*/, const ::StorageEngineInstance::CSDMetricList* /*request*/, ::StorageEngineInstance::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PushCSDMetric(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_t_snippet_scheduling : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_t_snippet_scheduling() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->t_snippet_scheduling(context, request, response); }));
    }
    ~WithRawCallbackMethod_t_snippet_scheduling() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status t_snippet_scheduling(::grpc::ServerContext* /*context*/, const ::StorageEngineInstance::TmaxRequest* /*request*/, ::StorageEngineInstance::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* t_snippet_scheduling(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_t_get_csd_status : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_t_get_csd_status() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->t_get_csd_status(context, request, response); }));
    }
    ~WithRawCallbackMethod_t_get_csd_status() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status t_get_csd_status(::grpc::ServerContext* /*context*/, const ::StorageEngineInstance::Empty* /*request*/, ::StorageEngineInstance::CSDMetricList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* t_get_csd_status(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Scheduling : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Scheduling() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::StorageEngineInstance::SnippetRequest, ::StorageEngineInstance::Response>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::StorageEngineInstance::SnippetRequest, ::StorageEngineInstance::Response>* streamer) {
                       return this->StreamedScheduling(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Scheduling() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Scheduling(::grpc::ServerContext* /*context*/, const ::StorageEngineInstance::SnippetRequest* /*request*/, ::StorageEngineInstance::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedScheduling(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::StorageEngineInstance::SnippetRequest,::StorageEngineInstance::Response>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PushCSDMetric : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PushCSDMetric() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::StorageEngineInstance::CSDMetricList, ::StorageEngineInstance::Response>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::StorageEngineInstance::CSDMetricList, ::StorageEngineInstance::Response>* streamer) {
                       return this->StreamedPushCSDMetric(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PushCSDMetric() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PushCSDMetric(::grpc::ServerContext* /*context*/, const ::StorageEngineInstance::CSDMetricList* /*request*/, ::StorageEngineInstance::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPushCSDMetric(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::StorageEngineInstance::CSDMetricList,::StorageEngineInstance::Response>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_t_snippet_scheduling : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_t_snippet_scheduling() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::StorageEngineInstance::TmaxRequest, ::StorageEngineInstance::Response>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::StorageEngineInstance::TmaxRequest, ::StorageEngineInstance::Response>* streamer) {
                       return this->Streamedt_snippet_scheduling(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_t_snippet_scheduling() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status t_snippet_scheduling(::grpc::ServerContext* /*context*/, const ::StorageEngineInstance::TmaxRequest* /*request*/, ::StorageEngineInstance::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedt_snippet_scheduling(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::StorageEngineInstance::TmaxRequest,::StorageEngineInstance::Response>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_t_get_csd_status : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_t_get_csd_status() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::StorageEngineInstance::Empty, ::StorageEngineInstance::CSDMetricList>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::StorageEngineInstance::Empty, ::StorageEngineInstance::CSDMetricList>* streamer) {
                       return this->Streamedt_get_csd_status(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_t_get_csd_status() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status t_get_csd_status(::grpc::ServerContext* /*context*/, const ::StorageEngineInstance::Empty* /*request*/, ::StorageEngineInstance::CSDMetricList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedt_get_csd_status(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::StorageEngineInstance::Empty,::StorageEngineInstance::CSDMetricList>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Scheduling<WithStreamedUnaryMethod_PushCSDMetric<WithStreamedUnaryMethod_t_snippet_scheduling<WithStreamedUnaryMethod_t_get_csd_status<Service > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Scheduling<WithStreamedUnaryMethod_PushCSDMetric<WithStreamedUnaryMethod_t_snippet_scheduling<WithStreamedUnaryMethod_t_get_csd_status<Service > > > > StreamedService;
};

class StorageManager final {
 public:
  static constexpr char const* service_full_name() {
    return "StorageEngineInstance.StorageManager";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status RequestPBA(::grpc::ClientContext* context, const ::StorageEngineInstance::LBARequest& request, ::StorageEngineInstance::PBAResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StorageEngineInstance::PBAResponse>> AsyncRequestPBA(::grpc::ClientContext* context, const ::StorageEngineInstance::LBARequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StorageEngineInstance::PBAResponse>>(AsyncRequestPBARaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StorageEngineInstance::PBAResponse>> PrepareAsyncRequestPBA(::grpc::ClientContext* context, const ::StorageEngineInstance::LBARequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StorageEngineInstance::PBAResponse>>(PrepareAsyncRequestPBARaw(context, request, cq));
    }
    virtual ::grpc::Status RequestVolumeAllocation(::grpc::ClientContext* context, const ::StorageEngineInstance::VolumeRequest& request, ::StorageEngineInstance::AllocatedVolumeInfo* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StorageEngineInstance::AllocatedVolumeInfo>> AsyncRequestVolumeAllocation(::grpc::ClientContext* context, const ::StorageEngineInstance::VolumeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StorageEngineInstance::AllocatedVolumeInfo>>(AsyncRequestVolumeAllocationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StorageEngineInstance::AllocatedVolumeInfo>> PrepareAsyncRequestVolumeAllocation(::grpc::ClientContext* context, const ::StorageEngineInstance::VolumeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StorageEngineInstance::AllocatedVolumeInfo>>(PrepareAsyncRequestVolumeAllocationRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void RequestPBA(::grpc::ClientContext* context, const ::StorageEngineInstance::LBARequest* request, ::StorageEngineInstance::PBAResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RequestPBA(::grpc::ClientContext* context, const ::StorageEngineInstance::LBARequest* request, ::StorageEngineInstance::PBAResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void RequestVolumeAllocation(::grpc::ClientContext* context, const ::StorageEngineInstance::VolumeRequest* request, ::StorageEngineInstance::AllocatedVolumeInfo* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RequestVolumeAllocation(::grpc::ClientContext* context, const ::StorageEngineInstance::VolumeRequest* request, ::StorageEngineInstance::AllocatedVolumeInfo* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::StorageEngineInstance::PBAResponse>* AsyncRequestPBARaw(::grpc::ClientContext* context, const ::StorageEngineInstance::LBARequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::StorageEngineInstance::PBAResponse>* PrepareAsyncRequestPBARaw(::grpc::ClientContext* context, const ::StorageEngineInstance::LBARequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::StorageEngineInstance::AllocatedVolumeInfo>* AsyncRequestVolumeAllocationRaw(::grpc::ClientContext* context, const ::StorageEngineInstance::VolumeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::StorageEngineInstance::AllocatedVolumeInfo>* PrepareAsyncRequestVolumeAllocationRaw(::grpc::ClientContext* context, const ::StorageEngineInstance::VolumeRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status RequestPBA(::grpc::ClientContext* context, const ::StorageEngineInstance::LBARequest& request, ::StorageEngineInstance::PBAResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::PBAResponse>> AsyncRequestPBA(::grpc::ClientContext* context, const ::StorageEngineInstance::LBARequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::PBAResponse>>(AsyncRequestPBARaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::PBAResponse>> PrepareAsyncRequestPBA(::grpc::ClientContext* context, const ::StorageEngineInstance::LBARequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::PBAResponse>>(PrepareAsyncRequestPBARaw(context, request, cq));
    }
    ::grpc::Status RequestVolumeAllocation(::grpc::ClientContext* context, const ::StorageEngineInstance::VolumeRequest& request, ::StorageEngineInstance::AllocatedVolumeInfo* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::AllocatedVolumeInfo>> AsyncRequestVolumeAllocation(::grpc::ClientContext* context, const ::StorageEngineInstance::VolumeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::AllocatedVolumeInfo>>(AsyncRequestVolumeAllocationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::AllocatedVolumeInfo>> PrepareAsyncRequestVolumeAllocation(::grpc::ClientContext* context, const ::StorageEngineInstance::VolumeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::AllocatedVolumeInfo>>(PrepareAsyncRequestVolumeAllocationRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void RequestPBA(::grpc::ClientContext* context, const ::StorageEngineInstance::LBARequest* request, ::StorageEngineInstance::PBAResponse* response, std::function<void(::grpc::Status)>) override;
      void RequestPBA(::grpc::ClientContext* context, const ::StorageEngineInstance::LBARequest* request, ::StorageEngineInstance::PBAResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void RequestVolumeAllocation(::grpc::ClientContext* context, const ::StorageEngineInstance::VolumeRequest* request, ::StorageEngineInstance::AllocatedVolumeInfo* response, std::function<void(::grpc::Status)>) override;
      void RequestVolumeAllocation(::grpc::ClientContext* context, const ::StorageEngineInstance::VolumeRequest* request, ::StorageEngineInstance::AllocatedVolumeInfo* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::PBAResponse>* AsyncRequestPBARaw(::grpc::ClientContext* context, const ::StorageEngineInstance::LBARequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::PBAResponse>* PrepareAsyncRequestPBARaw(::grpc::ClientContext* context, const ::StorageEngineInstance::LBARequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::AllocatedVolumeInfo>* AsyncRequestVolumeAllocationRaw(::grpc::ClientContext* context, const ::StorageEngineInstance::VolumeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::AllocatedVolumeInfo>* PrepareAsyncRequestVolumeAllocationRaw(::grpc::ClientContext* context, const ::StorageEngineInstance::VolumeRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_RequestPBA_;
    const ::grpc::internal::RpcMethod rpcmethod_RequestVolumeAllocation_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status RequestPBA(::grpc::ServerContext* context, const ::StorageEngineInstance::LBARequest* request, ::StorageEngineInstance::PBAResponse* response);
    virtual ::grpc::Status RequestVolumeAllocation(::grpc::ServerContext* context, const ::StorageEngineInstance::VolumeRequest* request, ::StorageEngineInstance::AllocatedVolumeInfo* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_RequestPBA : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RequestPBA() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_RequestPBA() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestPBA(::grpc::ServerContext* /*context*/, const ::StorageEngineInstance::LBARequest* /*request*/, ::StorageEngineInstance::PBAResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRequestPBA(::grpc::ServerContext* context, ::StorageEngineInstance::LBARequest* request, ::grpc::ServerAsyncResponseWriter< ::StorageEngineInstance::PBAResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RequestVolumeAllocation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RequestVolumeAllocation() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_RequestVolumeAllocation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestVolumeAllocation(::grpc::ServerContext* /*context*/, const ::StorageEngineInstance::VolumeRequest* /*request*/, ::StorageEngineInstance::AllocatedVolumeInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRequestVolumeAllocation(::grpc::ServerContext* context, ::StorageEngineInstance::VolumeRequest* request, ::grpc::ServerAsyncResponseWriter< ::StorageEngineInstance::AllocatedVolumeInfo>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_RequestPBA<WithAsyncMethod_RequestVolumeAllocation<Service > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_RequestPBA : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_RequestPBA() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::StorageEngineInstance::LBARequest, ::StorageEngineInstance::PBAResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::StorageEngineInstance::LBARequest* request, ::StorageEngineInstance::PBAResponse* response) { return this->RequestPBA(context, request, response); }));}
    void SetMessageAllocatorFor_RequestPBA(
        ::grpc::MessageAllocator< ::StorageEngineInstance::LBARequest, ::StorageEngineInstance::PBAResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::StorageEngineInstance::LBARequest, ::StorageEngineInstance::PBAResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_RequestPBA() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestPBA(::grpc::ServerContext* /*context*/, const ::StorageEngineInstance::LBARequest* /*request*/, ::StorageEngineInstance::PBAResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RequestPBA(
      ::grpc::CallbackServerContext* /*context*/, const ::StorageEngineInstance::LBARequest* /*request*/, ::StorageEngineInstance::PBAResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_RequestVolumeAllocation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_RequestVolumeAllocation() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::StorageEngineInstance::VolumeRequest, ::StorageEngineInstance::AllocatedVolumeInfo>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::StorageEngineInstance::VolumeRequest* request, ::StorageEngineInstance::AllocatedVolumeInfo* response) { return this->RequestVolumeAllocation(context, request, response); }));}
    void SetMessageAllocatorFor_RequestVolumeAllocation(
        ::grpc::MessageAllocator< ::StorageEngineInstance::VolumeRequest, ::StorageEngineInstance::AllocatedVolumeInfo>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::StorageEngineInstance::VolumeRequest, ::StorageEngineInstance::AllocatedVolumeInfo>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_RequestVolumeAllocation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestVolumeAllocation(::grpc::ServerContext* /*context*/, const ::StorageEngineInstance::VolumeRequest* /*request*/, ::StorageEngineInstance::AllocatedVolumeInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RequestVolumeAllocation(
      ::grpc::CallbackServerContext* /*context*/, const ::StorageEngineInstance::VolumeRequest* /*request*/, ::StorageEngineInstance::AllocatedVolumeInfo* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_RequestPBA<WithCallbackMethod_RequestVolumeAllocation<Service > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_RequestPBA : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RequestPBA() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_RequestPBA() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestPBA(::grpc::ServerContext* /*context*/, const ::StorageEngineInstance::LBARequest* /*request*/, ::StorageEngineInstance::PBAResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RequestVolumeAllocation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RequestVolumeAllocation() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_RequestVolumeAllocation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestVolumeAllocation(::grpc::ServerContext* /*context*/, const ::StorageEngineInstance::VolumeRequest* /*request*/, ::StorageEngineInstance::AllocatedVolumeInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_RequestPBA : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RequestPBA() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_RequestPBA() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestPBA(::grpc::ServerContext* /*context*/, const ::StorageEngineInstance::LBARequest* /*request*/, ::StorageEngineInstance::PBAResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRequestPBA(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RequestVolumeAllocation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RequestVolumeAllocation() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_RequestVolumeAllocation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestVolumeAllocation(::grpc::ServerContext* /*context*/, const ::StorageEngineInstance::VolumeRequest* /*request*/, ::StorageEngineInstance::AllocatedVolumeInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRequestVolumeAllocation(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_RequestPBA : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_RequestPBA() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RequestPBA(context, request, response); }));
    }
    ~WithRawCallbackMethod_RequestPBA() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestPBA(::grpc::ServerContext* /*context*/, const ::StorageEngineInstance::LBARequest* /*request*/, ::StorageEngineInstance::PBAResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RequestPBA(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_RequestVolumeAllocation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_RequestVolumeAllocation() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RequestVolumeAllocation(context, request, response); }));
    }
    ~WithRawCallbackMethod_RequestVolumeAllocation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestVolumeAllocation(::grpc::ServerContext* /*context*/, const ::StorageEngineInstance::VolumeRequest* /*request*/, ::StorageEngineInstance::AllocatedVolumeInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RequestVolumeAllocation(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RequestPBA : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RequestPBA() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::StorageEngineInstance::LBARequest, ::StorageEngineInstance::PBAResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::StorageEngineInstance::LBARequest, ::StorageEngineInstance::PBAResponse>* streamer) {
                       return this->StreamedRequestPBA(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RequestPBA() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RequestPBA(::grpc::ServerContext* /*context*/, const ::StorageEngineInstance::LBARequest* /*request*/, ::StorageEngineInstance::PBAResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRequestPBA(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::StorageEngineInstance::LBARequest,::StorageEngineInstance::PBAResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RequestVolumeAllocation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RequestVolumeAllocation() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::StorageEngineInstance::VolumeRequest, ::StorageEngineInstance::AllocatedVolumeInfo>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::StorageEngineInstance::VolumeRequest, ::StorageEngineInstance::AllocatedVolumeInfo>* streamer) {
                       return this->StreamedRequestVolumeAllocation(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RequestVolumeAllocation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RequestVolumeAllocation(::grpc::ServerContext* /*context*/, const ::StorageEngineInstance::VolumeRequest* /*request*/, ::StorageEngineInstance::AllocatedVolumeInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRequestVolumeAllocation(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::StorageEngineInstance::VolumeRequest,::StorageEngineInstance::AllocatedVolumeInfo>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_RequestPBA<WithStreamedUnaryMethod_RequestVolumeAllocation<Service > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_RequestPBA<WithStreamedUnaryMethod_RequestVolumeAllocation<Service > > StreamedService;
};

class WALManager final {
 public:
  static constexpr char const* service_full_name() {
    return "StorageEngineInstance.WALManager";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status RequestWAL(::grpc::ClientContext* context, const ::StorageEngineInstance::WALRequest& request, ::StorageEngineInstance::WALResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StorageEngineInstance::WALResponse>> AsyncRequestWAL(::grpc::ClientContext* context, const ::StorageEngineInstance::WALRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StorageEngineInstance::WALResponse>>(AsyncRequestWALRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StorageEngineInstance::WALResponse>> PrepareAsyncRequestWAL(::grpc::ClientContext* context, const ::StorageEngineInstance::WALRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StorageEngineInstance::WALResponse>>(PrepareAsyncRequestWALRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void RequestWAL(::grpc::ClientContext* context, const ::StorageEngineInstance::WALRequest* request, ::StorageEngineInstance::WALResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RequestWAL(::grpc::ClientContext* context, const ::StorageEngineInstance::WALRequest* request, ::StorageEngineInstance::WALResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::StorageEngineInstance::WALResponse>* AsyncRequestWALRaw(::grpc::ClientContext* context, const ::StorageEngineInstance::WALRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::StorageEngineInstance::WALResponse>* PrepareAsyncRequestWALRaw(::grpc::ClientContext* context, const ::StorageEngineInstance::WALRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status RequestWAL(::grpc::ClientContext* context, const ::StorageEngineInstance::WALRequest& request, ::StorageEngineInstance::WALResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::WALResponse>> AsyncRequestWAL(::grpc::ClientContext* context, const ::StorageEngineInstance::WALRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::WALResponse>>(AsyncRequestWALRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::WALResponse>> PrepareAsyncRequestWAL(::grpc::ClientContext* context, const ::StorageEngineInstance::WALRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::WALResponse>>(PrepareAsyncRequestWALRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void RequestWAL(::grpc::ClientContext* context, const ::StorageEngineInstance::WALRequest* request, ::StorageEngineInstance::WALResponse* response, std::function<void(::grpc::Status)>) override;
      void RequestWAL(::grpc::ClientContext* context, const ::StorageEngineInstance::WALRequest* request, ::StorageEngineInstance::WALResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::WALResponse>* AsyncRequestWALRaw(::grpc::ClientContext* context, const ::StorageEngineInstance::WALRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::WALResponse>* PrepareAsyncRequestWALRaw(::grpc::ClientContext* context, const ::StorageEngineInstance::WALRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_RequestWAL_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status RequestWAL(::grpc::ServerContext* context, const ::StorageEngineInstance::WALRequest* request, ::StorageEngineInstance::WALResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_RequestWAL : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RequestWAL() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_RequestWAL() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestWAL(::grpc::ServerContext* /*context*/, const ::StorageEngineInstance::WALRequest* /*request*/, ::StorageEngineInstance::WALResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRequestWAL(::grpc::ServerContext* context, ::StorageEngineInstance::WALRequest* request, ::grpc::ServerAsyncResponseWriter< ::StorageEngineInstance::WALResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_RequestWAL<Service > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_RequestWAL : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_RequestWAL() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::StorageEngineInstance::WALRequest, ::StorageEngineInstance::WALResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::StorageEngineInstance::WALRequest* request, ::StorageEngineInstance::WALResponse* response) { return this->RequestWAL(context, request, response); }));}
    void SetMessageAllocatorFor_RequestWAL(
        ::grpc::MessageAllocator< ::StorageEngineInstance::WALRequest, ::StorageEngineInstance::WALResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::StorageEngineInstance::WALRequest, ::StorageEngineInstance::WALResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_RequestWAL() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestWAL(::grpc::ServerContext* /*context*/, const ::StorageEngineInstance::WALRequest* /*request*/, ::StorageEngineInstance::WALResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RequestWAL(
      ::grpc::CallbackServerContext* /*context*/, const ::StorageEngineInstance::WALRequest* /*request*/, ::StorageEngineInstance::WALResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_RequestWAL<Service > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_RequestWAL : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RequestWAL() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_RequestWAL() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestWAL(::grpc::ServerContext* /*context*/, const ::StorageEngineInstance::WALRequest* /*request*/, ::StorageEngineInstance::WALResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_RequestWAL : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RequestWAL() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_RequestWAL() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestWAL(::grpc::ServerContext* /*context*/, const ::StorageEngineInstance::WALRequest* /*request*/, ::StorageEngineInstance::WALResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRequestWAL(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_RequestWAL : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_RequestWAL() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RequestWAL(context, request, response); }));
    }
    ~WithRawCallbackMethod_RequestWAL() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestWAL(::grpc::ServerContext* /*context*/, const ::StorageEngineInstance::WALRequest* /*request*/, ::StorageEngineInstance::WALResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RequestWAL(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RequestWAL : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RequestWAL() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::StorageEngineInstance::WALRequest, ::StorageEngineInstance::WALResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::StorageEngineInstance::WALRequest, ::StorageEngineInstance::WALResponse>* streamer) {
                       return this->StreamedRequestWAL(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RequestWAL() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RequestWAL(::grpc::ServerContext* /*context*/, const ::StorageEngineInstance::WALRequest* /*request*/, ::StorageEngineInstance::WALResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRequestWAL(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::StorageEngineInstance::WALRequest,::StorageEngineInstance::WALResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_RequestWAL<Service > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_RequestWAL<Service > StreamedService;
};

}  // namespace StorageEngineInstance


#endif  // GRPC_storage_5fengine_5finstance_2eproto__INCLUDED
