// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: storage_engine_instance.proto

#include "storage_engine_instance.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace StorageEngineInstance {
constexpr SnippetRequest::SnippetRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : snippet_(nullptr)
  , type_(0)
{}
struct SnippetRequestDefaultTypeInternal {
  constexpr SnippetRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SnippetRequestDefaultTypeInternal() {}
  union {
    SnippetRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SnippetRequestDefaultTypeInternal _SnippetRequest_default_instance_;
constexpr Snippet_Filter_FilterValue::Snippet_Filter_FilterValue(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : type_()
  , _type_cached_byte_size_(0)
  , value_(){}
struct Snippet_Filter_FilterValueDefaultTypeInternal {
  constexpr Snippet_Filter_FilterValueDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Snippet_Filter_FilterValueDefaultTypeInternal() {}
  union {
    Snippet_Filter_FilterValue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Snippet_Filter_FilterValueDefaultTypeInternal _Snippet_Filter_FilterValue_default_instance_;
constexpr Snippet_Filter::Snippet_Filter(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : lv_(nullptr)
  , rv_(nullptr)
  , operator__(0)
{}
struct Snippet_FilterDefaultTypeInternal {
  constexpr Snippet_FilterDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Snippet_FilterDefaultTypeInternal() {}
  union {
    Snippet_Filter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Snippet_FilterDefaultTypeInternal _Snippet_Filter_default_instance_;
constexpr Snippet_Projection::Snippet_Projection(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_()
  , value_type_()
  , _value_type_cached_byte_size_(0)
  , select_type_(0)
{}
struct Snippet_ProjectionDefaultTypeInternal {
  constexpr Snippet_ProjectionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Snippet_ProjectionDefaultTypeInternal() {}
  union {
    Snippet_Projection _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Snippet_ProjectionDefaultTypeInternal _Snippet_Projection_default_instance_;
constexpr Snippet_Order::Snippet_Order(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ascending_()
  , _ascending_cached_byte_size_(0)
  , column_name_(){}
struct Snippet_OrderDefaultTypeInternal {
  constexpr Snippet_OrderDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Snippet_OrderDefaultTypeInternal() {}
  union {
    Snippet_Order _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Snippet_OrderDefaultTypeInternal _Snippet_Order_default_instance_;
constexpr Snippet_Dependency::Snippet_Dependency(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : dependency_projection_()
  , dependency_filter_(){}
struct Snippet_DependencyDefaultTypeInternal {
  constexpr Snippet_DependencyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Snippet_DependencyDefaultTypeInternal() {}
  union {
    Snippet_Dependency _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Snippet_DependencyDefaultTypeInternal _Snippet_Dependency_default_instance_;
constexpr Snippet_Limit::Snippet_Limit(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : offset_(0)
  , length_(0){}
struct Snippet_LimitDefaultTypeInternal {
  constexpr Snippet_LimitDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Snippet_LimitDefaultTypeInternal() {}
  union {
    Snippet_Limit _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Snippet_LimitDefaultTypeInternal _Snippet_Limit_default_instance_;
constexpr Snippet::Snippet(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : table_name_()
  , table_col_()
  , table_filter_()
  , table_offset_()
  , _table_offset_cached_byte_size_(0)
  , table_offlen_()
  , _table_offlen_cached_byte_size_(0)
  , table_datatype_()
  , _table_datatype_cached_byte_size_(0)
  , column_alias_()
  , column_projection_()
  , column_filtering_()
  , group_by_()
  , having_()
  , db_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , table_alias_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , dependency_(nullptr)
  , order_by_(nullptr)
  , limit_(nullptr)
  , query_id_(0)
  , work_id_(0)
  , pk_num_(0){}
struct SnippetDefaultTypeInternal {
  constexpr SnippetDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SnippetDefaultTypeInternal() {}
  union {
    Snippet _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SnippetDefaultTypeInternal _Snippet_default_instance_;
constexpr Request_SstCsdMapEntry_DoNotUse::Request_SstCsdMapEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct Request_SstCsdMapEntry_DoNotUseDefaultTypeInternal {
  constexpr Request_SstCsdMapEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Request_SstCsdMapEntry_DoNotUseDefaultTypeInternal() {}
  union {
    Request_SstCsdMapEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Request_SstCsdMapEntry_DoNotUseDefaultTypeInternal _Request_SstCsdMapEntry_DoNotUse_default_instance_;
constexpr Request::Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : sst_csd_map_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , db_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , table_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , query_id_(0)
  , work_id_(0)
  , table_index_number_(0){}
struct RequestDefaultTypeInternal {
  constexpr RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RequestDefaultTypeInternal() {}
  union {
    Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RequestDefaultTypeInternal _Request_default_instance_;
constexpr Response::Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ResponseDefaultTypeInternal {
  constexpr ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResponseDefaultTypeInternal() {}
  union {
    Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResponseDefaultTypeInternal _Response_default_instance_;
constexpr QueryResult_Column::QueryResult_Column(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : string_col_()
  , int_col_()
  , _int_col_cached_byte_size_(0)
  , double_col_()
  , col_type_(0)
{}
struct QueryResult_ColumnDefaultTypeInternal {
  constexpr QueryResult_ColumnDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~QueryResult_ColumnDefaultTypeInternal() {}
  union {
    QueryResult_Column _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT QueryResult_ColumnDefaultTypeInternal _QueryResult_Column_default_instance_;
constexpr QueryResult_QueryResultEntry_DoNotUse::QueryResult_QueryResultEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct QueryResult_QueryResultEntry_DoNotUseDefaultTypeInternal {
  constexpr QueryResult_QueryResultEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~QueryResult_QueryResultEntry_DoNotUseDefaultTypeInternal() {}
  union {
    QueryResult_QueryResultEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT QueryResult_QueryResultEntry_DoNotUseDefaultTypeInternal _QueryResult_QueryResultEntry_DoNotUse_default_instance_;
constexpr QueryResult::QueryResult(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : query_result_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , row_count_(0)
  , scanned_row_count_(0)
  , filtered_row_count_(0){}
struct QueryResultDefaultTypeInternal {
  constexpr QueryResultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~QueryResultDefaultTypeInternal() {}
  union {
    QueryResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT QueryResultDefaultTypeInternal _QueryResult_default_instance_;
constexpr QueryStringResult::QueryStringResult(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : query_result_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , scanned_row_count_(0)
  , filtered_row_count_(0){}
struct QueryStringResultDefaultTypeInternal {
  constexpr QueryStringResultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~QueryStringResultDefaultTypeInternal() {}
  union {
    QueryStringResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT QueryStringResultDefaultTypeInternal _QueryStringResult_default_instance_;
constexpr DBInfo_DB_Table::DBInfo_DB_Table(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : sst_list_()
  , table_index_number_(0){}
struct DBInfo_DB_TableDefaultTypeInternal {
  constexpr DBInfo_DB_TableDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DBInfo_DB_TableDefaultTypeInternal() {}
  union {
    DBInfo_DB_Table _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DBInfo_DB_TableDefaultTypeInternal _DBInfo_DB_Table_default_instance_;
constexpr DBInfo_DB_TableListEntry_DoNotUse::DBInfo_DB_TableListEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct DBInfo_DB_TableListEntry_DoNotUseDefaultTypeInternal {
  constexpr DBInfo_DB_TableListEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DBInfo_DB_TableListEntry_DoNotUseDefaultTypeInternal() {}
  union {
    DBInfo_DB_TableListEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DBInfo_DB_TableListEntry_DoNotUseDefaultTypeInternal _DBInfo_DB_TableListEntry_DoNotUse_default_instance_;
constexpr DBInfo_DB::DBInfo_DB(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : table_list_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}){}
struct DBInfo_DBDefaultTypeInternal {
  constexpr DBInfo_DBDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DBInfo_DBDefaultTypeInternal() {}
  union {
    DBInfo_DB _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DBInfo_DBDefaultTypeInternal _DBInfo_DB_default_instance_;
constexpr DBInfo_DbListEntry_DoNotUse::DBInfo_DbListEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct DBInfo_DbListEntry_DoNotUseDefaultTypeInternal {
  constexpr DBInfo_DbListEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DBInfo_DbListEntry_DoNotUseDefaultTypeInternal() {}
  union {
    DBInfo_DbListEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DBInfo_DbListEntry_DoNotUseDefaultTypeInternal _DBInfo_DbListEntry_DoNotUse_default_instance_;
constexpr DBInfo::DBInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : db_list_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}){}
struct DBInfoDefaultTypeInternal {
  constexpr DBInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DBInfoDefaultTypeInternal() {}
  union {
    DBInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DBInfoDefaultTypeInternal _DBInfo_default_instance_;
constexpr DataFileInfo_CSD::DataFileInfo_CSD(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : csd_id_(){}
struct DataFileInfo_CSDDefaultTypeInternal {
  constexpr DataFileInfo_CSDDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DataFileInfo_CSDDefaultTypeInternal() {}
  union {
    DataFileInfo_CSD _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DataFileInfo_CSDDefaultTypeInternal _DataFileInfo_CSD_default_instance_;
constexpr DataFileInfo_SstCsdMapEntry_DoNotUse::DataFileInfo_SstCsdMapEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct DataFileInfo_SstCsdMapEntry_DoNotUseDefaultTypeInternal {
  constexpr DataFileInfo_SstCsdMapEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DataFileInfo_SstCsdMapEntry_DoNotUseDefaultTypeInternal() {}
  union {
    DataFileInfo_SstCsdMapEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DataFileInfo_SstCsdMapEntry_DoNotUseDefaultTypeInternal _DataFileInfo_SstCsdMapEntry_DoNotUse_default_instance_;
constexpr DataFileInfo::DataFileInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : sst_csd_map_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}){}
struct DataFileInfoDefaultTypeInternal {
  constexpr DataFileInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DataFileInfoDefaultTypeInternal() {}
  union {
    DataFileInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DataFileInfoDefaultTypeInternal _DataFileInfo_default_instance_;
constexpr SSTList::SSTList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : sst_list_(){}
struct SSTListDefaultTypeInternal {
  constexpr SSTListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SSTListDefaultTypeInternal() {}
  union {
    SSTList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SSTListDefaultTypeInternal _SSTList_default_instance_;
constexpr SnippetMetaData_SstPbaMapEntry_DoNotUse::SnippetMetaData_SstPbaMapEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct SnippetMetaData_SstPbaMapEntry_DoNotUseDefaultTypeInternal {
  constexpr SnippetMetaData_SstPbaMapEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SnippetMetaData_SstPbaMapEntry_DoNotUseDefaultTypeInternal() {}
  union {
    SnippetMetaData_SstPbaMapEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SnippetMetaData_SstPbaMapEntry_DoNotUseDefaultTypeInternal _SnippetMetaData_SstPbaMapEntry_DoNotUse_default_instance_;
constexpr SnippetMetaData::SnippetMetaData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : sst_pba_map_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , wal_inserted_row_json_()
  , wal_deleted_key_json_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , table_total_block_count_(0){}
struct SnippetMetaDataDefaultTypeInternal {
  constexpr SnippetMetaDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SnippetMetaDataDefaultTypeInternal() {}
  union {
    SnippetMetaData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SnippetMetaDataDefaultTypeInternal _SnippetMetaData_default_instance_;
constexpr CSDMetricList_CSDMetric::CSDMetricList_CSDMetric(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , ip_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , cpu_usage_(0)
  , memory_usage_(0)
  , disk_usage_(0)
  , network_(0)
  , working_block_count_(0)
  , score_(0){}
struct CSDMetricList_CSDMetricDefaultTypeInternal {
  constexpr CSDMetricList_CSDMetricDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSDMetricList_CSDMetricDefaultTypeInternal() {}
  union {
    CSDMetricList_CSDMetric _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSDMetricList_CSDMetricDefaultTypeInternal _CSDMetricList_CSDMetric_default_instance_;
constexpr CSDMetricList::CSDMetricList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : csd_metric_list_(){}
struct CSDMetricListDefaultTypeInternal {
  constexpr CSDMetricListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSDMetricListDefaultTypeInternal() {}
  union {
    CSDMetricList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSDMetricListDefaultTypeInternal _CSDMetricList_default_instance_;
constexpr LBA2PBARequest_SstCsdMapEntry_DoNotUse::LBA2PBARequest_SstCsdMapEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct LBA2PBARequest_SstCsdMapEntry_DoNotUseDefaultTypeInternal {
  constexpr LBA2PBARequest_SstCsdMapEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LBA2PBARequest_SstCsdMapEntry_DoNotUseDefaultTypeInternal() {}
  union {
    LBA2PBARequest_SstCsdMapEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LBA2PBARequest_SstCsdMapEntry_DoNotUseDefaultTypeInternal _LBA2PBARequest_SstCsdMapEntry_DoNotUse_default_instance_;
constexpr LBA2PBARequest::LBA2PBARequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : sst_csd_map_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , table_index_number_(0){}
struct LBA2PBARequestDefaultTypeInternal {
  constexpr LBA2PBARequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LBA2PBARequestDefaultTypeInternal() {}
  union {
    LBA2PBARequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LBA2PBARequestDefaultTypeInternal _LBA2PBARequest_default_instance_;
constexpr LBA2PBAResponse_Chunk::LBA2PBAResponse_Chunk(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : offset_(int64_t{0})
  , length_(0){}
struct LBA2PBAResponse_ChunkDefaultTypeInternal {
  constexpr LBA2PBAResponse_ChunkDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LBA2PBAResponse_ChunkDefaultTypeInternal() {}
  union {
    LBA2PBAResponse_Chunk _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LBA2PBAResponse_ChunkDefaultTypeInternal _LBA2PBAResponse_Chunk_default_instance_;
constexpr LBA2PBAResponse_PBA::LBA2PBAResponse_PBA(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : chunks_()
  , csd_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct LBA2PBAResponse_PBADefaultTypeInternal {
  constexpr LBA2PBAResponse_PBADefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LBA2PBAResponse_PBADefaultTypeInternal() {}
  union {
    LBA2PBAResponse_PBA _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LBA2PBAResponse_PBADefaultTypeInternal _LBA2PBAResponse_PBA_default_instance_;
constexpr LBA2PBAResponse_SstPbaMapEntry_DoNotUse::LBA2PBAResponse_SstPbaMapEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct LBA2PBAResponse_SstPbaMapEntry_DoNotUseDefaultTypeInternal {
  constexpr LBA2PBAResponse_SstPbaMapEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LBA2PBAResponse_SstPbaMapEntry_DoNotUseDefaultTypeInternal() {}
  union {
    LBA2PBAResponse_SstPbaMapEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LBA2PBAResponse_SstPbaMapEntry_DoNotUseDefaultTypeInternal _LBA2PBAResponse_SstPbaMapEntry_DoNotUse_default_instance_;
constexpr LBA2PBAResponse::LBA2PBAResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : sst_pba_map_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}){}
struct LBA2PBAResponseDefaultTypeInternal {
  constexpr LBA2PBAResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LBA2PBAResponseDefaultTypeInternal() {}
  union {
    LBA2PBAResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LBA2PBAResponseDefaultTypeInternal _LBA2PBAResponse_default_instance_;
constexpr WALRequest::WALRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : db_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , table_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct WALRequestDefaultTypeInternal {
  constexpr WALRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~WALRequestDefaultTypeInternal() {}
  union {
    WALRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT WALRequestDefaultTypeInternal _WALRequest_default_instance_;
constexpr WALResponse::WALResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : deleted_key_()
  , inserted_key_()
  , inserted_value_(){}
struct WALResponseDefaultTypeInternal {
  constexpr WALResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~WALResponseDefaultTypeInternal() {}
  union {
    WALResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT WALResponseDefaultTypeInternal _WALResponse_default_instance_;
}  // namespace StorageEngineInstance
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_storage_5fengine_5finstance_2eproto[36];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_storage_5fengine_5finstance_2eproto[6];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_storage_5fengine_5finstance_2eproto = nullptr;

const uint32_t TableStruct_storage_5fengine_5finstance_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::SnippetRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::SnippetRequest, type_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::SnippetRequest, snippet_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::Snippet_Filter_FilterValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::Snippet_Filter_FilterValue, type_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::Snippet_Filter_FilterValue, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::Snippet_Filter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::Snippet_Filter, lv_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::Snippet_Filter, operator__),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::Snippet_Filter, rv_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::Snippet_Projection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::Snippet_Projection, select_type_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::Snippet_Projection, value_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::Snippet_Projection, value_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::Snippet_Order, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::Snippet_Order, ascending_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::Snippet_Order, column_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::Snippet_Dependency, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::Snippet_Dependency, dependency_projection_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::Snippet_Dependency, dependency_filter_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::Snippet_Limit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::Snippet_Limit, offset_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::Snippet_Limit, length_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::Snippet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::Snippet, db_name_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::Snippet, query_id_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::Snippet, work_id_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::Snippet, table_name_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::Snippet, table_col_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::Snippet, table_filter_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::Snippet, dependency_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::Snippet, table_offset_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::Snippet, table_offlen_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::Snippet, table_datatype_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::Snippet, table_alias_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::Snippet, column_alias_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::Snippet, column_projection_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::Snippet, column_filtering_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::Snippet, group_by_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::Snippet, order_by_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::Snippet, limit_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::Snippet, pk_num_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::Snippet, having_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::Request_SstCsdMapEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::Request_SstCsdMapEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::Request_SstCsdMapEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::Request_SstCsdMapEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::Request, query_id_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::Request, work_id_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::Request, db_name_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::Request, table_name_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::Request, table_index_number_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::Request, sst_csd_map_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::Response, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::QueryResult_Column, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::QueryResult_Column, col_type_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::QueryResult_Column, string_col_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::QueryResult_Column, int_col_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::QueryResult_Column, double_col_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::QueryResult_QueryResultEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::QueryResult_QueryResultEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::QueryResult_QueryResultEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::QueryResult_QueryResultEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::QueryResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::QueryResult, query_result_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::QueryResult, row_count_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::QueryResult, scanned_row_count_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::QueryResult, filtered_row_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::QueryStringResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::QueryStringResult, query_result_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::QueryStringResult, scanned_row_count_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::QueryStringResult, filtered_row_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::DBInfo_DB_Table, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::DBInfo_DB_Table, table_index_number_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::DBInfo_DB_Table, sst_list_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::DBInfo_DB_TableListEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::DBInfo_DB_TableListEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::DBInfo_DB_TableListEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::DBInfo_DB_TableListEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::DBInfo_DB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::DBInfo_DB, table_list_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::DBInfo_DbListEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::DBInfo_DbListEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::DBInfo_DbListEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::DBInfo_DbListEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::DBInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::DBInfo, db_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::DataFileInfo_CSD, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::DataFileInfo_CSD, csd_id_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::DataFileInfo_SstCsdMapEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::DataFileInfo_SstCsdMapEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::DataFileInfo_SstCsdMapEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::DataFileInfo_SstCsdMapEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::DataFileInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::DataFileInfo, sst_csd_map_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::SSTList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::SSTList, sst_list_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::SnippetMetaData_SstPbaMapEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::SnippetMetaData_SstPbaMapEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::SnippetMetaData_SstPbaMapEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::SnippetMetaData_SstPbaMapEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::SnippetMetaData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::SnippetMetaData, sst_pba_map_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::SnippetMetaData, table_total_block_count_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::SnippetMetaData, wal_deleted_key_json_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::SnippetMetaData, wal_inserted_row_json_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::CSDMetricList_CSDMetric, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::CSDMetricList_CSDMetric, id_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::CSDMetricList_CSDMetric, ip_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::CSDMetricList_CSDMetric, cpu_usage_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::CSDMetricList_CSDMetric, memory_usage_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::CSDMetricList_CSDMetric, disk_usage_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::CSDMetricList_CSDMetric, network_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::CSDMetricList_CSDMetric, working_block_count_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::CSDMetricList_CSDMetric, score_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::CSDMetricList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::CSDMetricList, csd_metric_list_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::LBA2PBARequest_SstCsdMapEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::LBA2PBARequest_SstCsdMapEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::LBA2PBARequest_SstCsdMapEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::LBA2PBARequest_SstCsdMapEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::LBA2PBARequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::LBA2PBARequest, table_index_number_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::LBA2PBARequest, sst_csd_map_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::LBA2PBAResponse_Chunk, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::LBA2PBAResponse_Chunk, offset_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::LBA2PBAResponse_Chunk, length_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::LBA2PBAResponse_PBA, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::LBA2PBAResponse_PBA, csd_id_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::LBA2PBAResponse_PBA, chunks_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::LBA2PBAResponse_SstPbaMapEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::LBA2PBAResponse_SstPbaMapEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::LBA2PBAResponse_SstPbaMapEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::LBA2PBAResponse_SstPbaMapEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::LBA2PBAResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::LBA2PBAResponse, sst_pba_map_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::WALRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::WALRequest, db_name_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::WALRequest, table_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::WALResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::WALResponse, deleted_key_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::WALResponse, inserted_key_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::WALResponse, inserted_value_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::StorageEngineInstance::SnippetRequest)},
  { 8, -1, -1, sizeof(::StorageEngineInstance::Snippet_Filter_FilterValue)},
  { 16, -1, -1, sizeof(::StorageEngineInstance::Snippet_Filter)},
  { 25, -1, -1, sizeof(::StorageEngineInstance::Snippet_Projection)},
  { 34, -1, -1, sizeof(::StorageEngineInstance::Snippet_Order)},
  { 42, -1, -1, sizeof(::StorageEngineInstance::Snippet_Dependency)},
  { 50, -1, -1, sizeof(::StorageEngineInstance::Snippet_Limit)},
  { 58, -1, -1, sizeof(::StorageEngineInstance::Snippet)},
  { 83, 91, -1, sizeof(::StorageEngineInstance::Request_SstCsdMapEntry_DoNotUse)},
  { 93, -1, -1, sizeof(::StorageEngineInstance::Request)},
  { 105, -1, -1, sizeof(::StorageEngineInstance::Response)},
  { 112, -1, -1, sizeof(::StorageEngineInstance::QueryResult_Column)},
  { 122, 130, -1, sizeof(::StorageEngineInstance::QueryResult_QueryResultEntry_DoNotUse)},
  { 132, -1, -1, sizeof(::StorageEngineInstance::QueryResult)},
  { 142, -1, -1, sizeof(::StorageEngineInstance::QueryStringResult)},
  { 151, -1, -1, sizeof(::StorageEngineInstance::DBInfo_DB_Table)},
  { 159, 167, -1, sizeof(::StorageEngineInstance::DBInfo_DB_TableListEntry_DoNotUse)},
  { 169, -1, -1, sizeof(::StorageEngineInstance::DBInfo_DB)},
  { 176, 184, -1, sizeof(::StorageEngineInstance::DBInfo_DbListEntry_DoNotUse)},
  { 186, -1, -1, sizeof(::StorageEngineInstance::DBInfo)},
  { 193, -1, -1, sizeof(::StorageEngineInstance::DataFileInfo_CSD)},
  { 200, 208, -1, sizeof(::StorageEngineInstance::DataFileInfo_SstCsdMapEntry_DoNotUse)},
  { 210, -1, -1, sizeof(::StorageEngineInstance::DataFileInfo)},
  { 217, -1, -1, sizeof(::StorageEngineInstance::SSTList)},
  { 224, 232, -1, sizeof(::StorageEngineInstance::SnippetMetaData_SstPbaMapEntry_DoNotUse)},
  { 234, -1, -1, sizeof(::StorageEngineInstance::SnippetMetaData)},
  { 244, -1, -1, sizeof(::StorageEngineInstance::CSDMetricList_CSDMetric)},
  { 258, -1, -1, sizeof(::StorageEngineInstance::CSDMetricList)},
  { 265, 273, -1, sizeof(::StorageEngineInstance::LBA2PBARequest_SstCsdMapEntry_DoNotUse)},
  { 275, -1, -1, sizeof(::StorageEngineInstance::LBA2PBARequest)},
  { 283, -1, -1, sizeof(::StorageEngineInstance::LBA2PBAResponse_Chunk)},
  { 291, -1, -1, sizeof(::StorageEngineInstance::LBA2PBAResponse_PBA)},
  { 299, 307, -1, sizeof(::StorageEngineInstance::LBA2PBAResponse_SstPbaMapEntry_DoNotUse)},
  { 309, -1, -1, sizeof(::StorageEngineInstance::LBA2PBAResponse)},
  { 316, -1, -1, sizeof(::StorageEngineInstance::WALRequest)},
  { 324, -1, -1, sizeof(::StorageEngineInstance::WALResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::StorageEngineInstance::_SnippetRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::StorageEngineInstance::_Snippet_Filter_FilterValue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::StorageEngineInstance::_Snippet_Filter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::StorageEngineInstance::_Snippet_Projection_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::StorageEngineInstance::_Snippet_Order_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::StorageEngineInstance::_Snippet_Dependency_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::StorageEngineInstance::_Snippet_Limit_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::StorageEngineInstance::_Snippet_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::StorageEngineInstance::_Request_SstCsdMapEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::StorageEngineInstance::_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::StorageEngineInstance::_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::StorageEngineInstance::_QueryResult_Column_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::StorageEngineInstance::_QueryResult_QueryResultEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::StorageEngineInstance::_QueryResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::StorageEngineInstance::_QueryStringResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::StorageEngineInstance::_DBInfo_DB_Table_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::StorageEngineInstance::_DBInfo_DB_TableListEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::StorageEngineInstance::_DBInfo_DB_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::StorageEngineInstance::_DBInfo_DbListEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::StorageEngineInstance::_DBInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::StorageEngineInstance::_DataFileInfo_CSD_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::StorageEngineInstance::_DataFileInfo_SstCsdMapEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::StorageEngineInstance::_DataFileInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::StorageEngineInstance::_SSTList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::StorageEngineInstance::_SnippetMetaData_SstPbaMapEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::StorageEngineInstance::_SnippetMetaData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::StorageEngineInstance::_CSDMetricList_CSDMetric_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::StorageEngineInstance::_CSDMetricList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::StorageEngineInstance::_LBA2PBARequest_SstCsdMapEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::StorageEngineInstance::_LBA2PBARequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::StorageEngineInstance::_LBA2PBAResponse_Chunk_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::StorageEngineInstance::_LBA2PBAResponse_PBA_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::StorageEngineInstance::_LBA2PBAResponse_SstPbaMapEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::StorageEngineInstance::_LBA2PBAResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::StorageEngineInstance::_WALRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::StorageEngineInstance::_WALResponse_default_instance_),
};

const char descriptor_table_protodef_storage_5fengine_5finstance_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\035storage_engine_instance.proto\022\025Storage"
  "EngineInstance\"\307\003\n\016SnippetRequest\022\?\n\004typ"
  "e\030\001 \001(\01621.StorageEngineInstance.SnippetR"
  "equest.SnippetType\022/\n\007snippet\030\002 \001(\0132\036.St"
  "orageEngineInstance.Snippet\"\302\002\n\013SnippetT"
  "ype\022\024\n\020CSD_SCAN_SNIPPET\020\000\022\027\n\023AGGREGATION"
  "_SNIPPET\020\001\022\032\n\026STORAGE_FILTER_SNIPPET\020\002\022\026"
  "\n\022INNER_JOIN_SNIPPET\020\003\022\033\n\027LEFT_OUTER_JOI"
  "N_SNIPPET\020\004\022\034\n\030RIGHT_OUTER_JOIN_SNIPPET\020"
  "\005\022\026\n\022CROSS_JOIN_SNIPPET\020\006\022\021\n\rUNION_SNIPP"
  "ET\020\007\022\016\n\nIN_SNIPPET\020\010\022!\n\035DEPENDENCY_INNER"
  "_JOIN_SNIPPET\020\t\022\034\n\030DEPENDENCY_EXIST_SNIP"
  "PET\020\n\022\031\n\025DEPENDENCY_IN_SNIPPET\020\013\"\247\017\n\007Sni"
  "ppet\022\017\n\007db_name\030\001 \001(\t\022\020\n\010query_ID\030\002 \001(\005\022"
  "\017\n\007work_ID\030\003 \001(\005\022\022\n\ntable_name\030\004 \003(\t\022\021\n\t"
  "table_col\030\005 \003(\t\022;\n\014table_filter\030\006 \003(\0132%."
  "StorageEngineInstance.Snippet.Filter\022=\n\n"
  "dependency\030\007 \001(\0132).StorageEngineInstance"
  ".Snippet.Dependency\022\024\n\014table_offset\030\010 \003("
  "\005\022\024\n\014table_offlen\030\t \003(\005\022\026\n\016table_datatyp"
  "e\030\n \003(\005\022\023\n\013table_alias\030\013 \001(\t\022\024\n\014column_a"
  "lias\030\014 \003(\t\022D\n\021column_projection\030\r \003(\0132)."
  "StorageEngineInstance.Snippet.Projection"
  "\022\030\n\020column_filtering\030\016 \003(\t\022\020\n\010group_by\030\017"
  " \003(\t\0226\n\010order_by\030\020 \001(\0132$.StorageEngineIn"
  "stance.Snippet.Order\0223\n\005limit\030\021 \001(\0132$.St"
  "orageEngineInstance.Snippet.Limit\022\016\n\006pk_"
  "num\030\022 \001(\005\0225\n\006having\030\023 \003(\0132%.StorageEngin"
  "eInstance.Snippet.Filter\032\241\004\n\006Filter\022=\n\002L"
  "V\030\001 \001(\01321.StorageEngineInstance.Snippet."
  "Filter.FilterValue\022@\n\010Operator\030\002 \001(\0162..S"
  "torageEngineInstance.Snippet.Filter.Oper"
  "Type\022=\n\002RV\030\003 \001(\01321.StorageEngineInstance"
  ".Snippet.Filter.FilterValue\032T\n\013FilterVal"
  "ue\0226\n\004type\030\001 \003(\0162(.StorageEngineInstance"
  ".Snippet.ValueType\022\r\n\005value\030\002 \003(\t\"\200\002\n\010Op"
  "erType\022\020\n\014KETI_DEFAULT\020\000\022\013\n\007KETI_GE\020\001\022\013\n"
  "\007KETI_LE\020\002\022\013\n\007KETI_GT\020\003\022\013\n\007KETI_LT\020\004\022\013\n\007"
  "KETI_ET\020\005\022\013\n\007KETI_NE\020\006\022\r\n\tKETI_LIKE\020\007\022\020\n"
  "\014KETI_BETWEEN\020\010\022\013\n\007KETI_IN\020\t\022\013\n\007KETI_IS\020"
  "\n\022\016\n\nKETI_ISNOT\020\013\022\014\n\010KETI_NOT\020\014\022\014\n\010KETI_"
  "AND\020\r\022\013\n\007KETI_OR\020\016\022\014\n\010KETI_ALL\020\017\022\022\n\016KETI"
  "_SUBSTRING\020\020\032\234\002\n\nProjection\022I\n\013select_ty"
  "pe\030\001 \001(\01624.StorageEngineInstance.Snippet"
  ".Projection.SelectType\022\r\n\005value\030\002 \003(\t\022<\n"
  "\nvalue_type\030\003 \003(\0162(.StorageEngineInstanc"
  "e.Snippet.ValueType\"v\n\nSelectType\022\016\n\nCOL"
  "UMNNAME\020\000\022\007\n\003SUM\020\001\022\007\n\003AVG\020\002\022\t\n\005COUNT\020\003\022\r"
  "\n\tCOUNTSTAR\020\004\022\021\n\rCOUNTDISTINCT\020\005\022\007\n\003TOP\020"
  "\006\022\007\n\003MIN\020\007\022\007\n\003MAX\020\010\032\211\001\n\005Order\022F\n\tascendi"
  "ng\030\001 \003(\01623.StorageEngineInstance.Snippet"
  ".Order.OrderDirection\022\023\n\013column_name\030\002 \003"
  "(\t\"#\n\016OrderDirection\022\007\n\003ASC\020\000\022\010\n\004DESC\020\001\032"
  "\230\001\n\nDependency\022H\n\025dependency_projection\030"
  "\001 \003(\0132).StorageEngineInstance.Snippet.Pr"
  "ojection\022@\n\021dependency_filter\030\002 \003(\0132%.St"
  "orageEngineInstance.Snippet.Filter\032\'\n\005Li"
  "mit\022\016\n\006offset\030\001 \001(\005\022\016\n\006length\030\002 \001(\005\"\234\001\n\t"
  "ValueType\022\010\n\004INT8\020\000\022\t\n\005INT16\020\001\022\t\n\005INT32\020"
  "\002\022\t\n\005INT64\020\003\022\013\n\007FLOAT32\020\004\022\013\n\007FLOAT64\020\005\022\013"
  "\n\007NUMERIC\020\006\022\010\n\004DATE\020\007\022\r\n\tTIMESTAMP\020\010\022\n\n\006"
  "STRING\020\t\022\n\n\006COLUMN\020\n\022\014\n\010OPERATOR\020\013\"\343\001\n\007R"
  "equest\022\020\n\010query_id\030\001 \001(\005\022\017\n\007work_id\030\002 \001("
  "\005\022\017\n\007db_name\030\003 \001(\t\022\022\n\ntable_name\030\004 \001(\t\022\032"
  "\n\022table_index_number\030\005 \001(\005\022B\n\013sst_csd_ma"
  "p\030\006 \003(\0132-.StorageEngineInstance.Request."
  "SstCsdMapEntry\0320\n\016SstCsdMapEntry\022\013\n\003key\030"
  "\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"\031\n\010Response\022\r\n\005"
  "value\030\001 \001(\t\"\324\003\n\013QueryResult\022I\n\014query_res"
  "ult\030\001 \003(\01323.StorageEngineInstance.QueryR"
  "esult.QueryResultEntry\022\021\n\trow_count\030\002 \001("
  "\005\022\031\n\021scanned_row_count\030\003 \001(\005\022\032\n\022filtered"
  "_row_count\030\004 \001(\005\032\320\001\n\006Column\022C\n\010col_type\030"
  "\002 \001(\01621.StorageEngineInstance.QueryResul"
  "t.Column.ColType\022\022\n\nstring_col\030\003 \003(\t\022\017\n\007"
  "int_col\030\004 \003(\005\022\022\n\ndouble_col\030\005 \003(\001\"H\n\007Col"
  "Type\022\016\n\nTYPE_EMPTY\020\000\022\017\n\013TYPE_STRING\020\001\022\014\n"
  "\010TYPE_INT\020\002\022\016\n\nTYPE_FLOAT\020\003\032]\n\020QueryResu"
  "ltEntry\022\013\n\003key\030\001 \001(\t\0228\n\005value\030\002 \001(\0132).St"
  "orageEngineInstance.QueryResult.Column:\002"
  "8\001\"`\n\021QueryStringResult\022\024\n\014query_result\030"
  "\001 \001(\t\022\031\n\021scanned_row_count\030\002 \001(\005\022\032\n\022filt"
  "ered_row_count\030\003 \001(\005\"\362\002\n\006DBInfo\022:\n\007db_li"
  "st\030\001 \003(\0132).StorageEngineInstance.DBInfo."
  "DbListEntry\032\332\001\n\002DB\022C\n\ntable_list\030\001 \003(\0132/"
  ".StorageEngineInstance.DBInfo.DB.TableLi"
  "stEntry\0325\n\005Table\022\032\n\022table_index_number\030\001"
  " \001(\005\022\020\n\010sst_list\030\002 \003(\t\032X\n\016TableListEntry"
  "\022\013\n\003key\030\001 \001(\t\0225\n\005value\030\002 \001(\0132&.StorageEn"
  "gineInstance.DBInfo.DB.Table:\0028\001\032O\n\013DbLi"
  "stEntry\022\013\n\003key\030\001 \001(\t\022/\n\005value\030\002 \001(\0132 .St"
  "orageEngineInstance.DBInfo.DB:\0028\001\"\311\001\n\014Da"
  "taFileInfo\022G\n\013sst_csd_map\030\001 \003(\01322.Storag"
  "eEngineInstance.DataFileInfo.SstCsdMapEn"
  "try\032\025\n\003CSD\022\016\n\006csd_id\030\001 \003(\t\032Y\n\016SstCsdMapE"
  "ntry\022\013\n\003key\030\001 \001(\t\0226\n\005value\030\002 \001(\0132\'.Stora"
  "geEngineInstance.DataFileInfo.CSD:\0028\001\"\033\n"
  "\007SSTList\022\020\n\010sst_list\030\001 \003(\t\"\355\001\n\017SnippetMe"
  "taData\022J\n\013sst_pba_map\030\001 \003(\01325.StorageEng"
  "ineInstance.SnippetMetaData.SstPbaMapEnt"
  "ry\022\037\n\027table_total_block_count\030\002 \001(\005\022\034\n\024w"
  "al_deleted_key_json\030\003 \001(\t\022\035\n\025wal_inserte"
  "d_row_json\030\004 \003(\t\0320\n\016SstPbaMapEntry\022\013\n\003ke"
  "y\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"\370\001\n\rCSDMetric"
  "List\022G\n\017csd_metric_list\030\001 \003(\0132..StorageE"
  "ngineInstance.CSDMetricList.CSDMetric\032\235\001"
  "\n\tCSDMetric\022\n\n\002id\030\001 \001(\t\022\n\n\002ip\030\002 \001(\t\022\021\n\tc"
  "pu_usage\030\003 \001(\002\022\024\n\014memory_usage\030\004 \001(\002\022\022\n\n"
  "disk_usage\030\005 \001(\002\022\017\n\007network\030\006 \001(\002\022\033\n\023wor"
  "king_block_count\030\007 \001(\005\022\r\n\005score\030\010 \001(\002\"\251\001"
  "\n\016LBA2PBARequest\022\032\n\022table_index_number\030\001"
  " \001(\005\022I\n\013sst_csd_map\030\002 \003(\01324.StorageEngin"
  "eInstance.LBA2PBARequest.SstCsdMapEntry\032"
  "0\n\016SstCsdMapEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030"
  "\002 \001(\t:\0028\001\"\271\002\n\017LBA2PBAResponse\022J\n\013sst_pba"
  "_map\030\001 \003(\01325.StorageEngineInstance.LBA2P"
  "BAResponse.SstPbaMapEntry\032\'\n\005Chunk\022\016\n\006of"
  "fset\030\001 \001(\003\022\016\n\006length\030\002 \001(\005\032S\n\003PBA\022\016\n\006csd"
  "_id\030\001 \001(\t\022<\n\006chunks\030\002 \003(\0132,.StorageEngin"
  "eInstance.LBA2PBAResponse.Chunk\032\\\n\016SstPb"
  "aMapEntry\022\013\n\003key\030\001 \001(\t\0229\n\005value\030\002 \001(\0132*."
  "StorageEngineInstance.LBA2PBAResponse.PB"
  "A:\0028\001\"1\n\nWALRequest\022\017\n\007db_name\030\001 \001(\t\022\022\n\n"
  "table_name\030\002 \001(\t\"P\n\013WALResponse\022\023\n\013delet"
  "ed_key\030\001 \003(\t\022\024\n\014inserted_key\030\002 \003(\t\022\026\n\016in"
  "serted_value\030\003 \003(\t2\230\003\n\026StorageEngineInte"
  "rface\022Z\n\025GenericQueryInterface\022\036.Storage"
  "EngineInstance.Request\032\037.StorageEngineIn"
  "stance.Response\"\000\022o\n\030OffloadingQueryInte"
  "rface\022%.StorageEngineInstance.SnippetReq"
  "uest\032(.StorageEngineInstance.QueryString"
  "Result\"\000(\001\022W\n\023SyncMetaDataManager\022\035.Stor"
  "ageEngineInstance.DBInfo\032\037.StorageEngine"
  "Instance.Response\"\000\022X\n\rPushCSDMetric\022$.S"
  "torageEngineInstance.CSDMetricList\032\037.Sto"
  "rageEngineInstance.Response\"\0002\217\002\n\rMergin"
  "gModule\022W\n\013Aggregation\022%.StorageEngineIn"
  "stance.SnippetRequest\032\037.StorageEngineIns"
  "tance.Response\"\000\022M\n\010EndQuery\022\036.StorageEn"
  "gineInstance.Request\032\037.StorageEngineInst"
  "ance.Response\"\000\022V\n\016GetQueryResult\022\036.Stor"
  "ageEngineInstance.Request\032\".StorageEngin"
  "eInstance.QueryResult\"\0002\245\002\n\020MonitoringMo"
  "dule\022X\n\017GetDataFileInfo\022\036.StorageEngineI"
  "nstance.Request\032#.StorageEngineInstance."
  "DataFileInfo\"\000\022^\n\022GetSnippetMetaData\022\036.S"
  "torageEngineInstance.Request\032&.StorageEn"
  "gineInstance.SnippetMetaData\"\000\022W\n\023SyncMe"
  "taDataManager\022\035.StorageEngineInstance.DB"
  "Info\032\037.StorageEngineInstance.Response\"\0002"
  "\275\001\n\020OffloadingModule\022O\n\nScheduling\022\036.Sto"
  "rageEngineInstance.Snippet\032\037.StorageEngi"
  "neInstance.Response\"\000\022X\n\rPushCSDMetric\022$"
  ".StorageEngineInstance.CSDMetricList\032\037.S"
  "torageEngineInstance.Response\"\0002\311\001\n\016Stor"
  "ageManager\022X\n\017GetDataFileInfo\022\036.StorageE"
  "ngineInstance.SSTList\032#.StorageEngineIns"
  "tance.DataFileInfo\"\000\022]\n\nRequestPBA\022%.Sto"
  "rageEngineInstance.LBA2PBARequest\032&.Stor"
  "ageEngineInstance.LBA2PBAResponse\"\0002c\n\nW"
  "ALManager\022U\n\nRequestWAL\022!.StorageEngineI"
  "nstance.WALRequest\032\".StorageEngineInstan"
  "ce.WALResponse\"\000B6\n\026io.grpc.snippet_samp"
  "leB\024snippet_sample_ProtoP\001\242\002\003SSPb\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_storage_5fengine_5finstance_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_storage_5fengine_5finstance_2eproto = {
  false, false, 6560, descriptor_table_protodef_storage_5fengine_5finstance_2eproto, "storage_engine_instance.proto", 
  &descriptor_table_storage_5fengine_5finstance_2eproto_once, nullptr, 0, 36,
  schemas, file_default_instances, TableStruct_storage_5fengine_5finstance_2eproto::offsets,
  file_level_metadata_storage_5fengine_5finstance_2eproto, file_level_enum_descriptors_storage_5fengine_5finstance_2eproto, file_level_service_descriptors_storage_5fengine_5finstance_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_storage_5fengine_5finstance_2eproto_getter() {
  return &descriptor_table_storage_5fengine_5finstance_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_storage_5fengine_5finstance_2eproto(&descriptor_table_storage_5fengine_5finstance_2eproto);
namespace StorageEngineInstance {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SnippetRequest_SnippetType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_storage_5fengine_5finstance_2eproto);
  return file_level_enum_descriptors_storage_5fengine_5finstance_2eproto[0];
}
bool SnippetRequest_SnippetType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr SnippetRequest_SnippetType SnippetRequest::CSD_SCAN_SNIPPET;
constexpr SnippetRequest_SnippetType SnippetRequest::AGGREGATION_SNIPPET;
constexpr SnippetRequest_SnippetType SnippetRequest::STORAGE_FILTER_SNIPPET;
constexpr SnippetRequest_SnippetType SnippetRequest::INNER_JOIN_SNIPPET;
constexpr SnippetRequest_SnippetType SnippetRequest::LEFT_OUTER_JOIN_SNIPPET;
constexpr SnippetRequest_SnippetType SnippetRequest::RIGHT_OUTER_JOIN_SNIPPET;
constexpr SnippetRequest_SnippetType SnippetRequest::CROSS_JOIN_SNIPPET;
constexpr SnippetRequest_SnippetType SnippetRequest::UNION_SNIPPET;
constexpr SnippetRequest_SnippetType SnippetRequest::IN_SNIPPET;
constexpr SnippetRequest_SnippetType SnippetRequest::DEPENDENCY_INNER_JOIN_SNIPPET;
constexpr SnippetRequest_SnippetType SnippetRequest::DEPENDENCY_EXIST_SNIPPET;
constexpr SnippetRequest_SnippetType SnippetRequest::DEPENDENCY_IN_SNIPPET;
constexpr SnippetRequest_SnippetType SnippetRequest::SnippetType_MIN;
constexpr SnippetRequest_SnippetType SnippetRequest::SnippetType_MAX;
constexpr int SnippetRequest::SnippetType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Snippet_Filter_OperType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_storage_5fengine_5finstance_2eproto);
  return file_level_enum_descriptors_storage_5fengine_5finstance_2eproto[1];
}
bool Snippet_Filter_OperType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Snippet_Filter_OperType Snippet_Filter::KETI_DEFAULT;
constexpr Snippet_Filter_OperType Snippet_Filter::KETI_GE;
constexpr Snippet_Filter_OperType Snippet_Filter::KETI_LE;
constexpr Snippet_Filter_OperType Snippet_Filter::KETI_GT;
constexpr Snippet_Filter_OperType Snippet_Filter::KETI_LT;
constexpr Snippet_Filter_OperType Snippet_Filter::KETI_ET;
constexpr Snippet_Filter_OperType Snippet_Filter::KETI_NE;
constexpr Snippet_Filter_OperType Snippet_Filter::KETI_LIKE;
constexpr Snippet_Filter_OperType Snippet_Filter::KETI_BETWEEN;
constexpr Snippet_Filter_OperType Snippet_Filter::KETI_IN;
constexpr Snippet_Filter_OperType Snippet_Filter::KETI_IS;
constexpr Snippet_Filter_OperType Snippet_Filter::KETI_ISNOT;
constexpr Snippet_Filter_OperType Snippet_Filter::KETI_NOT;
constexpr Snippet_Filter_OperType Snippet_Filter::KETI_AND;
constexpr Snippet_Filter_OperType Snippet_Filter::KETI_OR;
constexpr Snippet_Filter_OperType Snippet_Filter::KETI_ALL;
constexpr Snippet_Filter_OperType Snippet_Filter::KETI_SUBSTRING;
constexpr Snippet_Filter_OperType Snippet_Filter::OperType_MIN;
constexpr Snippet_Filter_OperType Snippet_Filter::OperType_MAX;
constexpr int Snippet_Filter::OperType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Snippet_Projection_SelectType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_storage_5fengine_5finstance_2eproto);
  return file_level_enum_descriptors_storage_5fengine_5finstance_2eproto[2];
}
bool Snippet_Projection_SelectType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Snippet_Projection_SelectType Snippet_Projection::COLUMNNAME;
constexpr Snippet_Projection_SelectType Snippet_Projection::SUM;
constexpr Snippet_Projection_SelectType Snippet_Projection::AVG;
constexpr Snippet_Projection_SelectType Snippet_Projection::COUNT;
constexpr Snippet_Projection_SelectType Snippet_Projection::COUNTSTAR;
constexpr Snippet_Projection_SelectType Snippet_Projection::COUNTDISTINCT;
constexpr Snippet_Projection_SelectType Snippet_Projection::TOP;
constexpr Snippet_Projection_SelectType Snippet_Projection::MIN;
constexpr Snippet_Projection_SelectType Snippet_Projection::MAX;
constexpr Snippet_Projection_SelectType Snippet_Projection::SelectType_MIN;
constexpr Snippet_Projection_SelectType Snippet_Projection::SelectType_MAX;
constexpr int Snippet_Projection::SelectType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Snippet_Order_OrderDirection_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_storage_5fengine_5finstance_2eproto);
  return file_level_enum_descriptors_storage_5fengine_5finstance_2eproto[3];
}
bool Snippet_Order_OrderDirection_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Snippet_Order_OrderDirection Snippet_Order::ASC;
constexpr Snippet_Order_OrderDirection Snippet_Order::DESC;
constexpr Snippet_Order_OrderDirection Snippet_Order::OrderDirection_MIN;
constexpr Snippet_Order_OrderDirection Snippet_Order::OrderDirection_MAX;
constexpr int Snippet_Order::OrderDirection_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Snippet_ValueType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_storage_5fengine_5finstance_2eproto);
  return file_level_enum_descriptors_storage_5fengine_5finstance_2eproto[4];
}
bool Snippet_ValueType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Snippet_ValueType Snippet::INT8;
constexpr Snippet_ValueType Snippet::INT16;
constexpr Snippet_ValueType Snippet::INT32;
constexpr Snippet_ValueType Snippet::INT64;
constexpr Snippet_ValueType Snippet::FLOAT32;
constexpr Snippet_ValueType Snippet::FLOAT64;
constexpr Snippet_ValueType Snippet::NUMERIC;
constexpr Snippet_ValueType Snippet::DATE;
constexpr Snippet_ValueType Snippet::TIMESTAMP;
constexpr Snippet_ValueType Snippet::STRING;
constexpr Snippet_ValueType Snippet::COLUMN;
constexpr Snippet_ValueType Snippet::OPERATOR;
constexpr Snippet_ValueType Snippet::ValueType_MIN;
constexpr Snippet_ValueType Snippet::ValueType_MAX;
constexpr int Snippet::ValueType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* QueryResult_Column_ColType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_storage_5fengine_5finstance_2eproto);
  return file_level_enum_descriptors_storage_5fengine_5finstance_2eproto[5];
}
bool QueryResult_Column_ColType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr QueryResult_Column_ColType QueryResult_Column::TYPE_EMPTY;
constexpr QueryResult_Column_ColType QueryResult_Column::TYPE_STRING;
constexpr QueryResult_Column_ColType QueryResult_Column::TYPE_INT;
constexpr QueryResult_Column_ColType QueryResult_Column::TYPE_FLOAT;
constexpr QueryResult_Column_ColType QueryResult_Column::ColType_MIN;
constexpr QueryResult_Column_ColType QueryResult_Column::ColType_MAX;
constexpr int QueryResult_Column::ColType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class SnippetRequest::_Internal {
 public:
  static const ::StorageEngineInstance::Snippet& snippet(const SnippetRequest* msg);
};

const ::StorageEngineInstance::Snippet&
SnippetRequest::_Internal::snippet(const SnippetRequest* msg) {
  return *msg->snippet_;
}
SnippetRequest::SnippetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:StorageEngineInstance.SnippetRequest)
}
SnippetRequest::SnippetRequest(const SnippetRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_snippet()) {
    snippet_ = new ::StorageEngineInstance::Snippet(*from.snippet_);
  } else {
    snippet_ = nullptr;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:StorageEngineInstance.SnippetRequest)
}

inline void SnippetRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&snippet_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&snippet_)) + sizeof(type_));
}

SnippetRequest::~SnippetRequest() {
  // @@protoc_insertion_point(destructor:StorageEngineInstance.SnippetRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SnippetRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete snippet_;
}

void SnippetRequest::ArenaDtor(void* object) {
  SnippetRequest* _this = reinterpret_cast< SnippetRequest* >(object);
  (void)_this;
}
void SnippetRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SnippetRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SnippetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:StorageEngineInstance.SnippetRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && snippet_ != nullptr) {
    delete snippet_;
  }
  snippet_ = nullptr;
  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SnippetRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .StorageEngineInstance.SnippetRequest.SnippetType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::StorageEngineInstance::SnippetRequest_SnippetType>(val));
        } else
          goto handle_unusual;
        continue;
      // .StorageEngineInstance.Snippet snippet = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_snippet(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SnippetRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:StorageEngineInstance.SnippetRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .StorageEngineInstance.SnippetRequest.SnippetType type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // .StorageEngineInstance.Snippet snippet = 2;
  if (this->_internal_has_snippet()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::snippet(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StorageEngineInstance.SnippetRequest)
  return target;
}

size_t SnippetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StorageEngineInstance.SnippetRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .StorageEngineInstance.Snippet snippet = 2;
  if (this->_internal_has_snippet()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *snippet_);
  }

  // .StorageEngineInstance.SnippetRequest.SnippetType type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SnippetRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SnippetRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SnippetRequest::GetClassData() const { return &_class_data_; }

void SnippetRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SnippetRequest *>(to)->MergeFrom(
      static_cast<const SnippetRequest &>(from));
}


void SnippetRequest::MergeFrom(const SnippetRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:StorageEngineInstance.SnippetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_snippet()) {
    _internal_mutable_snippet()->::StorageEngineInstance::Snippet::MergeFrom(from._internal_snippet());
  }
  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SnippetRequest::CopyFrom(const SnippetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StorageEngineInstance.SnippetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnippetRequest::IsInitialized() const {
  return true;
}

void SnippetRequest::InternalSwap(SnippetRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SnippetRequest, type_)
      + sizeof(SnippetRequest::type_)
      - PROTOBUF_FIELD_OFFSET(SnippetRequest, snippet_)>(
          reinterpret_cast<char*>(&snippet_),
          reinterpret_cast<char*>(&other->snippet_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SnippetRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_storage_5fengine_5finstance_2eproto_getter, &descriptor_table_storage_5fengine_5finstance_2eproto_once,
      file_level_metadata_storage_5fengine_5finstance_2eproto[0]);
}

// ===================================================================

class Snippet_Filter_FilterValue::_Internal {
 public:
};

Snippet_Filter_FilterValue::Snippet_Filter_FilterValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  type_(arena),
  value_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:StorageEngineInstance.Snippet.Filter.FilterValue)
}
Snippet_Filter_FilterValue::Snippet_Filter_FilterValue(const Snippet_Filter_FilterValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      type_(from.type_),
      value_(from.value_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:StorageEngineInstance.Snippet.Filter.FilterValue)
}

inline void Snippet_Filter_FilterValue::SharedCtor() {
}

Snippet_Filter_FilterValue::~Snippet_Filter_FilterValue() {
  // @@protoc_insertion_point(destructor:StorageEngineInstance.Snippet.Filter.FilterValue)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Snippet_Filter_FilterValue::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Snippet_Filter_FilterValue::ArenaDtor(void* object) {
  Snippet_Filter_FilterValue* _this = reinterpret_cast< Snippet_Filter_FilterValue* >(object);
  (void)_this;
}
void Snippet_Filter_FilterValue::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Snippet_Filter_FilterValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Snippet_Filter_FilterValue::Clear() {
// @@protoc_insertion_point(message_clear_start:StorageEngineInstance.Snippet.Filter.FilterValue)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_.Clear();
  value_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Snippet_Filter_FilterValue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .StorageEngineInstance.Snippet.ValueType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_type(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_type(static_cast<::StorageEngineInstance::Snippet_ValueType>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_value();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "StorageEngineInstance.Snippet.Filter.FilterValue.value"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Snippet_Filter_FilterValue::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:StorageEngineInstance.Snippet.Filter.FilterValue)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .StorageEngineInstance.Snippet.ValueType type = 1;
  {
    int byte_size = _type_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          1, type_, byte_size, target);
    }
  }

  // repeated string value = 2;
  for (int i = 0, n = this->_internal_value_size(); i < n; i++) {
    const auto& s = this->_internal_value(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "StorageEngineInstance.Snippet.Filter.FilterValue.value");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StorageEngineInstance.Snippet.Filter.FilterValue)
  return target;
}

size_t Snippet_Filter_FilterValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StorageEngineInstance.Snippet.Filter.FilterValue)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .StorageEngineInstance.Snippet.ValueType type = 1;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_type_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_type(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _type_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated string value = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(value_.size());
  for (int i = 0, n = value_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      value_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Snippet_Filter_FilterValue::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Snippet_Filter_FilterValue::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Snippet_Filter_FilterValue::GetClassData() const { return &_class_data_; }

void Snippet_Filter_FilterValue::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Snippet_Filter_FilterValue *>(to)->MergeFrom(
      static_cast<const Snippet_Filter_FilterValue &>(from));
}


void Snippet_Filter_FilterValue::MergeFrom(const Snippet_Filter_FilterValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:StorageEngineInstance.Snippet.Filter.FilterValue)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  type_.MergeFrom(from.type_);
  value_.MergeFrom(from.value_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Snippet_Filter_FilterValue::CopyFrom(const Snippet_Filter_FilterValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StorageEngineInstance.Snippet.Filter.FilterValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Snippet_Filter_FilterValue::IsInitialized() const {
  return true;
}

void Snippet_Filter_FilterValue::InternalSwap(Snippet_Filter_FilterValue* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  type_.InternalSwap(&other->type_);
  value_.InternalSwap(&other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Snippet_Filter_FilterValue::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_storage_5fengine_5finstance_2eproto_getter, &descriptor_table_storage_5fengine_5finstance_2eproto_once,
      file_level_metadata_storage_5fengine_5finstance_2eproto[1]);
}

// ===================================================================

class Snippet_Filter::_Internal {
 public:
  static const ::StorageEngineInstance::Snippet_Filter_FilterValue& lv(const Snippet_Filter* msg);
  static const ::StorageEngineInstance::Snippet_Filter_FilterValue& rv(const Snippet_Filter* msg);
};

const ::StorageEngineInstance::Snippet_Filter_FilterValue&
Snippet_Filter::_Internal::lv(const Snippet_Filter* msg) {
  return *msg->lv_;
}
const ::StorageEngineInstance::Snippet_Filter_FilterValue&
Snippet_Filter::_Internal::rv(const Snippet_Filter* msg) {
  return *msg->rv_;
}
Snippet_Filter::Snippet_Filter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:StorageEngineInstance.Snippet.Filter)
}
Snippet_Filter::Snippet_Filter(const Snippet_Filter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_lv()) {
    lv_ = new ::StorageEngineInstance::Snippet_Filter_FilterValue(*from.lv_);
  } else {
    lv_ = nullptr;
  }
  if (from._internal_has_rv()) {
    rv_ = new ::StorageEngineInstance::Snippet_Filter_FilterValue(*from.rv_);
  } else {
    rv_ = nullptr;
  }
  operator__ = from.operator__;
  // @@protoc_insertion_point(copy_constructor:StorageEngineInstance.Snippet.Filter)
}

inline void Snippet_Filter::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&lv_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&operator__) -
    reinterpret_cast<char*>(&lv_)) + sizeof(operator__));
}

Snippet_Filter::~Snippet_Filter() {
  // @@protoc_insertion_point(destructor:StorageEngineInstance.Snippet.Filter)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Snippet_Filter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete lv_;
  if (this != internal_default_instance()) delete rv_;
}

void Snippet_Filter::ArenaDtor(void* object) {
  Snippet_Filter* _this = reinterpret_cast< Snippet_Filter* >(object);
  (void)_this;
}
void Snippet_Filter::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Snippet_Filter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Snippet_Filter::Clear() {
// @@protoc_insertion_point(message_clear_start:StorageEngineInstance.Snippet.Filter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && lv_ != nullptr) {
    delete lv_;
  }
  lv_ = nullptr;
  if (GetArenaForAllocation() == nullptr && rv_ != nullptr) {
    delete rv_;
  }
  rv_ = nullptr;
  operator__ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Snippet_Filter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .StorageEngineInstance.Snippet.Filter.FilterValue LV = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_lv(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .StorageEngineInstance.Snippet.Filter.OperType Operator = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_operator_(static_cast<::StorageEngineInstance::Snippet_Filter_OperType>(val));
        } else
          goto handle_unusual;
        continue;
      // .StorageEngineInstance.Snippet.Filter.FilterValue RV = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_rv(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Snippet_Filter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:StorageEngineInstance.Snippet.Filter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .StorageEngineInstance.Snippet.Filter.FilterValue LV = 1;
  if (this->_internal_has_lv()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::lv(this), target, stream);
  }

  // .StorageEngineInstance.Snippet.Filter.OperType Operator = 2;
  if (this->_internal_operator_() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_operator_(), target);
  }

  // .StorageEngineInstance.Snippet.Filter.FilterValue RV = 3;
  if (this->_internal_has_rv()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::rv(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StorageEngineInstance.Snippet.Filter)
  return target;
}

size_t Snippet_Filter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StorageEngineInstance.Snippet.Filter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .StorageEngineInstance.Snippet.Filter.FilterValue LV = 1;
  if (this->_internal_has_lv()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lv_);
  }

  // .StorageEngineInstance.Snippet.Filter.FilterValue RV = 3;
  if (this->_internal_has_rv()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rv_);
  }

  // .StorageEngineInstance.Snippet.Filter.OperType Operator = 2;
  if (this->_internal_operator_() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_operator_());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Snippet_Filter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Snippet_Filter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Snippet_Filter::GetClassData() const { return &_class_data_; }

void Snippet_Filter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Snippet_Filter *>(to)->MergeFrom(
      static_cast<const Snippet_Filter &>(from));
}


void Snippet_Filter::MergeFrom(const Snippet_Filter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:StorageEngineInstance.Snippet.Filter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_lv()) {
    _internal_mutable_lv()->::StorageEngineInstance::Snippet_Filter_FilterValue::MergeFrom(from._internal_lv());
  }
  if (from._internal_has_rv()) {
    _internal_mutable_rv()->::StorageEngineInstance::Snippet_Filter_FilterValue::MergeFrom(from._internal_rv());
  }
  if (from._internal_operator_() != 0) {
    _internal_set_operator_(from._internal_operator_());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Snippet_Filter::CopyFrom(const Snippet_Filter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StorageEngineInstance.Snippet.Filter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Snippet_Filter::IsInitialized() const {
  return true;
}

void Snippet_Filter::InternalSwap(Snippet_Filter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Snippet_Filter, operator__)
      + sizeof(Snippet_Filter::operator__)
      - PROTOBUF_FIELD_OFFSET(Snippet_Filter, lv_)>(
          reinterpret_cast<char*>(&lv_),
          reinterpret_cast<char*>(&other->lv_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Snippet_Filter::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_storage_5fengine_5finstance_2eproto_getter, &descriptor_table_storage_5fengine_5finstance_2eproto_once,
      file_level_metadata_storage_5fengine_5finstance_2eproto[2]);
}

// ===================================================================

class Snippet_Projection::_Internal {
 public:
};

Snippet_Projection::Snippet_Projection(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  value_(arena),
  value_type_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:StorageEngineInstance.Snippet.Projection)
}
Snippet_Projection::Snippet_Projection(const Snippet_Projection& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      value_(from.value_),
      value_type_(from.value_type_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  select_type_ = from.select_type_;
  // @@protoc_insertion_point(copy_constructor:StorageEngineInstance.Snippet.Projection)
}

inline void Snippet_Projection::SharedCtor() {
select_type_ = 0;
}

Snippet_Projection::~Snippet_Projection() {
  // @@protoc_insertion_point(destructor:StorageEngineInstance.Snippet.Projection)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Snippet_Projection::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Snippet_Projection::ArenaDtor(void* object) {
  Snippet_Projection* _this = reinterpret_cast< Snippet_Projection* >(object);
  (void)_this;
}
void Snippet_Projection::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Snippet_Projection::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Snippet_Projection::Clear() {
// @@protoc_insertion_point(message_clear_start:StorageEngineInstance.Snippet.Projection)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.Clear();
  value_type_.Clear();
  select_type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Snippet_Projection::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .StorageEngineInstance.Snippet.Projection.SelectType select_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_select_type(static_cast<::StorageEngineInstance::Snippet_Projection_SelectType>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_value();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "StorageEngineInstance.Snippet.Projection.value"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .StorageEngineInstance.Snippet.ValueType value_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_value_type(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 24) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_value_type(static_cast<::StorageEngineInstance::Snippet_ValueType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Snippet_Projection::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:StorageEngineInstance.Snippet.Projection)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .StorageEngineInstance.Snippet.Projection.SelectType select_type = 1;
  if (this->_internal_select_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_select_type(), target);
  }

  // repeated string value = 2;
  for (int i = 0, n = this->_internal_value_size(); i < n; i++) {
    const auto& s = this->_internal_value(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "StorageEngineInstance.Snippet.Projection.value");
    target = stream->WriteString(2, s, target);
  }

  // repeated .StorageEngineInstance.Snippet.ValueType value_type = 3;
  {
    int byte_size = _value_type_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          3, value_type_, byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StorageEngineInstance.Snippet.Projection)
  return target;
}

size_t Snippet_Projection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StorageEngineInstance.Snippet.Projection)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string value = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(value_.size());
  for (int i = 0, n = value_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      value_.Get(i));
  }

  // repeated .StorageEngineInstance.Snippet.ValueType value_type = 3;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_value_type_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_value_type(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _value_type_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .StorageEngineInstance.Snippet.Projection.SelectType select_type = 1;
  if (this->_internal_select_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_select_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Snippet_Projection::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Snippet_Projection::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Snippet_Projection::GetClassData() const { return &_class_data_; }

void Snippet_Projection::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Snippet_Projection *>(to)->MergeFrom(
      static_cast<const Snippet_Projection &>(from));
}


void Snippet_Projection::MergeFrom(const Snippet_Projection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:StorageEngineInstance.Snippet.Projection)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  value_.MergeFrom(from.value_);
  value_type_.MergeFrom(from.value_type_);
  if (from._internal_select_type() != 0) {
    _internal_set_select_type(from._internal_select_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Snippet_Projection::CopyFrom(const Snippet_Projection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StorageEngineInstance.Snippet.Projection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Snippet_Projection::IsInitialized() const {
  return true;
}

void Snippet_Projection::InternalSwap(Snippet_Projection* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  value_.InternalSwap(&other->value_);
  value_type_.InternalSwap(&other->value_type_);
  swap(select_type_, other->select_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Snippet_Projection::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_storage_5fengine_5finstance_2eproto_getter, &descriptor_table_storage_5fengine_5finstance_2eproto_once,
      file_level_metadata_storage_5fengine_5finstance_2eproto[3]);
}

// ===================================================================

class Snippet_Order::_Internal {
 public:
};

Snippet_Order::Snippet_Order(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  ascending_(arena),
  column_name_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:StorageEngineInstance.Snippet.Order)
}
Snippet_Order::Snippet_Order(const Snippet_Order& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      ascending_(from.ascending_),
      column_name_(from.column_name_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:StorageEngineInstance.Snippet.Order)
}

inline void Snippet_Order::SharedCtor() {
}

Snippet_Order::~Snippet_Order() {
  // @@protoc_insertion_point(destructor:StorageEngineInstance.Snippet.Order)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Snippet_Order::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Snippet_Order::ArenaDtor(void* object) {
  Snippet_Order* _this = reinterpret_cast< Snippet_Order* >(object);
  (void)_this;
}
void Snippet_Order::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Snippet_Order::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Snippet_Order::Clear() {
// @@protoc_insertion_point(message_clear_start:StorageEngineInstance.Snippet.Order)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ascending_.Clear();
  column_name_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Snippet_Order::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .StorageEngineInstance.Snippet.Order.OrderDirection ascending = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_ascending(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_ascending(static_cast<::StorageEngineInstance::Snippet_Order_OrderDirection>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated string column_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_column_name();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "StorageEngineInstance.Snippet.Order.column_name"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Snippet_Order::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:StorageEngineInstance.Snippet.Order)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .StorageEngineInstance.Snippet.Order.OrderDirection ascending = 1;
  {
    int byte_size = _ascending_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          1, ascending_, byte_size, target);
    }
  }

  // repeated string column_name = 2;
  for (int i = 0, n = this->_internal_column_name_size(); i < n; i++) {
    const auto& s = this->_internal_column_name(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "StorageEngineInstance.Snippet.Order.column_name");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StorageEngineInstance.Snippet.Order)
  return target;
}

size_t Snippet_Order::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StorageEngineInstance.Snippet.Order)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .StorageEngineInstance.Snippet.Order.OrderDirection ascending = 1;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_ascending_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_ascending(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _ascending_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated string column_name = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(column_name_.size());
  for (int i = 0, n = column_name_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      column_name_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Snippet_Order::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Snippet_Order::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Snippet_Order::GetClassData() const { return &_class_data_; }

void Snippet_Order::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Snippet_Order *>(to)->MergeFrom(
      static_cast<const Snippet_Order &>(from));
}


void Snippet_Order::MergeFrom(const Snippet_Order& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:StorageEngineInstance.Snippet.Order)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  ascending_.MergeFrom(from.ascending_);
  column_name_.MergeFrom(from.column_name_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Snippet_Order::CopyFrom(const Snippet_Order& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StorageEngineInstance.Snippet.Order)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Snippet_Order::IsInitialized() const {
  return true;
}

void Snippet_Order::InternalSwap(Snippet_Order* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ascending_.InternalSwap(&other->ascending_);
  column_name_.InternalSwap(&other->column_name_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Snippet_Order::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_storage_5fengine_5finstance_2eproto_getter, &descriptor_table_storage_5fengine_5finstance_2eproto_once,
      file_level_metadata_storage_5fengine_5finstance_2eproto[4]);
}

// ===================================================================

class Snippet_Dependency::_Internal {
 public:
};

Snippet_Dependency::Snippet_Dependency(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  dependency_projection_(arena),
  dependency_filter_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:StorageEngineInstance.Snippet.Dependency)
}
Snippet_Dependency::Snippet_Dependency(const Snippet_Dependency& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      dependency_projection_(from.dependency_projection_),
      dependency_filter_(from.dependency_filter_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:StorageEngineInstance.Snippet.Dependency)
}

inline void Snippet_Dependency::SharedCtor() {
}

Snippet_Dependency::~Snippet_Dependency() {
  // @@protoc_insertion_point(destructor:StorageEngineInstance.Snippet.Dependency)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Snippet_Dependency::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Snippet_Dependency::ArenaDtor(void* object) {
  Snippet_Dependency* _this = reinterpret_cast< Snippet_Dependency* >(object);
  (void)_this;
}
void Snippet_Dependency::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Snippet_Dependency::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Snippet_Dependency::Clear() {
// @@protoc_insertion_point(message_clear_start:StorageEngineInstance.Snippet.Dependency)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dependency_projection_.Clear();
  dependency_filter_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Snippet_Dependency::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .StorageEngineInstance.Snippet.Projection dependency_projection = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_dependency_projection(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .StorageEngineInstance.Snippet.Filter dependency_filter = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_dependency_filter(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Snippet_Dependency::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:StorageEngineInstance.Snippet.Dependency)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .StorageEngineInstance.Snippet.Projection dependency_projection = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_dependency_projection_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_dependency_projection(i), target, stream);
  }

  // repeated .StorageEngineInstance.Snippet.Filter dependency_filter = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_dependency_filter_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_dependency_filter(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StorageEngineInstance.Snippet.Dependency)
  return target;
}

size_t Snippet_Dependency::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StorageEngineInstance.Snippet.Dependency)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .StorageEngineInstance.Snippet.Projection dependency_projection = 1;
  total_size += 1UL * this->_internal_dependency_projection_size();
  for (const auto& msg : this->dependency_projection_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .StorageEngineInstance.Snippet.Filter dependency_filter = 2;
  total_size += 1UL * this->_internal_dependency_filter_size();
  for (const auto& msg : this->dependency_filter_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Snippet_Dependency::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Snippet_Dependency::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Snippet_Dependency::GetClassData() const { return &_class_data_; }

void Snippet_Dependency::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Snippet_Dependency *>(to)->MergeFrom(
      static_cast<const Snippet_Dependency &>(from));
}


void Snippet_Dependency::MergeFrom(const Snippet_Dependency& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:StorageEngineInstance.Snippet.Dependency)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  dependency_projection_.MergeFrom(from.dependency_projection_);
  dependency_filter_.MergeFrom(from.dependency_filter_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Snippet_Dependency::CopyFrom(const Snippet_Dependency& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StorageEngineInstance.Snippet.Dependency)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Snippet_Dependency::IsInitialized() const {
  return true;
}

void Snippet_Dependency::InternalSwap(Snippet_Dependency* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  dependency_projection_.InternalSwap(&other->dependency_projection_);
  dependency_filter_.InternalSwap(&other->dependency_filter_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Snippet_Dependency::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_storage_5fengine_5finstance_2eproto_getter, &descriptor_table_storage_5fengine_5finstance_2eproto_once,
      file_level_metadata_storage_5fengine_5finstance_2eproto[5]);
}

// ===================================================================

class Snippet_Limit::_Internal {
 public:
};

Snippet_Limit::Snippet_Limit(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:StorageEngineInstance.Snippet.Limit)
}
Snippet_Limit::Snippet_Limit(const Snippet_Limit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&offset_, &from.offset_,
    static_cast<size_t>(reinterpret_cast<char*>(&length_) -
    reinterpret_cast<char*>(&offset_)) + sizeof(length_));
  // @@protoc_insertion_point(copy_constructor:StorageEngineInstance.Snippet.Limit)
}

inline void Snippet_Limit::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&offset_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&length_) -
    reinterpret_cast<char*>(&offset_)) + sizeof(length_));
}

Snippet_Limit::~Snippet_Limit() {
  // @@protoc_insertion_point(destructor:StorageEngineInstance.Snippet.Limit)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Snippet_Limit::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Snippet_Limit::ArenaDtor(void* object) {
  Snippet_Limit* _this = reinterpret_cast< Snippet_Limit* >(object);
  (void)_this;
}
void Snippet_Limit::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Snippet_Limit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Snippet_Limit::Clear() {
// @@protoc_insertion_point(message_clear_start:StorageEngineInstance.Snippet.Limit)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&offset_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&length_) -
      reinterpret_cast<char*>(&offset_)) + sizeof(length_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Snippet_Limit::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 offset = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 length = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Snippet_Limit::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:StorageEngineInstance.Snippet.Limit)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 offset = 1;
  if (this->_internal_offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_offset(), target);
  }

  // int32 length = 2;
  if (this->_internal_length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_length(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StorageEngineInstance.Snippet.Limit)
  return target;
}

size_t Snippet_Limit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StorageEngineInstance.Snippet.Limit)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 offset = 1;
  if (this->_internal_offset() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_offset());
  }

  // int32 length = 2;
  if (this->_internal_length() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_length());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Snippet_Limit::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Snippet_Limit::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Snippet_Limit::GetClassData() const { return &_class_data_; }

void Snippet_Limit::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Snippet_Limit *>(to)->MergeFrom(
      static_cast<const Snippet_Limit &>(from));
}


void Snippet_Limit::MergeFrom(const Snippet_Limit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:StorageEngineInstance.Snippet.Limit)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_offset() != 0) {
    _internal_set_offset(from._internal_offset());
  }
  if (from._internal_length() != 0) {
    _internal_set_length(from._internal_length());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Snippet_Limit::CopyFrom(const Snippet_Limit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StorageEngineInstance.Snippet.Limit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Snippet_Limit::IsInitialized() const {
  return true;
}

void Snippet_Limit::InternalSwap(Snippet_Limit* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Snippet_Limit, length_)
      + sizeof(Snippet_Limit::length_)
      - PROTOBUF_FIELD_OFFSET(Snippet_Limit, offset_)>(
          reinterpret_cast<char*>(&offset_),
          reinterpret_cast<char*>(&other->offset_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Snippet_Limit::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_storage_5fengine_5finstance_2eproto_getter, &descriptor_table_storage_5fengine_5finstance_2eproto_once,
      file_level_metadata_storage_5fengine_5finstance_2eproto[6]);
}

// ===================================================================

class Snippet::_Internal {
 public:
  static const ::StorageEngineInstance::Snippet_Dependency& dependency(const Snippet* msg);
  static const ::StorageEngineInstance::Snippet_Order& order_by(const Snippet* msg);
  static const ::StorageEngineInstance::Snippet_Limit& limit(const Snippet* msg);
};

const ::StorageEngineInstance::Snippet_Dependency&
Snippet::_Internal::dependency(const Snippet* msg) {
  return *msg->dependency_;
}
const ::StorageEngineInstance::Snippet_Order&
Snippet::_Internal::order_by(const Snippet* msg) {
  return *msg->order_by_;
}
const ::StorageEngineInstance::Snippet_Limit&
Snippet::_Internal::limit(const Snippet* msg) {
  return *msg->limit_;
}
Snippet::Snippet(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  table_name_(arena),
  table_col_(arena),
  table_filter_(arena),
  table_offset_(arena),
  table_offlen_(arena),
  table_datatype_(arena),
  column_alias_(arena),
  column_projection_(arena),
  column_filtering_(arena),
  group_by_(arena),
  having_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:StorageEngineInstance.Snippet)
}
Snippet::Snippet(const Snippet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      table_name_(from.table_name_),
      table_col_(from.table_col_),
      table_filter_(from.table_filter_),
      table_offset_(from.table_offset_),
      table_offlen_(from.table_offlen_),
      table_datatype_(from.table_datatype_),
      column_alias_(from.column_alias_),
      column_projection_(from.column_projection_),
      column_filtering_(from.column_filtering_),
      group_by_(from.group_by_),
      having_(from.having_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  db_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    db_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_db_name().empty()) {
    db_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_db_name(), 
      GetArenaForAllocation());
  }
  table_alias_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    table_alias_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_table_alias().empty()) {
    table_alias_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_table_alias(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_dependency()) {
    dependency_ = new ::StorageEngineInstance::Snippet_Dependency(*from.dependency_);
  } else {
    dependency_ = nullptr;
  }
  if (from._internal_has_order_by()) {
    order_by_ = new ::StorageEngineInstance::Snippet_Order(*from.order_by_);
  } else {
    order_by_ = nullptr;
  }
  if (from._internal_has_limit()) {
    limit_ = new ::StorageEngineInstance::Snippet_Limit(*from.limit_);
  } else {
    limit_ = nullptr;
  }
  ::memcpy(&query_id_, &from.query_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&pk_num_) -
    reinterpret_cast<char*>(&query_id_)) + sizeof(pk_num_));
  // @@protoc_insertion_point(copy_constructor:StorageEngineInstance.Snippet)
}

inline void Snippet::SharedCtor() {
db_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  db_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
table_alias_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  table_alias_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&dependency_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&pk_num_) -
    reinterpret_cast<char*>(&dependency_)) + sizeof(pk_num_));
}

Snippet::~Snippet() {
  // @@protoc_insertion_point(destructor:StorageEngineInstance.Snippet)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Snippet::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  db_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  table_alias_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete dependency_;
  if (this != internal_default_instance()) delete order_by_;
  if (this != internal_default_instance()) delete limit_;
}

void Snippet::ArenaDtor(void* object) {
  Snippet* _this = reinterpret_cast< Snippet* >(object);
  (void)_this;
}
void Snippet::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Snippet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Snippet::Clear() {
// @@protoc_insertion_point(message_clear_start:StorageEngineInstance.Snippet)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  table_name_.Clear();
  table_col_.Clear();
  table_filter_.Clear();
  table_offset_.Clear();
  table_offlen_.Clear();
  table_datatype_.Clear();
  column_alias_.Clear();
  column_projection_.Clear();
  column_filtering_.Clear();
  group_by_.Clear();
  having_.Clear();
  db_name_.ClearToEmpty();
  table_alias_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && dependency_ != nullptr) {
    delete dependency_;
  }
  dependency_ = nullptr;
  if (GetArenaForAllocation() == nullptr && order_by_ != nullptr) {
    delete order_by_;
  }
  order_by_ = nullptr;
  if (GetArenaForAllocation() == nullptr && limit_ != nullptr) {
    delete limit_;
  }
  limit_ = nullptr;
  ::memset(&query_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pk_num_) -
      reinterpret_cast<char*>(&query_id_)) + sizeof(pk_num_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Snippet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string db_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_db_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "StorageEngineInstance.Snippet.db_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 query_ID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          query_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 work_ID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          work_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string table_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_table_name();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "StorageEngineInstance.Snippet.table_name"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string table_col = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_table_col();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "StorageEngineInstance.Snippet.table_col"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .StorageEngineInstance.Snippet.Filter table_filter = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_table_filter(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .StorageEngineInstance.Snippet.Dependency dependency = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_dependency(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 table_offset = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_table_offset(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 64) {
          _internal_add_table_offset(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 table_offlen = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_table_offlen(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 72) {
          _internal_add_table_offlen(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 table_datatype = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_table_datatype(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 80) {
          _internal_add_table_datatype(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string table_alias = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_table_alias();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "StorageEngineInstance.Snippet.table_alias"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string column_alias = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_column_alias();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "StorageEngineInstance.Snippet.column_alias"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .StorageEngineInstance.Snippet.Projection column_projection = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_column_projection(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string column_filtering = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_column_filtering();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "StorageEngineInstance.Snippet.column_filtering"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string group_by = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_group_by();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "StorageEngineInstance.Snippet.group_by"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .StorageEngineInstance.Snippet.Order order_by = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_order_by(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .StorageEngineInstance.Snippet.Limit limit = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_limit(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 pk_num = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          pk_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .StorageEngineInstance.Snippet.Filter having = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_having(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<154>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Snippet::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:StorageEngineInstance.Snippet)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string db_name = 1;
  if (!this->_internal_db_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_db_name().data(), static_cast<int>(this->_internal_db_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "StorageEngineInstance.Snippet.db_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_db_name(), target);
  }

  // int32 query_ID = 2;
  if (this->_internal_query_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_query_id(), target);
  }

  // int32 work_ID = 3;
  if (this->_internal_work_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_work_id(), target);
  }

  // repeated string table_name = 4;
  for (int i = 0, n = this->_internal_table_name_size(); i < n; i++) {
    const auto& s = this->_internal_table_name(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "StorageEngineInstance.Snippet.table_name");
    target = stream->WriteString(4, s, target);
  }

  // repeated string table_col = 5;
  for (int i = 0, n = this->_internal_table_col_size(); i < n; i++) {
    const auto& s = this->_internal_table_col(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "StorageEngineInstance.Snippet.table_col");
    target = stream->WriteString(5, s, target);
  }

  // repeated .StorageEngineInstance.Snippet.Filter table_filter = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_table_filter_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_table_filter(i), target, stream);
  }

  // .StorageEngineInstance.Snippet.Dependency dependency = 7;
  if (this->_internal_has_dependency()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::dependency(this), target, stream);
  }

  // repeated int32 table_offset = 8;
  {
    int byte_size = _table_offset_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          8, _internal_table_offset(), byte_size, target);
    }
  }

  // repeated int32 table_offlen = 9;
  {
    int byte_size = _table_offlen_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          9, _internal_table_offlen(), byte_size, target);
    }
  }

  // repeated int32 table_datatype = 10;
  {
    int byte_size = _table_datatype_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          10, _internal_table_datatype(), byte_size, target);
    }
  }

  // string table_alias = 11;
  if (!this->_internal_table_alias().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_table_alias().data(), static_cast<int>(this->_internal_table_alias().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "StorageEngineInstance.Snippet.table_alias");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_table_alias(), target);
  }

  // repeated string column_alias = 12;
  for (int i = 0, n = this->_internal_column_alias_size(); i < n; i++) {
    const auto& s = this->_internal_column_alias(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "StorageEngineInstance.Snippet.column_alias");
    target = stream->WriteString(12, s, target);
  }

  // repeated .StorageEngineInstance.Snippet.Projection column_projection = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_column_projection_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, this->_internal_column_projection(i), target, stream);
  }

  // repeated string column_filtering = 14;
  for (int i = 0, n = this->_internal_column_filtering_size(); i < n; i++) {
    const auto& s = this->_internal_column_filtering(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "StorageEngineInstance.Snippet.column_filtering");
    target = stream->WriteString(14, s, target);
  }

  // repeated string group_by = 15;
  for (int i = 0, n = this->_internal_group_by_size(); i < n; i++) {
    const auto& s = this->_internal_group_by(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "StorageEngineInstance.Snippet.group_by");
    target = stream->WriteString(15, s, target);
  }

  // .StorageEngineInstance.Snippet.Order order_by = 16;
  if (this->_internal_has_order_by()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::order_by(this), target, stream);
  }

  // .StorageEngineInstance.Snippet.Limit limit = 17;
  if (this->_internal_has_limit()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        17, _Internal::limit(this), target, stream);
  }

  // int32 pk_num = 18;
  if (this->_internal_pk_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(18, this->_internal_pk_num(), target);
  }

  // repeated .StorageEngineInstance.Snippet.Filter having = 19;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_having_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(19, this->_internal_having(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StorageEngineInstance.Snippet)
  return target;
}

size_t Snippet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StorageEngineInstance.Snippet)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string table_name = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(table_name_.size());
  for (int i = 0, n = table_name_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      table_name_.Get(i));
  }

  // repeated string table_col = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(table_col_.size());
  for (int i = 0, n = table_col_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      table_col_.Get(i));
  }

  // repeated .StorageEngineInstance.Snippet.Filter table_filter = 6;
  total_size += 1UL * this->_internal_table_filter_size();
  for (const auto& msg : this->table_filter_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated int32 table_offset = 8;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->table_offset_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _table_offset_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 table_offlen = 9;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->table_offlen_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _table_offlen_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 table_datatype = 10;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->table_datatype_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _table_datatype_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated string column_alias = 12;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(column_alias_.size());
  for (int i = 0, n = column_alias_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      column_alias_.Get(i));
  }

  // repeated .StorageEngineInstance.Snippet.Projection column_projection = 13;
  total_size += 1UL * this->_internal_column_projection_size();
  for (const auto& msg : this->column_projection_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string column_filtering = 14;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(column_filtering_.size());
  for (int i = 0, n = column_filtering_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      column_filtering_.Get(i));
  }

  // repeated string group_by = 15;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(group_by_.size());
  for (int i = 0, n = group_by_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      group_by_.Get(i));
  }

  // repeated .StorageEngineInstance.Snippet.Filter having = 19;
  total_size += 2UL * this->_internal_having_size();
  for (const auto& msg : this->having_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string db_name = 1;
  if (!this->_internal_db_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_db_name());
  }

  // string table_alias = 11;
  if (!this->_internal_table_alias().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_table_alias());
  }

  // .StorageEngineInstance.Snippet.Dependency dependency = 7;
  if (this->_internal_has_dependency()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *dependency_);
  }

  // .StorageEngineInstance.Snippet.Order order_by = 16;
  if (this->_internal_has_order_by()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *order_by_);
  }

  // .StorageEngineInstance.Snippet.Limit limit = 17;
  if (this->_internal_has_limit()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *limit_);
  }

  // int32 query_ID = 2;
  if (this->_internal_query_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_query_id());
  }

  // int32 work_ID = 3;
  if (this->_internal_work_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_work_id());
  }

  // int32 pk_num = 18;
  if (this->_internal_pk_num() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_pk_num());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Snippet::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Snippet::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Snippet::GetClassData() const { return &_class_data_; }

void Snippet::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Snippet *>(to)->MergeFrom(
      static_cast<const Snippet &>(from));
}


void Snippet::MergeFrom(const Snippet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:StorageEngineInstance.Snippet)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  table_name_.MergeFrom(from.table_name_);
  table_col_.MergeFrom(from.table_col_);
  table_filter_.MergeFrom(from.table_filter_);
  table_offset_.MergeFrom(from.table_offset_);
  table_offlen_.MergeFrom(from.table_offlen_);
  table_datatype_.MergeFrom(from.table_datatype_);
  column_alias_.MergeFrom(from.column_alias_);
  column_projection_.MergeFrom(from.column_projection_);
  column_filtering_.MergeFrom(from.column_filtering_);
  group_by_.MergeFrom(from.group_by_);
  having_.MergeFrom(from.having_);
  if (!from._internal_db_name().empty()) {
    _internal_set_db_name(from._internal_db_name());
  }
  if (!from._internal_table_alias().empty()) {
    _internal_set_table_alias(from._internal_table_alias());
  }
  if (from._internal_has_dependency()) {
    _internal_mutable_dependency()->::StorageEngineInstance::Snippet_Dependency::MergeFrom(from._internal_dependency());
  }
  if (from._internal_has_order_by()) {
    _internal_mutable_order_by()->::StorageEngineInstance::Snippet_Order::MergeFrom(from._internal_order_by());
  }
  if (from._internal_has_limit()) {
    _internal_mutable_limit()->::StorageEngineInstance::Snippet_Limit::MergeFrom(from._internal_limit());
  }
  if (from._internal_query_id() != 0) {
    _internal_set_query_id(from._internal_query_id());
  }
  if (from._internal_work_id() != 0) {
    _internal_set_work_id(from._internal_work_id());
  }
  if (from._internal_pk_num() != 0) {
    _internal_set_pk_num(from._internal_pk_num());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Snippet::CopyFrom(const Snippet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StorageEngineInstance.Snippet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Snippet::IsInitialized() const {
  return true;
}

void Snippet::InternalSwap(Snippet* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  table_name_.InternalSwap(&other->table_name_);
  table_col_.InternalSwap(&other->table_col_);
  table_filter_.InternalSwap(&other->table_filter_);
  table_offset_.InternalSwap(&other->table_offset_);
  table_offlen_.InternalSwap(&other->table_offlen_);
  table_datatype_.InternalSwap(&other->table_datatype_);
  column_alias_.InternalSwap(&other->column_alias_);
  column_projection_.InternalSwap(&other->column_projection_);
  column_filtering_.InternalSwap(&other->column_filtering_);
  group_by_.InternalSwap(&other->group_by_);
  having_.InternalSwap(&other->having_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &db_name_, lhs_arena,
      &other->db_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &table_alias_, lhs_arena,
      &other->table_alias_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Snippet, pk_num_)
      + sizeof(Snippet::pk_num_)
      - PROTOBUF_FIELD_OFFSET(Snippet, dependency_)>(
          reinterpret_cast<char*>(&dependency_),
          reinterpret_cast<char*>(&other->dependency_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Snippet::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_storage_5fengine_5finstance_2eproto_getter, &descriptor_table_storage_5fengine_5finstance_2eproto_once,
      file_level_metadata_storage_5fengine_5finstance_2eproto[7]);
}

// ===================================================================

Request_SstCsdMapEntry_DoNotUse::Request_SstCsdMapEntry_DoNotUse() {}
Request_SstCsdMapEntry_DoNotUse::Request_SstCsdMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Request_SstCsdMapEntry_DoNotUse::MergeFrom(const Request_SstCsdMapEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Request_SstCsdMapEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_storage_5fengine_5finstance_2eproto_getter, &descriptor_table_storage_5fengine_5finstance_2eproto_once,
      file_level_metadata_storage_5fengine_5finstance_2eproto[8]);
}

// ===================================================================

class Request::_Internal {
 public:
};

Request::Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  sst_csd_map_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:StorageEngineInstance.Request)
}
Request::Request(const Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sst_csd_map_.MergeFrom(from.sst_csd_map_);
  db_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    db_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_db_name().empty()) {
    db_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_db_name(), 
      GetArenaForAllocation());
  }
  table_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    table_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_table_name().empty()) {
    table_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_table_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&query_id_, &from.query_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&table_index_number_) -
    reinterpret_cast<char*>(&query_id_)) + sizeof(table_index_number_));
  // @@protoc_insertion_point(copy_constructor:StorageEngineInstance.Request)
}

inline void Request::SharedCtor() {
db_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  db_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
table_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  table_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&query_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&table_index_number_) -
    reinterpret_cast<char*>(&query_id_)) + sizeof(table_index_number_));
}

Request::~Request() {
  // @@protoc_insertion_point(destructor:StorageEngineInstance.Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  db_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  table_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Request::ArenaDtor(void* object) {
  Request* _this = reinterpret_cast< Request* >(object);
  (void)_this;
  _this->sst_csd_map_. ~MapField();
}
inline void Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &Request::ArenaDtor);
  }
}
void Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Request::Clear() {
// @@protoc_insertion_point(message_clear_start:StorageEngineInstance.Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sst_csd_map_.Clear();
  db_name_.ClearToEmpty();
  table_name_.ClearToEmpty();
  ::memset(&query_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&table_index_number_) -
      reinterpret_cast<char*>(&query_id_)) + sizeof(table_index_number_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 query_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          query_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 work_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          work_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string db_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_db_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "StorageEngineInstance.Request.db_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string table_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_table_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "StorageEngineInstance.Request.table_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 table_index_number = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          table_index_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<string, string> sst_csd_map = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&sst_csd_map_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:StorageEngineInstance.Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 query_id = 1;
  if (this->_internal_query_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_query_id(), target);
  }

  // int32 work_id = 2;
  if (this->_internal_work_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_work_id(), target);
  }

  // string db_name = 3;
  if (!this->_internal_db_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_db_name().data(), static_cast<int>(this->_internal_db_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "StorageEngineInstance.Request.db_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_db_name(), target);
  }

  // string table_name = 4;
  if (!this->_internal_table_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_table_name().data(), static_cast<int>(this->_internal_table_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "StorageEngineInstance.Request.table_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_table_name(), target);
  }

  // int32 table_index_number = 5;
  if (this->_internal_table_index_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_table_index_number(), target);
  }

  // map<string, string> sst_csd_map = 6;
  if (!this->_internal_sst_csd_map().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "StorageEngineInstance.Request.SstCsdMapEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "StorageEngineInstance.Request.SstCsdMapEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_sst_csd_map().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_sst_csd_map().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_sst_csd_map().begin();
          it != this->_internal_sst_csd_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Request_SstCsdMapEntry_DoNotUse::Funcs::InternalSerialize(6, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_sst_csd_map().begin();
          it != this->_internal_sst_csd_map().end(); ++it) {
        target = Request_SstCsdMapEntry_DoNotUse::Funcs::InternalSerialize(6, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StorageEngineInstance.Request)
  return target;
}

size_t Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StorageEngineInstance.Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> sst_csd_map = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_sst_csd_map_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_sst_csd_map().begin();
      it != this->_internal_sst_csd_map().end(); ++it) {
    total_size += Request_SstCsdMapEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string db_name = 3;
  if (!this->_internal_db_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_db_name());
  }

  // string table_name = 4;
  if (!this->_internal_table_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_table_name());
  }

  // int32 query_id = 1;
  if (this->_internal_query_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_query_id());
  }

  // int32 work_id = 2;
  if (this->_internal_work_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_work_id());
  }

  // int32 table_index_number = 5;
  if (this->_internal_table_index_number() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_table_index_number());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Request::GetClassData() const { return &_class_data_; }

void Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Request *>(to)->MergeFrom(
      static_cast<const Request &>(from));
}


void Request::MergeFrom(const Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:StorageEngineInstance.Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  sst_csd_map_.MergeFrom(from.sst_csd_map_);
  if (!from._internal_db_name().empty()) {
    _internal_set_db_name(from._internal_db_name());
  }
  if (!from._internal_table_name().empty()) {
    _internal_set_table_name(from._internal_table_name());
  }
  if (from._internal_query_id() != 0) {
    _internal_set_query_id(from._internal_query_id());
  }
  if (from._internal_work_id() != 0) {
    _internal_set_work_id(from._internal_work_id());
  }
  if (from._internal_table_index_number() != 0) {
    _internal_set_table_index_number(from._internal_table_index_number());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Request::CopyFrom(const Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StorageEngineInstance.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request::IsInitialized() const {
  return true;
}

void Request::InternalSwap(Request* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  sst_csd_map_.InternalSwap(&other->sst_csd_map_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &db_name_, lhs_arena,
      &other->db_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &table_name_, lhs_arena,
      &other->table_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Request, table_index_number_)
      + sizeof(Request::table_index_number_)
      - PROTOBUF_FIELD_OFFSET(Request, query_id_)>(
          reinterpret_cast<char*>(&query_id_),
          reinterpret_cast<char*>(&other->query_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_storage_5fengine_5finstance_2eproto_getter, &descriptor_table_storage_5fengine_5finstance_2eproto_once,
      file_level_metadata_storage_5fengine_5finstance_2eproto[9]);
}

// ===================================================================

class Response::_Internal {
 public:
};

Response::Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:StorageEngineInstance.Response)
}
Response::Response(const Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_value().empty()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:StorageEngineInstance.Response)
}

inline void Response::SharedCtor() {
value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Response::~Response() {
  // @@protoc_insertion_point(destructor:StorageEngineInstance.Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Response::ArenaDtor(void* object) {
  Response* _this = reinterpret_cast< Response* >(object);
  (void)_this;
}
void Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Response::Clear() {
// @@protoc_insertion_point(message_clear_start:StorageEngineInstance.Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "StorageEngineInstance.Response.value"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:StorageEngineInstance.Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string value = 1;
  if (!this->_internal_value().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "StorageEngineInstance.Response.value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StorageEngineInstance.Response)
  return target;
}

size_t Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StorageEngineInstance.Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string value = 1;
  if (!this->_internal_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Response::GetClassData() const { return &_class_data_; }

void Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Response *>(to)->MergeFrom(
      static_cast<const Response &>(from));
}


void Response::MergeFrom(const Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:StorageEngineInstance.Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_value().empty()) {
    _internal_set_value(from._internal_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Response::CopyFrom(const Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StorageEngineInstance.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response::IsInitialized() const {
  return true;
}

void Response::InternalSwap(Response* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &value_, lhs_arena,
      &other->value_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_storage_5fengine_5finstance_2eproto_getter, &descriptor_table_storage_5fengine_5finstance_2eproto_once,
      file_level_metadata_storage_5fengine_5finstance_2eproto[10]);
}

// ===================================================================

class QueryResult_Column::_Internal {
 public:
};

QueryResult_Column::QueryResult_Column(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  string_col_(arena),
  int_col_(arena),
  double_col_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:StorageEngineInstance.QueryResult.Column)
}
QueryResult_Column::QueryResult_Column(const QueryResult_Column& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      string_col_(from.string_col_),
      int_col_(from.int_col_),
      double_col_(from.double_col_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  col_type_ = from.col_type_;
  // @@protoc_insertion_point(copy_constructor:StorageEngineInstance.QueryResult.Column)
}

inline void QueryResult_Column::SharedCtor() {
col_type_ = 0;
}

QueryResult_Column::~QueryResult_Column() {
  // @@protoc_insertion_point(destructor:StorageEngineInstance.QueryResult.Column)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void QueryResult_Column::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void QueryResult_Column::ArenaDtor(void* object) {
  QueryResult_Column* _this = reinterpret_cast< QueryResult_Column* >(object);
  (void)_this;
}
void QueryResult_Column::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void QueryResult_Column::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void QueryResult_Column::Clear() {
// @@protoc_insertion_point(message_clear_start:StorageEngineInstance.QueryResult.Column)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  string_col_.Clear();
  int_col_.Clear();
  double_col_.Clear();
  col_type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryResult_Column::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .StorageEngineInstance.QueryResult.Column.ColType col_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_col_type(static_cast<::StorageEngineInstance::QueryResult_Column_ColType>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated string string_col = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_string_col();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "StorageEngineInstance.QueryResult.Column.string_col"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated int32 int_col = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_int_col(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 32) {
          _internal_add_int_col(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated double double_col = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_double_col(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 41) {
          _internal_add_double_col(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* QueryResult_Column::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:StorageEngineInstance.QueryResult.Column)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .StorageEngineInstance.QueryResult.Column.ColType col_type = 2;
  if (this->_internal_col_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_col_type(), target);
  }

  // repeated string string_col = 3;
  for (int i = 0, n = this->_internal_string_col_size(); i < n; i++) {
    const auto& s = this->_internal_string_col(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "StorageEngineInstance.QueryResult.Column.string_col");
    target = stream->WriteString(3, s, target);
  }

  // repeated int32 int_col = 4;
  {
    int byte_size = _int_col_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          4, _internal_int_col(), byte_size, target);
    }
  }

  // repeated double double_col = 5;
  if (this->_internal_double_col_size() > 0) {
    target = stream->WriteFixedPacked(5, _internal_double_col(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StorageEngineInstance.QueryResult.Column)
  return target;
}

size_t QueryResult_Column::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StorageEngineInstance.QueryResult.Column)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string string_col = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(string_col_.size());
  for (int i = 0, n = string_col_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      string_col_.Get(i));
  }

  // repeated int32 int_col = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->int_col_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _int_col_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated double double_col = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_double_col_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // .StorageEngineInstance.QueryResult.Column.ColType col_type = 2;
  if (this->_internal_col_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_col_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryResult_Column::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    QueryResult_Column::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryResult_Column::GetClassData() const { return &_class_data_; }

void QueryResult_Column::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<QueryResult_Column *>(to)->MergeFrom(
      static_cast<const QueryResult_Column &>(from));
}


void QueryResult_Column::MergeFrom(const QueryResult_Column& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:StorageEngineInstance.QueryResult.Column)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  string_col_.MergeFrom(from.string_col_);
  int_col_.MergeFrom(from.int_col_);
  double_col_.MergeFrom(from.double_col_);
  if (from._internal_col_type() != 0) {
    _internal_set_col_type(from._internal_col_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryResult_Column::CopyFrom(const QueryResult_Column& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StorageEngineInstance.QueryResult.Column)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryResult_Column::IsInitialized() const {
  return true;
}

void QueryResult_Column::InternalSwap(QueryResult_Column* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  string_col_.InternalSwap(&other->string_col_);
  int_col_.InternalSwap(&other->int_col_);
  double_col_.InternalSwap(&other->double_col_);
  swap(col_type_, other->col_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryResult_Column::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_storage_5fengine_5finstance_2eproto_getter, &descriptor_table_storage_5fengine_5finstance_2eproto_once,
      file_level_metadata_storage_5fengine_5finstance_2eproto[11]);
}

// ===================================================================

QueryResult_QueryResultEntry_DoNotUse::QueryResult_QueryResultEntry_DoNotUse() {}
QueryResult_QueryResultEntry_DoNotUse::QueryResult_QueryResultEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void QueryResult_QueryResultEntry_DoNotUse::MergeFrom(const QueryResult_QueryResultEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata QueryResult_QueryResultEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_storage_5fengine_5finstance_2eproto_getter, &descriptor_table_storage_5fengine_5finstance_2eproto_once,
      file_level_metadata_storage_5fengine_5finstance_2eproto[12]);
}

// ===================================================================

class QueryResult::_Internal {
 public:
};

QueryResult::QueryResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  query_result_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:StorageEngineInstance.QueryResult)
}
QueryResult::QueryResult(const QueryResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  query_result_.MergeFrom(from.query_result_);
  ::memcpy(&row_count_, &from.row_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&filtered_row_count_) -
    reinterpret_cast<char*>(&row_count_)) + sizeof(filtered_row_count_));
  // @@protoc_insertion_point(copy_constructor:StorageEngineInstance.QueryResult)
}

inline void QueryResult::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&row_count_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&filtered_row_count_) -
    reinterpret_cast<char*>(&row_count_)) + sizeof(filtered_row_count_));
}

QueryResult::~QueryResult() {
  // @@protoc_insertion_point(destructor:StorageEngineInstance.QueryResult)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void QueryResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void QueryResult::ArenaDtor(void* object) {
  QueryResult* _this = reinterpret_cast< QueryResult* >(object);
  (void)_this;
  _this->query_result_. ~MapField();
}
inline void QueryResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &QueryResult::ArenaDtor);
  }
}
void QueryResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void QueryResult::Clear() {
// @@protoc_insertion_point(message_clear_start:StorageEngineInstance.QueryResult)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  query_result_.Clear();
  ::memset(&row_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&filtered_row_count_) -
      reinterpret_cast<char*>(&row_count_)) + sizeof(filtered_row_count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<string, .StorageEngineInstance.QueryResult.Column> query_result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&query_result_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int32 row_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          row_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 scanned_row_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          scanned_row_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 filtered_row_count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          filtered_row_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* QueryResult::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:StorageEngineInstance.QueryResult)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .StorageEngineInstance.QueryResult.Column> query_result = 1;
  if (!this->_internal_query_result().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::StorageEngineInstance::QueryResult_Column >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "StorageEngineInstance.QueryResult.QueryResultEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_query_result().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_query_result().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::StorageEngineInstance::QueryResult_Column >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::StorageEngineInstance::QueryResult_Column >::const_iterator
          it = this->_internal_query_result().begin();
          it != this->_internal_query_result().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = QueryResult_QueryResultEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::StorageEngineInstance::QueryResult_Column >::const_iterator
          it = this->_internal_query_result().begin();
          it != this->_internal_query_result().end(); ++it) {
        target = QueryResult_QueryResultEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // int32 row_count = 2;
  if (this->_internal_row_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_row_count(), target);
  }

  // int32 scanned_row_count = 3;
  if (this->_internal_scanned_row_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_scanned_row_count(), target);
  }

  // int32 filtered_row_count = 4;
  if (this->_internal_filtered_row_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_filtered_row_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StorageEngineInstance.QueryResult)
  return target;
}

size_t QueryResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StorageEngineInstance.QueryResult)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .StorageEngineInstance.QueryResult.Column> query_result = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_query_result_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::StorageEngineInstance::QueryResult_Column >::const_iterator
      it = this->_internal_query_result().begin();
      it != this->_internal_query_result().end(); ++it) {
    total_size += QueryResult_QueryResultEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // int32 row_count = 2;
  if (this->_internal_row_count() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_row_count());
  }

  // int32 scanned_row_count = 3;
  if (this->_internal_scanned_row_count() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_scanned_row_count());
  }

  // int32 filtered_row_count = 4;
  if (this->_internal_filtered_row_count() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_filtered_row_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    QueryResult::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryResult::GetClassData() const { return &_class_data_; }

void QueryResult::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<QueryResult *>(to)->MergeFrom(
      static_cast<const QueryResult &>(from));
}


void QueryResult::MergeFrom(const QueryResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:StorageEngineInstance.QueryResult)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  query_result_.MergeFrom(from.query_result_);
  if (from._internal_row_count() != 0) {
    _internal_set_row_count(from._internal_row_count());
  }
  if (from._internal_scanned_row_count() != 0) {
    _internal_set_scanned_row_count(from._internal_scanned_row_count());
  }
  if (from._internal_filtered_row_count() != 0) {
    _internal_set_filtered_row_count(from._internal_filtered_row_count());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryResult::CopyFrom(const QueryResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StorageEngineInstance.QueryResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryResult::IsInitialized() const {
  return true;
}

void QueryResult::InternalSwap(QueryResult* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  query_result_.InternalSwap(&other->query_result_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(QueryResult, filtered_row_count_)
      + sizeof(QueryResult::filtered_row_count_)
      - PROTOBUF_FIELD_OFFSET(QueryResult, row_count_)>(
          reinterpret_cast<char*>(&row_count_),
          reinterpret_cast<char*>(&other->row_count_));
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryResult::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_storage_5fengine_5finstance_2eproto_getter, &descriptor_table_storage_5fengine_5finstance_2eproto_once,
      file_level_metadata_storage_5fengine_5finstance_2eproto[13]);
}

// ===================================================================

class QueryStringResult::_Internal {
 public:
};

QueryStringResult::QueryStringResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:StorageEngineInstance.QueryStringResult)
}
QueryStringResult::QueryStringResult(const QueryStringResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  query_result_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    query_result_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_query_result().empty()) {
    query_result_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_query_result(), 
      GetArenaForAllocation());
  }
  ::memcpy(&scanned_row_count_, &from.scanned_row_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&filtered_row_count_) -
    reinterpret_cast<char*>(&scanned_row_count_)) + sizeof(filtered_row_count_));
  // @@protoc_insertion_point(copy_constructor:StorageEngineInstance.QueryStringResult)
}

inline void QueryStringResult::SharedCtor() {
query_result_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  query_result_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&scanned_row_count_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&filtered_row_count_) -
    reinterpret_cast<char*>(&scanned_row_count_)) + sizeof(filtered_row_count_));
}

QueryStringResult::~QueryStringResult() {
  // @@protoc_insertion_point(destructor:StorageEngineInstance.QueryStringResult)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void QueryStringResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  query_result_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void QueryStringResult::ArenaDtor(void* object) {
  QueryStringResult* _this = reinterpret_cast< QueryStringResult* >(object);
  (void)_this;
}
void QueryStringResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void QueryStringResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void QueryStringResult::Clear() {
// @@protoc_insertion_point(message_clear_start:StorageEngineInstance.QueryStringResult)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  query_result_.ClearToEmpty();
  ::memset(&scanned_row_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&filtered_row_count_) -
      reinterpret_cast<char*>(&scanned_row_count_)) + sizeof(filtered_row_count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryStringResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string query_result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_query_result();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "StorageEngineInstance.QueryStringResult.query_result"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 scanned_row_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          scanned_row_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 filtered_row_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          filtered_row_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* QueryStringResult::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:StorageEngineInstance.QueryStringResult)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string query_result = 1;
  if (!this->_internal_query_result().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_query_result().data(), static_cast<int>(this->_internal_query_result().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "StorageEngineInstance.QueryStringResult.query_result");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_query_result(), target);
  }

  // int32 scanned_row_count = 2;
  if (this->_internal_scanned_row_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_scanned_row_count(), target);
  }

  // int32 filtered_row_count = 3;
  if (this->_internal_filtered_row_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_filtered_row_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StorageEngineInstance.QueryStringResult)
  return target;
}

size_t QueryStringResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StorageEngineInstance.QueryStringResult)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string query_result = 1;
  if (!this->_internal_query_result().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_query_result());
  }

  // int32 scanned_row_count = 2;
  if (this->_internal_scanned_row_count() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_scanned_row_count());
  }

  // int32 filtered_row_count = 3;
  if (this->_internal_filtered_row_count() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_filtered_row_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryStringResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    QueryStringResult::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryStringResult::GetClassData() const { return &_class_data_; }

void QueryStringResult::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<QueryStringResult *>(to)->MergeFrom(
      static_cast<const QueryStringResult &>(from));
}


void QueryStringResult::MergeFrom(const QueryStringResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:StorageEngineInstance.QueryStringResult)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_query_result().empty()) {
    _internal_set_query_result(from._internal_query_result());
  }
  if (from._internal_scanned_row_count() != 0) {
    _internal_set_scanned_row_count(from._internal_scanned_row_count());
  }
  if (from._internal_filtered_row_count() != 0) {
    _internal_set_filtered_row_count(from._internal_filtered_row_count());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryStringResult::CopyFrom(const QueryStringResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StorageEngineInstance.QueryStringResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryStringResult::IsInitialized() const {
  return true;
}

void QueryStringResult::InternalSwap(QueryStringResult* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &query_result_, lhs_arena,
      &other->query_result_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(QueryStringResult, filtered_row_count_)
      + sizeof(QueryStringResult::filtered_row_count_)
      - PROTOBUF_FIELD_OFFSET(QueryStringResult, scanned_row_count_)>(
          reinterpret_cast<char*>(&scanned_row_count_),
          reinterpret_cast<char*>(&other->scanned_row_count_));
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryStringResult::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_storage_5fengine_5finstance_2eproto_getter, &descriptor_table_storage_5fengine_5finstance_2eproto_once,
      file_level_metadata_storage_5fengine_5finstance_2eproto[14]);
}

// ===================================================================

class DBInfo_DB_Table::_Internal {
 public:
};

DBInfo_DB_Table::DBInfo_DB_Table(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  sst_list_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:StorageEngineInstance.DBInfo.DB.Table)
}
DBInfo_DB_Table::DBInfo_DB_Table(const DBInfo_DB_Table& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      sst_list_(from.sst_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  table_index_number_ = from.table_index_number_;
  // @@protoc_insertion_point(copy_constructor:StorageEngineInstance.DBInfo.DB.Table)
}

inline void DBInfo_DB_Table::SharedCtor() {
table_index_number_ = 0;
}

DBInfo_DB_Table::~DBInfo_DB_Table() {
  // @@protoc_insertion_point(destructor:StorageEngineInstance.DBInfo.DB.Table)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DBInfo_DB_Table::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DBInfo_DB_Table::ArenaDtor(void* object) {
  DBInfo_DB_Table* _this = reinterpret_cast< DBInfo_DB_Table* >(object);
  (void)_this;
}
void DBInfo_DB_Table::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DBInfo_DB_Table::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DBInfo_DB_Table::Clear() {
// @@protoc_insertion_point(message_clear_start:StorageEngineInstance.DBInfo.DB.Table)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sst_list_.Clear();
  table_index_number_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DBInfo_DB_Table::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 table_index_number = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          table_index_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string sst_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_sst_list();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "StorageEngineInstance.DBInfo.DB.Table.sst_list"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DBInfo_DB_Table::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:StorageEngineInstance.DBInfo.DB.Table)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 table_index_number = 1;
  if (this->_internal_table_index_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_table_index_number(), target);
  }

  // repeated string sst_list = 2;
  for (int i = 0, n = this->_internal_sst_list_size(); i < n; i++) {
    const auto& s = this->_internal_sst_list(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "StorageEngineInstance.DBInfo.DB.Table.sst_list");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StorageEngineInstance.DBInfo.DB.Table)
  return target;
}

size_t DBInfo_DB_Table::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StorageEngineInstance.DBInfo.DB.Table)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string sst_list = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(sst_list_.size());
  for (int i = 0, n = sst_list_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      sst_list_.Get(i));
  }

  // int32 table_index_number = 1;
  if (this->_internal_table_index_number() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_table_index_number());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DBInfo_DB_Table::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DBInfo_DB_Table::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DBInfo_DB_Table::GetClassData() const { return &_class_data_; }

void DBInfo_DB_Table::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DBInfo_DB_Table *>(to)->MergeFrom(
      static_cast<const DBInfo_DB_Table &>(from));
}


void DBInfo_DB_Table::MergeFrom(const DBInfo_DB_Table& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:StorageEngineInstance.DBInfo.DB.Table)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  sst_list_.MergeFrom(from.sst_list_);
  if (from._internal_table_index_number() != 0) {
    _internal_set_table_index_number(from._internal_table_index_number());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DBInfo_DB_Table::CopyFrom(const DBInfo_DB_Table& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StorageEngineInstance.DBInfo.DB.Table)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBInfo_DB_Table::IsInitialized() const {
  return true;
}

void DBInfo_DB_Table::InternalSwap(DBInfo_DB_Table* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  sst_list_.InternalSwap(&other->sst_list_);
  swap(table_index_number_, other->table_index_number_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DBInfo_DB_Table::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_storage_5fengine_5finstance_2eproto_getter, &descriptor_table_storage_5fengine_5finstance_2eproto_once,
      file_level_metadata_storage_5fengine_5finstance_2eproto[15]);
}

// ===================================================================

DBInfo_DB_TableListEntry_DoNotUse::DBInfo_DB_TableListEntry_DoNotUse() {}
DBInfo_DB_TableListEntry_DoNotUse::DBInfo_DB_TableListEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void DBInfo_DB_TableListEntry_DoNotUse::MergeFrom(const DBInfo_DB_TableListEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata DBInfo_DB_TableListEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_storage_5fengine_5finstance_2eproto_getter, &descriptor_table_storage_5fengine_5finstance_2eproto_once,
      file_level_metadata_storage_5fengine_5finstance_2eproto[16]);
}

// ===================================================================

class DBInfo_DB::_Internal {
 public:
};

DBInfo_DB::DBInfo_DB(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  table_list_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:StorageEngineInstance.DBInfo.DB)
}
DBInfo_DB::DBInfo_DB(const DBInfo_DB& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  table_list_.MergeFrom(from.table_list_);
  // @@protoc_insertion_point(copy_constructor:StorageEngineInstance.DBInfo.DB)
}

inline void DBInfo_DB::SharedCtor() {
}

DBInfo_DB::~DBInfo_DB() {
  // @@protoc_insertion_point(destructor:StorageEngineInstance.DBInfo.DB)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DBInfo_DB::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DBInfo_DB::ArenaDtor(void* object) {
  DBInfo_DB* _this = reinterpret_cast< DBInfo_DB* >(object);
  (void)_this;
  _this->table_list_. ~MapField();
}
inline void DBInfo_DB::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &DBInfo_DB::ArenaDtor);
  }
}
void DBInfo_DB::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DBInfo_DB::Clear() {
// @@protoc_insertion_point(message_clear_start:StorageEngineInstance.DBInfo.DB)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  table_list_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DBInfo_DB::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<string, .StorageEngineInstance.DBInfo.DB.Table> table_list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&table_list_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DBInfo_DB::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:StorageEngineInstance.DBInfo.DB)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .StorageEngineInstance.DBInfo.DB.Table> table_list = 1;
  if (!this->_internal_table_list().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::StorageEngineInstance::DBInfo_DB_Table >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "StorageEngineInstance.DBInfo.DB.TableListEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_table_list().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_table_list().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::StorageEngineInstance::DBInfo_DB_Table >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::StorageEngineInstance::DBInfo_DB_Table >::const_iterator
          it = this->_internal_table_list().begin();
          it != this->_internal_table_list().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = DBInfo_DB_TableListEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::StorageEngineInstance::DBInfo_DB_Table >::const_iterator
          it = this->_internal_table_list().begin();
          it != this->_internal_table_list().end(); ++it) {
        target = DBInfo_DB_TableListEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StorageEngineInstance.DBInfo.DB)
  return target;
}

size_t DBInfo_DB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StorageEngineInstance.DBInfo.DB)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .StorageEngineInstance.DBInfo.DB.Table> table_list = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_table_list_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::StorageEngineInstance::DBInfo_DB_Table >::const_iterator
      it = this->_internal_table_list().begin();
      it != this->_internal_table_list().end(); ++it) {
    total_size += DBInfo_DB_TableListEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DBInfo_DB::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DBInfo_DB::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DBInfo_DB::GetClassData() const { return &_class_data_; }

void DBInfo_DB::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DBInfo_DB *>(to)->MergeFrom(
      static_cast<const DBInfo_DB &>(from));
}


void DBInfo_DB::MergeFrom(const DBInfo_DB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:StorageEngineInstance.DBInfo.DB)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  table_list_.MergeFrom(from.table_list_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DBInfo_DB::CopyFrom(const DBInfo_DB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StorageEngineInstance.DBInfo.DB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBInfo_DB::IsInitialized() const {
  return true;
}

void DBInfo_DB::InternalSwap(DBInfo_DB* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  table_list_.InternalSwap(&other->table_list_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DBInfo_DB::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_storage_5fengine_5finstance_2eproto_getter, &descriptor_table_storage_5fengine_5finstance_2eproto_once,
      file_level_metadata_storage_5fengine_5finstance_2eproto[17]);
}

// ===================================================================

DBInfo_DbListEntry_DoNotUse::DBInfo_DbListEntry_DoNotUse() {}
DBInfo_DbListEntry_DoNotUse::DBInfo_DbListEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void DBInfo_DbListEntry_DoNotUse::MergeFrom(const DBInfo_DbListEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata DBInfo_DbListEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_storage_5fengine_5finstance_2eproto_getter, &descriptor_table_storage_5fengine_5finstance_2eproto_once,
      file_level_metadata_storage_5fengine_5finstance_2eproto[18]);
}

// ===================================================================

class DBInfo::_Internal {
 public:
};

DBInfo::DBInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  db_list_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:StorageEngineInstance.DBInfo)
}
DBInfo::DBInfo(const DBInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  db_list_.MergeFrom(from.db_list_);
  // @@protoc_insertion_point(copy_constructor:StorageEngineInstance.DBInfo)
}

inline void DBInfo::SharedCtor() {
}

DBInfo::~DBInfo() {
  // @@protoc_insertion_point(destructor:StorageEngineInstance.DBInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DBInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DBInfo::ArenaDtor(void* object) {
  DBInfo* _this = reinterpret_cast< DBInfo* >(object);
  (void)_this;
  _this->db_list_. ~MapField();
}
inline void DBInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &DBInfo::ArenaDtor);
  }
}
void DBInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DBInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:StorageEngineInstance.DBInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  db_list_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DBInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<string, .StorageEngineInstance.DBInfo.DB> db_list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&db_list_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DBInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:StorageEngineInstance.DBInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .StorageEngineInstance.DBInfo.DB> db_list = 1;
  if (!this->_internal_db_list().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::StorageEngineInstance::DBInfo_DB >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "StorageEngineInstance.DBInfo.DbListEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_db_list().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_db_list().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::StorageEngineInstance::DBInfo_DB >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::StorageEngineInstance::DBInfo_DB >::const_iterator
          it = this->_internal_db_list().begin();
          it != this->_internal_db_list().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = DBInfo_DbListEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::StorageEngineInstance::DBInfo_DB >::const_iterator
          it = this->_internal_db_list().begin();
          it != this->_internal_db_list().end(); ++it) {
        target = DBInfo_DbListEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StorageEngineInstance.DBInfo)
  return target;
}

size_t DBInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StorageEngineInstance.DBInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .StorageEngineInstance.DBInfo.DB> db_list = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_db_list_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::StorageEngineInstance::DBInfo_DB >::const_iterator
      it = this->_internal_db_list().begin();
      it != this->_internal_db_list().end(); ++it) {
    total_size += DBInfo_DbListEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DBInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DBInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DBInfo::GetClassData() const { return &_class_data_; }

void DBInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DBInfo *>(to)->MergeFrom(
      static_cast<const DBInfo &>(from));
}


void DBInfo::MergeFrom(const DBInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:StorageEngineInstance.DBInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  db_list_.MergeFrom(from.db_list_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DBInfo::CopyFrom(const DBInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StorageEngineInstance.DBInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBInfo::IsInitialized() const {
  return true;
}

void DBInfo::InternalSwap(DBInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  db_list_.InternalSwap(&other->db_list_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DBInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_storage_5fengine_5finstance_2eproto_getter, &descriptor_table_storage_5fengine_5finstance_2eproto_once,
      file_level_metadata_storage_5fengine_5finstance_2eproto[19]);
}

// ===================================================================

class DataFileInfo_CSD::_Internal {
 public:
};

DataFileInfo_CSD::DataFileInfo_CSD(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  csd_id_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:StorageEngineInstance.DataFileInfo.CSD)
}
DataFileInfo_CSD::DataFileInfo_CSD(const DataFileInfo_CSD& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      csd_id_(from.csd_id_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:StorageEngineInstance.DataFileInfo.CSD)
}

inline void DataFileInfo_CSD::SharedCtor() {
}

DataFileInfo_CSD::~DataFileInfo_CSD() {
  // @@protoc_insertion_point(destructor:StorageEngineInstance.DataFileInfo.CSD)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DataFileInfo_CSD::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DataFileInfo_CSD::ArenaDtor(void* object) {
  DataFileInfo_CSD* _this = reinterpret_cast< DataFileInfo_CSD* >(object);
  (void)_this;
}
void DataFileInfo_CSD::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DataFileInfo_CSD::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DataFileInfo_CSD::Clear() {
// @@protoc_insertion_point(message_clear_start:StorageEngineInstance.DataFileInfo.CSD)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  csd_id_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DataFileInfo_CSD::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string csd_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_csd_id();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "StorageEngineInstance.DataFileInfo.CSD.csd_id"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DataFileInfo_CSD::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:StorageEngineInstance.DataFileInfo.CSD)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string csd_id = 1;
  for (int i = 0, n = this->_internal_csd_id_size(); i < n; i++) {
    const auto& s = this->_internal_csd_id(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "StorageEngineInstance.DataFileInfo.CSD.csd_id");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StorageEngineInstance.DataFileInfo.CSD)
  return target;
}

size_t DataFileInfo_CSD::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StorageEngineInstance.DataFileInfo.CSD)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string csd_id = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(csd_id_.size());
  for (int i = 0, n = csd_id_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      csd_id_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DataFileInfo_CSD::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DataFileInfo_CSD::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DataFileInfo_CSD::GetClassData() const { return &_class_data_; }

void DataFileInfo_CSD::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DataFileInfo_CSD *>(to)->MergeFrom(
      static_cast<const DataFileInfo_CSD &>(from));
}


void DataFileInfo_CSD::MergeFrom(const DataFileInfo_CSD& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:StorageEngineInstance.DataFileInfo.CSD)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  csd_id_.MergeFrom(from.csd_id_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DataFileInfo_CSD::CopyFrom(const DataFileInfo_CSD& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StorageEngineInstance.DataFileInfo.CSD)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataFileInfo_CSD::IsInitialized() const {
  return true;
}

void DataFileInfo_CSD::InternalSwap(DataFileInfo_CSD* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  csd_id_.InternalSwap(&other->csd_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DataFileInfo_CSD::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_storage_5fengine_5finstance_2eproto_getter, &descriptor_table_storage_5fengine_5finstance_2eproto_once,
      file_level_metadata_storage_5fengine_5finstance_2eproto[20]);
}

// ===================================================================

DataFileInfo_SstCsdMapEntry_DoNotUse::DataFileInfo_SstCsdMapEntry_DoNotUse() {}
DataFileInfo_SstCsdMapEntry_DoNotUse::DataFileInfo_SstCsdMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void DataFileInfo_SstCsdMapEntry_DoNotUse::MergeFrom(const DataFileInfo_SstCsdMapEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata DataFileInfo_SstCsdMapEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_storage_5fengine_5finstance_2eproto_getter, &descriptor_table_storage_5fengine_5finstance_2eproto_once,
      file_level_metadata_storage_5fengine_5finstance_2eproto[21]);
}

// ===================================================================

class DataFileInfo::_Internal {
 public:
};

DataFileInfo::DataFileInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  sst_csd_map_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:StorageEngineInstance.DataFileInfo)
}
DataFileInfo::DataFileInfo(const DataFileInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sst_csd_map_.MergeFrom(from.sst_csd_map_);
  // @@protoc_insertion_point(copy_constructor:StorageEngineInstance.DataFileInfo)
}

inline void DataFileInfo::SharedCtor() {
}

DataFileInfo::~DataFileInfo() {
  // @@protoc_insertion_point(destructor:StorageEngineInstance.DataFileInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DataFileInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DataFileInfo::ArenaDtor(void* object) {
  DataFileInfo* _this = reinterpret_cast< DataFileInfo* >(object);
  (void)_this;
  _this->sst_csd_map_. ~MapField();
}
inline void DataFileInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &DataFileInfo::ArenaDtor);
  }
}
void DataFileInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DataFileInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:StorageEngineInstance.DataFileInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sst_csd_map_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DataFileInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<string, .StorageEngineInstance.DataFileInfo.CSD> sst_csd_map = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&sst_csd_map_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DataFileInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:StorageEngineInstance.DataFileInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .StorageEngineInstance.DataFileInfo.CSD> sst_csd_map = 1;
  if (!this->_internal_sst_csd_map().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::StorageEngineInstance::DataFileInfo_CSD >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "StorageEngineInstance.DataFileInfo.SstCsdMapEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_sst_csd_map().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_sst_csd_map().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::StorageEngineInstance::DataFileInfo_CSD >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::StorageEngineInstance::DataFileInfo_CSD >::const_iterator
          it = this->_internal_sst_csd_map().begin();
          it != this->_internal_sst_csd_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = DataFileInfo_SstCsdMapEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::StorageEngineInstance::DataFileInfo_CSD >::const_iterator
          it = this->_internal_sst_csd_map().begin();
          it != this->_internal_sst_csd_map().end(); ++it) {
        target = DataFileInfo_SstCsdMapEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StorageEngineInstance.DataFileInfo)
  return target;
}

size_t DataFileInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StorageEngineInstance.DataFileInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .StorageEngineInstance.DataFileInfo.CSD> sst_csd_map = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_sst_csd_map_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::StorageEngineInstance::DataFileInfo_CSD >::const_iterator
      it = this->_internal_sst_csd_map().begin();
      it != this->_internal_sst_csd_map().end(); ++it) {
    total_size += DataFileInfo_SstCsdMapEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DataFileInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DataFileInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DataFileInfo::GetClassData() const { return &_class_data_; }

void DataFileInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DataFileInfo *>(to)->MergeFrom(
      static_cast<const DataFileInfo &>(from));
}


void DataFileInfo::MergeFrom(const DataFileInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:StorageEngineInstance.DataFileInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  sst_csd_map_.MergeFrom(from.sst_csd_map_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DataFileInfo::CopyFrom(const DataFileInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StorageEngineInstance.DataFileInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataFileInfo::IsInitialized() const {
  return true;
}

void DataFileInfo::InternalSwap(DataFileInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  sst_csd_map_.InternalSwap(&other->sst_csd_map_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DataFileInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_storage_5fengine_5finstance_2eproto_getter, &descriptor_table_storage_5fengine_5finstance_2eproto_once,
      file_level_metadata_storage_5fengine_5finstance_2eproto[22]);
}

// ===================================================================

class SSTList::_Internal {
 public:
};

SSTList::SSTList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  sst_list_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:StorageEngineInstance.SSTList)
}
SSTList::SSTList(const SSTList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      sst_list_(from.sst_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:StorageEngineInstance.SSTList)
}

inline void SSTList::SharedCtor() {
}

SSTList::~SSTList() {
  // @@protoc_insertion_point(destructor:StorageEngineInstance.SSTList)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SSTList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SSTList::ArenaDtor(void* object) {
  SSTList* _this = reinterpret_cast< SSTList* >(object);
  (void)_this;
}
void SSTList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SSTList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SSTList::Clear() {
// @@protoc_insertion_point(message_clear_start:StorageEngineInstance.SSTList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sst_list_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SSTList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string sst_list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_sst_list();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "StorageEngineInstance.SSTList.sst_list"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SSTList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:StorageEngineInstance.SSTList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string sst_list = 1;
  for (int i = 0, n = this->_internal_sst_list_size(); i < n; i++) {
    const auto& s = this->_internal_sst_list(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "StorageEngineInstance.SSTList.sst_list");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StorageEngineInstance.SSTList)
  return target;
}

size_t SSTList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StorageEngineInstance.SSTList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string sst_list = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(sst_list_.size());
  for (int i = 0, n = sst_list_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      sst_list_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SSTList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SSTList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SSTList::GetClassData() const { return &_class_data_; }

void SSTList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SSTList *>(to)->MergeFrom(
      static_cast<const SSTList &>(from));
}


void SSTList::MergeFrom(const SSTList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:StorageEngineInstance.SSTList)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  sst_list_.MergeFrom(from.sst_list_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SSTList::CopyFrom(const SSTList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StorageEngineInstance.SSTList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSTList::IsInitialized() const {
  return true;
}

void SSTList::InternalSwap(SSTList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  sst_list_.InternalSwap(&other->sst_list_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SSTList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_storage_5fengine_5finstance_2eproto_getter, &descriptor_table_storage_5fengine_5finstance_2eproto_once,
      file_level_metadata_storage_5fengine_5finstance_2eproto[23]);
}

// ===================================================================

SnippetMetaData_SstPbaMapEntry_DoNotUse::SnippetMetaData_SstPbaMapEntry_DoNotUse() {}
SnippetMetaData_SstPbaMapEntry_DoNotUse::SnippetMetaData_SstPbaMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void SnippetMetaData_SstPbaMapEntry_DoNotUse::MergeFrom(const SnippetMetaData_SstPbaMapEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata SnippetMetaData_SstPbaMapEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_storage_5fengine_5finstance_2eproto_getter, &descriptor_table_storage_5fengine_5finstance_2eproto_once,
      file_level_metadata_storage_5fengine_5finstance_2eproto[24]);
}

// ===================================================================

class SnippetMetaData::_Internal {
 public:
};

SnippetMetaData::SnippetMetaData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  sst_pba_map_(arena),
  wal_inserted_row_json_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:StorageEngineInstance.SnippetMetaData)
}
SnippetMetaData::SnippetMetaData(const SnippetMetaData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      wal_inserted_row_json_(from.wal_inserted_row_json_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sst_pba_map_.MergeFrom(from.sst_pba_map_);
  wal_deleted_key_json_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    wal_deleted_key_json_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_wal_deleted_key_json().empty()) {
    wal_deleted_key_json_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_wal_deleted_key_json(), 
      GetArenaForAllocation());
  }
  table_total_block_count_ = from.table_total_block_count_;
  // @@protoc_insertion_point(copy_constructor:StorageEngineInstance.SnippetMetaData)
}

inline void SnippetMetaData::SharedCtor() {
wal_deleted_key_json_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  wal_deleted_key_json_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
table_total_block_count_ = 0;
}

SnippetMetaData::~SnippetMetaData() {
  // @@protoc_insertion_point(destructor:StorageEngineInstance.SnippetMetaData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SnippetMetaData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  wal_deleted_key_json_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SnippetMetaData::ArenaDtor(void* object) {
  SnippetMetaData* _this = reinterpret_cast< SnippetMetaData* >(object);
  (void)_this;
  _this->sst_pba_map_. ~MapField();
}
inline void SnippetMetaData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &SnippetMetaData::ArenaDtor);
  }
}
void SnippetMetaData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SnippetMetaData::Clear() {
// @@protoc_insertion_point(message_clear_start:StorageEngineInstance.SnippetMetaData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sst_pba_map_.Clear();
  wal_inserted_row_json_.Clear();
  wal_deleted_key_json_.ClearToEmpty();
  table_total_block_count_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SnippetMetaData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<string, string> sst_pba_map = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&sst_pba_map_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int32 table_total_block_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          table_total_block_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string wal_deleted_key_json = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_wal_deleted_key_json();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "StorageEngineInstance.SnippetMetaData.wal_deleted_key_json"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string wal_inserted_row_json = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_wal_inserted_row_json();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "StorageEngineInstance.SnippetMetaData.wal_inserted_row_json"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SnippetMetaData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:StorageEngineInstance.SnippetMetaData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, string> sst_pba_map = 1;
  if (!this->_internal_sst_pba_map().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "StorageEngineInstance.SnippetMetaData.SstPbaMapEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "StorageEngineInstance.SnippetMetaData.SstPbaMapEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_sst_pba_map().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_sst_pba_map().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_sst_pba_map().begin();
          it != this->_internal_sst_pba_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = SnippetMetaData_SstPbaMapEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_sst_pba_map().begin();
          it != this->_internal_sst_pba_map().end(); ++it) {
        target = SnippetMetaData_SstPbaMapEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // int32 table_total_block_count = 2;
  if (this->_internal_table_total_block_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_table_total_block_count(), target);
  }

  // string wal_deleted_key_json = 3;
  if (!this->_internal_wal_deleted_key_json().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_wal_deleted_key_json().data(), static_cast<int>(this->_internal_wal_deleted_key_json().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "StorageEngineInstance.SnippetMetaData.wal_deleted_key_json");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_wal_deleted_key_json(), target);
  }

  // repeated string wal_inserted_row_json = 4;
  for (int i = 0, n = this->_internal_wal_inserted_row_json_size(); i < n; i++) {
    const auto& s = this->_internal_wal_inserted_row_json(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "StorageEngineInstance.SnippetMetaData.wal_inserted_row_json");
    target = stream->WriteString(4, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StorageEngineInstance.SnippetMetaData)
  return target;
}

size_t SnippetMetaData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StorageEngineInstance.SnippetMetaData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> sst_pba_map = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_sst_pba_map_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_sst_pba_map().begin();
      it != this->_internal_sst_pba_map().end(); ++it) {
    total_size += SnippetMetaData_SstPbaMapEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated string wal_inserted_row_json = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(wal_inserted_row_json_.size());
  for (int i = 0, n = wal_inserted_row_json_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      wal_inserted_row_json_.Get(i));
  }

  // string wal_deleted_key_json = 3;
  if (!this->_internal_wal_deleted_key_json().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_wal_deleted_key_json());
  }

  // int32 table_total_block_count = 2;
  if (this->_internal_table_total_block_count() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_table_total_block_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SnippetMetaData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SnippetMetaData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SnippetMetaData::GetClassData() const { return &_class_data_; }

void SnippetMetaData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SnippetMetaData *>(to)->MergeFrom(
      static_cast<const SnippetMetaData &>(from));
}


void SnippetMetaData::MergeFrom(const SnippetMetaData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:StorageEngineInstance.SnippetMetaData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  sst_pba_map_.MergeFrom(from.sst_pba_map_);
  wal_inserted_row_json_.MergeFrom(from.wal_inserted_row_json_);
  if (!from._internal_wal_deleted_key_json().empty()) {
    _internal_set_wal_deleted_key_json(from._internal_wal_deleted_key_json());
  }
  if (from._internal_table_total_block_count() != 0) {
    _internal_set_table_total_block_count(from._internal_table_total_block_count());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SnippetMetaData::CopyFrom(const SnippetMetaData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StorageEngineInstance.SnippetMetaData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnippetMetaData::IsInitialized() const {
  return true;
}

void SnippetMetaData::InternalSwap(SnippetMetaData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  sst_pba_map_.InternalSwap(&other->sst_pba_map_);
  wal_inserted_row_json_.InternalSwap(&other->wal_inserted_row_json_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &wal_deleted_key_json_, lhs_arena,
      &other->wal_deleted_key_json_, rhs_arena
  );
  swap(table_total_block_count_, other->table_total_block_count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SnippetMetaData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_storage_5fengine_5finstance_2eproto_getter, &descriptor_table_storage_5fengine_5finstance_2eproto_once,
      file_level_metadata_storage_5fengine_5finstance_2eproto[25]);
}

// ===================================================================

class CSDMetricList_CSDMetric::_Internal {
 public:
};

CSDMetricList_CSDMetric::CSDMetricList_CSDMetric(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:StorageEngineInstance.CSDMetricList.CSDMetric)
}
CSDMetricList_CSDMetric::CSDMetricList_CSDMetric(const CSDMetricList_CSDMetric& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ip().empty()) {
    ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ip(), 
      GetArenaForAllocation());
  }
  ::memcpy(&cpu_usage_, &from.cpu_usage_,
    static_cast<size_t>(reinterpret_cast<char*>(&score_) -
    reinterpret_cast<char*>(&cpu_usage_)) + sizeof(score_));
  // @@protoc_insertion_point(copy_constructor:StorageEngineInstance.CSDMetricList.CSDMetric)
}

inline void CSDMetricList_CSDMetric::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&cpu_usage_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&score_) -
    reinterpret_cast<char*>(&cpu_usage_)) + sizeof(score_));
}

CSDMetricList_CSDMetric::~CSDMetricList_CSDMetric() {
  // @@protoc_insertion_point(destructor:StorageEngineInstance.CSDMetricList.CSDMetric)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CSDMetricList_CSDMetric::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CSDMetricList_CSDMetric::ArenaDtor(void* object) {
  CSDMetricList_CSDMetric* _this = reinterpret_cast< CSDMetricList_CSDMetric* >(object);
  (void)_this;
}
void CSDMetricList_CSDMetric::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSDMetricList_CSDMetric::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSDMetricList_CSDMetric::Clear() {
// @@protoc_insertion_point(message_clear_start:StorageEngineInstance.CSDMetricList.CSDMetric)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  ip_.ClearToEmpty();
  ::memset(&cpu_usage_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&score_) -
      reinterpret_cast<char*>(&cpu_usage_)) + sizeof(score_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSDMetricList_CSDMetric::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "StorageEngineInstance.CSDMetricList.CSDMetric.id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string ip = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "StorageEngineInstance.CSDMetricList.CSDMetric.ip"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float cpu_usage = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          cpu_usage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float memory_usage = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          memory_usage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float disk_usage = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          disk_usage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float network = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          network_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // int32 working_block_count = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          working_block_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float score = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 69)) {
          score_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSDMetricList_CSDMetric::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:StorageEngineInstance.CSDMetricList.CSDMetric)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "StorageEngineInstance.CSDMetricList.CSDMetric.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string ip = 2;
  if (!this->_internal_ip().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ip().data(), static_cast<int>(this->_internal_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "StorageEngineInstance.CSDMetricList.CSDMetric.ip");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_ip(), target);
  }

  // float cpu_usage = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_cpu_usage = this->_internal_cpu_usage();
  uint32_t raw_cpu_usage;
  memcpy(&raw_cpu_usage, &tmp_cpu_usage, sizeof(tmp_cpu_usage));
  if (raw_cpu_usage != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_cpu_usage(), target);
  }

  // float memory_usage = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_memory_usage = this->_internal_memory_usage();
  uint32_t raw_memory_usage;
  memcpy(&raw_memory_usage, &tmp_memory_usage, sizeof(tmp_memory_usage));
  if (raw_memory_usage != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_memory_usage(), target);
  }

  // float disk_usage = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_disk_usage = this->_internal_disk_usage();
  uint32_t raw_disk_usage;
  memcpy(&raw_disk_usage, &tmp_disk_usage, sizeof(tmp_disk_usage));
  if (raw_disk_usage != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_disk_usage(), target);
  }

  // float network = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_network = this->_internal_network();
  uint32_t raw_network;
  memcpy(&raw_network, &tmp_network, sizeof(tmp_network));
  if (raw_network != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_network(), target);
  }

  // int32 working_block_count = 7;
  if (this->_internal_working_block_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_working_block_count(), target);
  }

  // float score = 8;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_score = this->_internal_score();
  uint32_t raw_score;
  memcpy(&raw_score, &tmp_score, sizeof(tmp_score));
  if (raw_score != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_score(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StorageEngineInstance.CSDMetricList.CSDMetric)
  return target;
}

size_t CSDMetricList_CSDMetric::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StorageEngineInstance.CSDMetricList.CSDMetric)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string ip = 2;
  if (!this->_internal_ip().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip());
  }

  // float cpu_usage = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_cpu_usage = this->_internal_cpu_usage();
  uint32_t raw_cpu_usage;
  memcpy(&raw_cpu_usage, &tmp_cpu_usage, sizeof(tmp_cpu_usage));
  if (raw_cpu_usage != 0) {
    total_size += 1 + 4;
  }

  // float memory_usage = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_memory_usage = this->_internal_memory_usage();
  uint32_t raw_memory_usage;
  memcpy(&raw_memory_usage, &tmp_memory_usage, sizeof(tmp_memory_usage));
  if (raw_memory_usage != 0) {
    total_size += 1 + 4;
  }

  // float disk_usage = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_disk_usage = this->_internal_disk_usage();
  uint32_t raw_disk_usage;
  memcpy(&raw_disk_usage, &tmp_disk_usage, sizeof(tmp_disk_usage));
  if (raw_disk_usage != 0) {
    total_size += 1 + 4;
  }

  // float network = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_network = this->_internal_network();
  uint32_t raw_network;
  memcpy(&raw_network, &tmp_network, sizeof(tmp_network));
  if (raw_network != 0) {
    total_size += 1 + 4;
  }

  // int32 working_block_count = 7;
  if (this->_internal_working_block_count() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_working_block_count());
  }

  // float score = 8;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_score = this->_internal_score();
  uint32_t raw_score;
  memcpy(&raw_score, &tmp_score, sizeof(tmp_score));
  if (raw_score != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSDMetricList_CSDMetric::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CSDMetricList_CSDMetric::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSDMetricList_CSDMetric::GetClassData() const { return &_class_data_; }

void CSDMetricList_CSDMetric::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CSDMetricList_CSDMetric *>(to)->MergeFrom(
      static_cast<const CSDMetricList_CSDMetric &>(from));
}


void CSDMetricList_CSDMetric::MergeFrom(const CSDMetricList_CSDMetric& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:StorageEngineInstance.CSDMetricList.CSDMetric)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (!from._internal_ip().empty()) {
    _internal_set_ip(from._internal_ip());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_cpu_usage = from._internal_cpu_usage();
  uint32_t raw_cpu_usage;
  memcpy(&raw_cpu_usage, &tmp_cpu_usage, sizeof(tmp_cpu_usage));
  if (raw_cpu_usage != 0) {
    _internal_set_cpu_usage(from._internal_cpu_usage());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_memory_usage = from._internal_memory_usage();
  uint32_t raw_memory_usage;
  memcpy(&raw_memory_usage, &tmp_memory_usage, sizeof(tmp_memory_usage));
  if (raw_memory_usage != 0) {
    _internal_set_memory_usage(from._internal_memory_usage());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_disk_usage = from._internal_disk_usage();
  uint32_t raw_disk_usage;
  memcpy(&raw_disk_usage, &tmp_disk_usage, sizeof(tmp_disk_usage));
  if (raw_disk_usage != 0) {
    _internal_set_disk_usage(from._internal_disk_usage());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_network = from._internal_network();
  uint32_t raw_network;
  memcpy(&raw_network, &tmp_network, sizeof(tmp_network));
  if (raw_network != 0) {
    _internal_set_network(from._internal_network());
  }
  if (from._internal_working_block_count() != 0) {
    _internal_set_working_block_count(from._internal_working_block_count());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_score = from._internal_score();
  uint32_t raw_score;
  memcpy(&raw_score, &tmp_score, sizeof(tmp_score));
  if (raw_score != 0) {
    _internal_set_score(from._internal_score());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSDMetricList_CSDMetric::CopyFrom(const CSDMetricList_CSDMetric& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StorageEngineInstance.CSDMetricList.CSDMetric)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSDMetricList_CSDMetric::IsInitialized() const {
  return true;
}

void CSDMetricList_CSDMetric::InternalSwap(CSDMetricList_CSDMetric* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ip_, lhs_arena,
      &other->ip_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSDMetricList_CSDMetric, score_)
      + sizeof(CSDMetricList_CSDMetric::score_)
      - PROTOBUF_FIELD_OFFSET(CSDMetricList_CSDMetric, cpu_usage_)>(
          reinterpret_cast<char*>(&cpu_usage_),
          reinterpret_cast<char*>(&other->cpu_usage_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSDMetricList_CSDMetric::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_storage_5fengine_5finstance_2eproto_getter, &descriptor_table_storage_5fengine_5finstance_2eproto_once,
      file_level_metadata_storage_5fengine_5finstance_2eproto[26]);
}

// ===================================================================

class CSDMetricList::_Internal {
 public:
};

CSDMetricList::CSDMetricList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  csd_metric_list_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:StorageEngineInstance.CSDMetricList)
}
CSDMetricList::CSDMetricList(const CSDMetricList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      csd_metric_list_(from.csd_metric_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:StorageEngineInstance.CSDMetricList)
}

inline void CSDMetricList::SharedCtor() {
}

CSDMetricList::~CSDMetricList() {
  // @@protoc_insertion_point(destructor:StorageEngineInstance.CSDMetricList)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CSDMetricList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CSDMetricList::ArenaDtor(void* object) {
  CSDMetricList* _this = reinterpret_cast< CSDMetricList* >(object);
  (void)_this;
}
void CSDMetricList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSDMetricList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSDMetricList::Clear() {
// @@protoc_insertion_point(message_clear_start:StorageEngineInstance.CSDMetricList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  csd_metric_list_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSDMetricList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .StorageEngineInstance.CSDMetricList.CSDMetric csd_metric_list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_csd_metric_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSDMetricList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:StorageEngineInstance.CSDMetricList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .StorageEngineInstance.CSDMetricList.CSDMetric csd_metric_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_csd_metric_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_csd_metric_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StorageEngineInstance.CSDMetricList)
  return target;
}

size_t CSDMetricList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StorageEngineInstance.CSDMetricList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .StorageEngineInstance.CSDMetricList.CSDMetric csd_metric_list = 1;
  total_size += 1UL * this->_internal_csd_metric_list_size();
  for (const auto& msg : this->csd_metric_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSDMetricList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CSDMetricList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSDMetricList::GetClassData() const { return &_class_data_; }

void CSDMetricList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CSDMetricList *>(to)->MergeFrom(
      static_cast<const CSDMetricList &>(from));
}


void CSDMetricList::MergeFrom(const CSDMetricList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:StorageEngineInstance.CSDMetricList)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  csd_metric_list_.MergeFrom(from.csd_metric_list_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSDMetricList::CopyFrom(const CSDMetricList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StorageEngineInstance.CSDMetricList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSDMetricList::IsInitialized() const {
  return true;
}

void CSDMetricList::InternalSwap(CSDMetricList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  csd_metric_list_.InternalSwap(&other->csd_metric_list_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSDMetricList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_storage_5fengine_5finstance_2eproto_getter, &descriptor_table_storage_5fengine_5finstance_2eproto_once,
      file_level_metadata_storage_5fengine_5finstance_2eproto[27]);
}

// ===================================================================

LBA2PBARequest_SstCsdMapEntry_DoNotUse::LBA2PBARequest_SstCsdMapEntry_DoNotUse() {}
LBA2PBARequest_SstCsdMapEntry_DoNotUse::LBA2PBARequest_SstCsdMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void LBA2PBARequest_SstCsdMapEntry_DoNotUse::MergeFrom(const LBA2PBARequest_SstCsdMapEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata LBA2PBARequest_SstCsdMapEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_storage_5fengine_5finstance_2eproto_getter, &descriptor_table_storage_5fengine_5finstance_2eproto_once,
      file_level_metadata_storage_5fengine_5finstance_2eproto[28]);
}

// ===================================================================

class LBA2PBARequest::_Internal {
 public:
};

LBA2PBARequest::LBA2PBARequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  sst_csd_map_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:StorageEngineInstance.LBA2PBARequest)
}
LBA2PBARequest::LBA2PBARequest(const LBA2PBARequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sst_csd_map_.MergeFrom(from.sst_csd_map_);
  table_index_number_ = from.table_index_number_;
  // @@protoc_insertion_point(copy_constructor:StorageEngineInstance.LBA2PBARequest)
}

inline void LBA2PBARequest::SharedCtor() {
table_index_number_ = 0;
}

LBA2PBARequest::~LBA2PBARequest() {
  // @@protoc_insertion_point(destructor:StorageEngineInstance.LBA2PBARequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LBA2PBARequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LBA2PBARequest::ArenaDtor(void* object) {
  LBA2PBARequest* _this = reinterpret_cast< LBA2PBARequest* >(object);
  (void)_this;
  _this->sst_csd_map_. ~MapField();
}
inline void LBA2PBARequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &LBA2PBARequest::ArenaDtor);
  }
}
void LBA2PBARequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LBA2PBARequest::Clear() {
// @@protoc_insertion_point(message_clear_start:StorageEngineInstance.LBA2PBARequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sst_csd_map_.Clear();
  table_index_number_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LBA2PBARequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 table_index_number = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          table_index_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<string, string> sst_csd_map = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&sst_csd_map_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LBA2PBARequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:StorageEngineInstance.LBA2PBARequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 table_index_number = 1;
  if (this->_internal_table_index_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_table_index_number(), target);
  }

  // map<string, string> sst_csd_map = 2;
  if (!this->_internal_sst_csd_map().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "StorageEngineInstance.LBA2PBARequest.SstCsdMapEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "StorageEngineInstance.LBA2PBARequest.SstCsdMapEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_sst_csd_map().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_sst_csd_map().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_sst_csd_map().begin();
          it != this->_internal_sst_csd_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = LBA2PBARequest_SstCsdMapEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_sst_csd_map().begin();
          it != this->_internal_sst_csd_map().end(); ++it) {
        target = LBA2PBARequest_SstCsdMapEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StorageEngineInstance.LBA2PBARequest)
  return target;
}

size_t LBA2PBARequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StorageEngineInstance.LBA2PBARequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> sst_csd_map = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_sst_csd_map_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_sst_csd_map().begin();
      it != this->_internal_sst_csd_map().end(); ++it) {
    total_size += LBA2PBARequest_SstCsdMapEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // int32 table_index_number = 1;
  if (this->_internal_table_index_number() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_table_index_number());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LBA2PBARequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LBA2PBARequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LBA2PBARequest::GetClassData() const { return &_class_data_; }

void LBA2PBARequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LBA2PBARequest *>(to)->MergeFrom(
      static_cast<const LBA2PBARequest &>(from));
}


void LBA2PBARequest::MergeFrom(const LBA2PBARequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:StorageEngineInstance.LBA2PBARequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  sst_csd_map_.MergeFrom(from.sst_csd_map_);
  if (from._internal_table_index_number() != 0) {
    _internal_set_table_index_number(from._internal_table_index_number());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LBA2PBARequest::CopyFrom(const LBA2PBARequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StorageEngineInstance.LBA2PBARequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LBA2PBARequest::IsInitialized() const {
  return true;
}

void LBA2PBARequest::InternalSwap(LBA2PBARequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  sst_csd_map_.InternalSwap(&other->sst_csd_map_);
  swap(table_index_number_, other->table_index_number_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LBA2PBARequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_storage_5fengine_5finstance_2eproto_getter, &descriptor_table_storage_5fengine_5finstance_2eproto_once,
      file_level_metadata_storage_5fengine_5finstance_2eproto[29]);
}

// ===================================================================

class LBA2PBAResponse_Chunk::_Internal {
 public:
};

LBA2PBAResponse_Chunk::LBA2PBAResponse_Chunk(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:StorageEngineInstance.LBA2PBAResponse.Chunk)
}
LBA2PBAResponse_Chunk::LBA2PBAResponse_Chunk(const LBA2PBAResponse_Chunk& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&offset_, &from.offset_,
    static_cast<size_t>(reinterpret_cast<char*>(&length_) -
    reinterpret_cast<char*>(&offset_)) + sizeof(length_));
  // @@protoc_insertion_point(copy_constructor:StorageEngineInstance.LBA2PBAResponse.Chunk)
}

inline void LBA2PBAResponse_Chunk::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&offset_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&length_) -
    reinterpret_cast<char*>(&offset_)) + sizeof(length_));
}

LBA2PBAResponse_Chunk::~LBA2PBAResponse_Chunk() {
  // @@protoc_insertion_point(destructor:StorageEngineInstance.LBA2PBAResponse.Chunk)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LBA2PBAResponse_Chunk::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LBA2PBAResponse_Chunk::ArenaDtor(void* object) {
  LBA2PBAResponse_Chunk* _this = reinterpret_cast< LBA2PBAResponse_Chunk* >(object);
  (void)_this;
}
void LBA2PBAResponse_Chunk::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LBA2PBAResponse_Chunk::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LBA2PBAResponse_Chunk::Clear() {
// @@protoc_insertion_point(message_clear_start:StorageEngineInstance.LBA2PBAResponse.Chunk)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&offset_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&length_) -
      reinterpret_cast<char*>(&offset_)) + sizeof(length_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LBA2PBAResponse_Chunk::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 offset = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 length = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LBA2PBAResponse_Chunk::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:StorageEngineInstance.LBA2PBAResponse.Chunk)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 offset = 1;
  if (this->_internal_offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_offset(), target);
  }

  // int32 length = 2;
  if (this->_internal_length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_length(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StorageEngineInstance.LBA2PBAResponse.Chunk)
  return target;
}

size_t LBA2PBAResponse_Chunk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StorageEngineInstance.LBA2PBAResponse.Chunk)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 offset = 1;
  if (this->_internal_offset() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_offset());
  }

  // int32 length = 2;
  if (this->_internal_length() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_length());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LBA2PBAResponse_Chunk::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LBA2PBAResponse_Chunk::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LBA2PBAResponse_Chunk::GetClassData() const { return &_class_data_; }

void LBA2PBAResponse_Chunk::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LBA2PBAResponse_Chunk *>(to)->MergeFrom(
      static_cast<const LBA2PBAResponse_Chunk &>(from));
}


void LBA2PBAResponse_Chunk::MergeFrom(const LBA2PBAResponse_Chunk& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:StorageEngineInstance.LBA2PBAResponse.Chunk)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_offset() != 0) {
    _internal_set_offset(from._internal_offset());
  }
  if (from._internal_length() != 0) {
    _internal_set_length(from._internal_length());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LBA2PBAResponse_Chunk::CopyFrom(const LBA2PBAResponse_Chunk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StorageEngineInstance.LBA2PBAResponse.Chunk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LBA2PBAResponse_Chunk::IsInitialized() const {
  return true;
}

void LBA2PBAResponse_Chunk::InternalSwap(LBA2PBAResponse_Chunk* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LBA2PBAResponse_Chunk, length_)
      + sizeof(LBA2PBAResponse_Chunk::length_)
      - PROTOBUF_FIELD_OFFSET(LBA2PBAResponse_Chunk, offset_)>(
          reinterpret_cast<char*>(&offset_),
          reinterpret_cast<char*>(&other->offset_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LBA2PBAResponse_Chunk::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_storage_5fengine_5finstance_2eproto_getter, &descriptor_table_storage_5fengine_5finstance_2eproto_once,
      file_level_metadata_storage_5fengine_5finstance_2eproto[30]);
}

// ===================================================================

class LBA2PBAResponse_PBA::_Internal {
 public:
};

LBA2PBAResponse_PBA::LBA2PBAResponse_PBA(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  chunks_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:StorageEngineInstance.LBA2PBAResponse.PBA)
}
LBA2PBAResponse_PBA::LBA2PBAResponse_PBA(const LBA2PBAResponse_PBA& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      chunks_(from.chunks_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  csd_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    csd_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_csd_id().empty()) {
    csd_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_csd_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:StorageEngineInstance.LBA2PBAResponse.PBA)
}

inline void LBA2PBAResponse_PBA::SharedCtor() {
csd_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  csd_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LBA2PBAResponse_PBA::~LBA2PBAResponse_PBA() {
  // @@protoc_insertion_point(destructor:StorageEngineInstance.LBA2PBAResponse.PBA)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LBA2PBAResponse_PBA::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  csd_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LBA2PBAResponse_PBA::ArenaDtor(void* object) {
  LBA2PBAResponse_PBA* _this = reinterpret_cast< LBA2PBAResponse_PBA* >(object);
  (void)_this;
}
void LBA2PBAResponse_PBA::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LBA2PBAResponse_PBA::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LBA2PBAResponse_PBA::Clear() {
// @@protoc_insertion_point(message_clear_start:StorageEngineInstance.LBA2PBAResponse.PBA)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chunks_.Clear();
  csd_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LBA2PBAResponse_PBA::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string csd_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_csd_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "StorageEngineInstance.LBA2PBAResponse.PBA.csd_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .StorageEngineInstance.LBA2PBAResponse.Chunk chunks = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_chunks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LBA2PBAResponse_PBA::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:StorageEngineInstance.LBA2PBAResponse.PBA)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string csd_id = 1;
  if (!this->_internal_csd_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_csd_id().data(), static_cast<int>(this->_internal_csd_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "StorageEngineInstance.LBA2PBAResponse.PBA.csd_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_csd_id(), target);
  }

  // repeated .StorageEngineInstance.LBA2PBAResponse.Chunk chunks = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_chunks_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_chunks(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StorageEngineInstance.LBA2PBAResponse.PBA)
  return target;
}

size_t LBA2PBAResponse_PBA::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StorageEngineInstance.LBA2PBAResponse.PBA)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .StorageEngineInstance.LBA2PBAResponse.Chunk chunks = 2;
  total_size += 1UL * this->_internal_chunks_size();
  for (const auto& msg : this->chunks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string csd_id = 1;
  if (!this->_internal_csd_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_csd_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LBA2PBAResponse_PBA::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LBA2PBAResponse_PBA::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LBA2PBAResponse_PBA::GetClassData() const { return &_class_data_; }

void LBA2PBAResponse_PBA::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LBA2PBAResponse_PBA *>(to)->MergeFrom(
      static_cast<const LBA2PBAResponse_PBA &>(from));
}


void LBA2PBAResponse_PBA::MergeFrom(const LBA2PBAResponse_PBA& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:StorageEngineInstance.LBA2PBAResponse.PBA)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  chunks_.MergeFrom(from.chunks_);
  if (!from._internal_csd_id().empty()) {
    _internal_set_csd_id(from._internal_csd_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LBA2PBAResponse_PBA::CopyFrom(const LBA2PBAResponse_PBA& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StorageEngineInstance.LBA2PBAResponse.PBA)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LBA2PBAResponse_PBA::IsInitialized() const {
  return true;
}

void LBA2PBAResponse_PBA::InternalSwap(LBA2PBAResponse_PBA* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  chunks_.InternalSwap(&other->chunks_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &csd_id_, lhs_arena,
      &other->csd_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata LBA2PBAResponse_PBA::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_storage_5fengine_5finstance_2eproto_getter, &descriptor_table_storage_5fengine_5finstance_2eproto_once,
      file_level_metadata_storage_5fengine_5finstance_2eproto[31]);
}

// ===================================================================

LBA2PBAResponse_SstPbaMapEntry_DoNotUse::LBA2PBAResponse_SstPbaMapEntry_DoNotUse() {}
LBA2PBAResponse_SstPbaMapEntry_DoNotUse::LBA2PBAResponse_SstPbaMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void LBA2PBAResponse_SstPbaMapEntry_DoNotUse::MergeFrom(const LBA2PBAResponse_SstPbaMapEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata LBA2PBAResponse_SstPbaMapEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_storage_5fengine_5finstance_2eproto_getter, &descriptor_table_storage_5fengine_5finstance_2eproto_once,
      file_level_metadata_storage_5fengine_5finstance_2eproto[32]);
}

// ===================================================================

class LBA2PBAResponse::_Internal {
 public:
};

LBA2PBAResponse::LBA2PBAResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  sst_pba_map_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:StorageEngineInstance.LBA2PBAResponse)
}
LBA2PBAResponse::LBA2PBAResponse(const LBA2PBAResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sst_pba_map_.MergeFrom(from.sst_pba_map_);
  // @@protoc_insertion_point(copy_constructor:StorageEngineInstance.LBA2PBAResponse)
}

inline void LBA2PBAResponse::SharedCtor() {
}

LBA2PBAResponse::~LBA2PBAResponse() {
  // @@protoc_insertion_point(destructor:StorageEngineInstance.LBA2PBAResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LBA2PBAResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LBA2PBAResponse::ArenaDtor(void* object) {
  LBA2PBAResponse* _this = reinterpret_cast< LBA2PBAResponse* >(object);
  (void)_this;
  _this->sst_pba_map_. ~MapField();
}
inline void LBA2PBAResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &LBA2PBAResponse::ArenaDtor);
  }
}
void LBA2PBAResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LBA2PBAResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:StorageEngineInstance.LBA2PBAResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sst_pba_map_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LBA2PBAResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<string, .StorageEngineInstance.LBA2PBAResponse.PBA> sst_pba_map = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&sst_pba_map_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LBA2PBAResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:StorageEngineInstance.LBA2PBAResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .StorageEngineInstance.LBA2PBAResponse.PBA> sst_pba_map = 1;
  if (!this->_internal_sst_pba_map().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::StorageEngineInstance::LBA2PBAResponse_PBA >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "StorageEngineInstance.LBA2PBAResponse.SstPbaMapEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_sst_pba_map().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_sst_pba_map().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::StorageEngineInstance::LBA2PBAResponse_PBA >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::StorageEngineInstance::LBA2PBAResponse_PBA >::const_iterator
          it = this->_internal_sst_pba_map().begin();
          it != this->_internal_sst_pba_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = LBA2PBAResponse_SstPbaMapEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::StorageEngineInstance::LBA2PBAResponse_PBA >::const_iterator
          it = this->_internal_sst_pba_map().begin();
          it != this->_internal_sst_pba_map().end(); ++it) {
        target = LBA2PBAResponse_SstPbaMapEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StorageEngineInstance.LBA2PBAResponse)
  return target;
}

size_t LBA2PBAResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StorageEngineInstance.LBA2PBAResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .StorageEngineInstance.LBA2PBAResponse.PBA> sst_pba_map = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_sst_pba_map_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::StorageEngineInstance::LBA2PBAResponse_PBA >::const_iterator
      it = this->_internal_sst_pba_map().begin();
      it != this->_internal_sst_pba_map().end(); ++it) {
    total_size += LBA2PBAResponse_SstPbaMapEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LBA2PBAResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LBA2PBAResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LBA2PBAResponse::GetClassData() const { return &_class_data_; }

void LBA2PBAResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LBA2PBAResponse *>(to)->MergeFrom(
      static_cast<const LBA2PBAResponse &>(from));
}


void LBA2PBAResponse::MergeFrom(const LBA2PBAResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:StorageEngineInstance.LBA2PBAResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  sst_pba_map_.MergeFrom(from.sst_pba_map_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LBA2PBAResponse::CopyFrom(const LBA2PBAResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StorageEngineInstance.LBA2PBAResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LBA2PBAResponse::IsInitialized() const {
  return true;
}

void LBA2PBAResponse::InternalSwap(LBA2PBAResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  sst_pba_map_.InternalSwap(&other->sst_pba_map_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LBA2PBAResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_storage_5fengine_5finstance_2eproto_getter, &descriptor_table_storage_5fengine_5finstance_2eproto_once,
      file_level_metadata_storage_5fengine_5finstance_2eproto[33]);
}

// ===================================================================

class WALRequest::_Internal {
 public:
};

WALRequest::WALRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:StorageEngineInstance.WALRequest)
}
WALRequest::WALRequest(const WALRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  db_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    db_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_db_name().empty()) {
    db_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_db_name(), 
      GetArenaForAllocation());
  }
  table_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    table_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_table_name().empty()) {
    table_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_table_name(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:StorageEngineInstance.WALRequest)
}

inline void WALRequest::SharedCtor() {
db_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  db_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
table_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  table_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

WALRequest::~WALRequest() {
  // @@protoc_insertion_point(destructor:StorageEngineInstance.WALRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void WALRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  db_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  table_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void WALRequest::ArenaDtor(void* object) {
  WALRequest* _this = reinterpret_cast< WALRequest* >(object);
  (void)_this;
}
void WALRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WALRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WALRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:StorageEngineInstance.WALRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  db_name_.ClearToEmpty();
  table_name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WALRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string db_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_db_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "StorageEngineInstance.WALRequest.db_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string table_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_table_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "StorageEngineInstance.WALRequest.table_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WALRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:StorageEngineInstance.WALRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string db_name = 1;
  if (!this->_internal_db_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_db_name().data(), static_cast<int>(this->_internal_db_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "StorageEngineInstance.WALRequest.db_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_db_name(), target);
  }

  // string table_name = 2;
  if (!this->_internal_table_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_table_name().data(), static_cast<int>(this->_internal_table_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "StorageEngineInstance.WALRequest.table_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_table_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StorageEngineInstance.WALRequest)
  return target;
}

size_t WALRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StorageEngineInstance.WALRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string db_name = 1;
  if (!this->_internal_db_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_db_name());
  }

  // string table_name = 2;
  if (!this->_internal_table_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_table_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WALRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    WALRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WALRequest::GetClassData() const { return &_class_data_; }

void WALRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<WALRequest *>(to)->MergeFrom(
      static_cast<const WALRequest &>(from));
}


void WALRequest::MergeFrom(const WALRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:StorageEngineInstance.WALRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_db_name().empty()) {
    _internal_set_db_name(from._internal_db_name());
  }
  if (!from._internal_table_name().empty()) {
    _internal_set_table_name(from._internal_table_name());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WALRequest::CopyFrom(const WALRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StorageEngineInstance.WALRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WALRequest::IsInitialized() const {
  return true;
}

void WALRequest::InternalSwap(WALRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &db_name_, lhs_arena,
      &other->db_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &table_name_, lhs_arena,
      &other->table_name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata WALRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_storage_5fengine_5finstance_2eproto_getter, &descriptor_table_storage_5fengine_5finstance_2eproto_once,
      file_level_metadata_storage_5fengine_5finstance_2eproto[34]);
}

// ===================================================================

class WALResponse::_Internal {
 public:
};

WALResponse::WALResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  deleted_key_(arena),
  inserted_key_(arena),
  inserted_value_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:StorageEngineInstance.WALResponse)
}
WALResponse::WALResponse(const WALResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      deleted_key_(from.deleted_key_),
      inserted_key_(from.inserted_key_),
      inserted_value_(from.inserted_value_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:StorageEngineInstance.WALResponse)
}

inline void WALResponse::SharedCtor() {
}

WALResponse::~WALResponse() {
  // @@protoc_insertion_point(destructor:StorageEngineInstance.WALResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void WALResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void WALResponse::ArenaDtor(void* object) {
  WALResponse* _this = reinterpret_cast< WALResponse* >(object);
  (void)_this;
}
void WALResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WALResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WALResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:StorageEngineInstance.WALResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  deleted_key_.Clear();
  inserted_key_.Clear();
  inserted_value_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WALResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string deleted_key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_deleted_key();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "StorageEngineInstance.WALResponse.deleted_key"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string inserted_key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_inserted_key();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "StorageEngineInstance.WALResponse.inserted_key"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string inserted_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_inserted_value();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "StorageEngineInstance.WALResponse.inserted_value"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WALResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:StorageEngineInstance.WALResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string deleted_key = 1;
  for (int i = 0, n = this->_internal_deleted_key_size(); i < n; i++) {
    const auto& s = this->_internal_deleted_key(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "StorageEngineInstance.WALResponse.deleted_key");
    target = stream->WriteString(1, s, target);
  }

  // repeated string inserted_key = 2;
  for (int i = 0, n = this->_internal_inserted_key_size(); i < n; i++) {
    const auto& s = this->_internal_inserted_key(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "StorageEngineInstance.WALResponse.inserted_key");
    target = stream->WriteString(2, s, target);
  }

  // repeated string inserted_value = 3;
  for (int i = 0, n = this->_internal_inserted_value_size(); i < n; i++) {
    const auto& s = this->_internal_inserted_value(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "StorageEngineInstance.WALResponse.inserted_value");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StorageEngineInstance.WALResponse)
  return target;
}

size_t WALResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StorageEngineInstance.WALResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string deleted_key = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(deleted_key_.size());
  for (int i = 0, n = deleted_key_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      deleted_key_.Get(i));
  }

  // repeated string inserted_key = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(inserted_key_.size());
  for (int i = 0, n = inserted_key_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      inserted_key_.Get(i));
  }

  // repeated string inserted_value = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(inserted_value_.size());
  for (int i = 0, n = inserted_value_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      inserted_value_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WALResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    WALResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WALResponse::GetClassData() const { return &_class_data_; }

void WALResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<WALResponse *>(to)->MergeFrom(
      static_cast<const WALResponse &>(from));
}


void WALResponse::MergeFrom(const WALResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:StorageEngineInstance.WALResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  deleted_key_.MergeFrom(from.deleted_key_);
  inserted_key_.MergeFrom(from.inserted_key_);
  inserted_value_.MergeFrom(from.inserted_value_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WALResponse::CopyFrom(const WALResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StorageEngineInstance.WALResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WALResponse::IsInitialized() const {
  return true;
}

void WALResponse::InternalSwap(WALResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  deleted_key_.InternalSwap(&other->deleted_key_);
  inserted_key_.InternalSwap(&other->inserted_key_);
  inserted_value_.InternalSwap(&other->inserted_value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WALResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_storage_5fengine_5finstance_2eproto_getter, &descriptor_table_storage_5fengine_5finstance_2eproto_once,
      file_level_metadata_storage_5fengine_5finstance_2eproto[35]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace StorageEngineInstance
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::StorageEngineInstance::SnippetRequest* Arena::CreateMaybeMessage< ::StorageEngineInstance::SnippetRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::StorageEngineInstance::SnippetRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::StorageEngineInstance::Snippet_Filter_FilterValue* Arena::CreateMaybeMessage< ::StorageEngineInstance::Snippet_Filter_FilterValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::StorageEngineInstance::Snippet_Filter_FilterValue >(arena);
}
template<> PROTOBUF_NOINLINE ::StorageEngineInstance::Snippet_Filter* Arena::CreateMaybeMessage< ::StorageEngineInstance::Snippet_Filter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::StorageEngineInstance::Snippet_Filter >(arena);
}
template<> PROTOBUF_NOINLINE ::StorageEngineInstance::Snippet_Projection* Arena::CreateMaybeMessage< ::StorageEngineInstance::Snippet_Projection >(Arena* arena) {
  return Arena::CreateMessageInternal< ::StorageEngineInstance::Snippet_Projection >(arena);
}
template<> PROTOBUF_NOINLINE ::StorageEngineInstance::Snippet_Order* Arena::CreateMaybeMessage< ::StorageEngineInstance::Snippet_Order >(Arena* arena) {
  return Arena::CreateMessageInternal< ::StorageEngineInstance::Snippet_Order >(arena);
}
template<> PROTOBUF_NOINLINE ::StorageEngineInstance::Snippet_Dependency* Arena::CreateMaybeMessage< ::StorageEngineInstance::Snippet_Dependency >(Arena* arena) {
  return Arena::CreateMessageInternal< ::StorageEngineInstance::Snippet_Dependency >(arena);
}
template<> PROTOBUF_NOINLINE ::StorageEngineInstance::Snippet_Limit* Arena::CreateMaybeMessage< ::StorageEngineInstance::Snippet_Limit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::StorageEngineInstance::Snippet_Limit >(arena);
}
template<> PROTOBUF_NOINLINE ::StorageEngineInstance::Snippet* Arena::CreateMaybeMessage< ::StorageEngineInstance::Snippet >(Arena* arena) {
  return Arena::CreateMessageInternal< ::StorageEngineInstance::Snippet >(arena);
}
template<> PROTOBUF_NOINLINE ::StorageEngineInstance::Request_SstCsdMapEntry_DoNotUse* Arena::CreateMaybeMessage< ::StorageEngineInstance::Request_SstCsdMapEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::StorageEngineInstance::Request_SstCsdMapEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::StorageEngineInstance::Request* Arena::CreateMaybeMessage< ::StorageEngineInstance::Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::StorageEngineInstance::Request >(arena);
}
template<> PROTOBUF_NOINLINE ::StorageEngineInstance::Response* Arena::CreateMaybeMessage< ::StorageEngineInstance::Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::StorageEngineInstance::Response >(arena);
}
template<> PROTOBUF_NOINLINE ::StorageEngineInstance::QueryResult_Column* Arena::CreateMaybeMessage< ::StorageEngineInstance::QueryResult_Column >(Arena* arena) {
  return Arena::CreateMessageInternal< ::StorageEngineInstance::QueryResult_Column >(arena);
}
template<> PROTOBUF_NOINLINE ::StorageEngineInstance::QueryResult_QueryResultEntry_DoNotUse* Arena::CreateMaybeMessage< ::StorageEngineInstance::QueryResult_QueryResultEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::StorageEngineInstance::QueryResult_QueryResultEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::StorageEngineInstance::QueryResult* Arena::CreateMaybeMessage< ::StorageEngineInstance::QueryResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::StorageEngineInstance::QueryResult >(arena);
}
template<> PROTOBUF_NOINLINE ::StorageEngineInstance::QueryStringResult* Arena::CreateMaybeMessage< ::StorageEngineInstance::QueryStringResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::StorageEngineInstance::QueryStringResult >(arena);
}
template<> PROTOBUF_NOINLINE ::StorageEngineInstance::DBInfo_DB_Table* Arena::CreateMaybeMessage< ::StorageEngineInstance::DBInfo_DB_Table >(Arena* arena) {
  return Arena::CreateMessageInternal< ::StorageEngineInstance::DBInfo_DB_Table >(arena);
}
template<> PROTOBUF_NOINLINE ::StorageEngineInstance::DBInfo_DB_TableListEntry_DoNotUse* Arena::CreateMaybeMessage< ::StorageEngineInstance::DBInfo_DB_TableListEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::StorageEngineInstance::DBInfo_DB_TableListEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::StorageEngineInstance::DBInfo_DB* Arena::CreateMaybeMessage< ::StorageEngineInstance::DBInfo_DB >(Arena* arena) {
  return Arena::CreateMessageInternal< ::StorageEngineInstance::DBInfo_DB >(arena);
}
template<> PROTOBUF_NOINLINE ::StorageEngineInstance::DBInfo_DbListEntry_DoNotUse* Arena::CreateMaybeMessage< ::StorageEngineInstance::DBInfo_DbListEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::StorageEngineInstance::DBInfo_DbListEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::StorageEngineInstance::DBInfo* Arena::CreateMaybeMessage< ::StorageEngineInstance::DBInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::StorageEngineInstance::DBInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::StorageEngineInstance::DataFileInfo_CSD* Arena::CreateMaybeMessage< ::StorageEngineInstance::DataFileInfo_CSD >(Arena* arena) {
  return Arena::CreateMessageInternal< ::StorageEngineInstance::DataFileInfo_CSD >(arena);
}
template<> PROTOBUF_NOINLINE ::StorageEngineInstance::DataFileInfo_SstCsdMapEntry_DoNotUse* Arena::CreateMaybeMessage< ::StorageEngineInstance::DataFileInfo_SstCsdMapEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::StorageEngineInstance::DataFileInfo_SstCsdMapEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::StorageEngineInstance::DataFileInfo* Arena::CreateMaybeMessage< ::StorageEngineInstance::DataFileInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::StorageEngineInstance::DataFileInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::StorageEngineInstance::SSTList* Arena::CreateMaybeMessage< ::StorageEngineInstance::SSTList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::StorageEngineInstance::SSTList >(arena);
}
template<> PROTOBUF_NOINLINE ::StorageEngineInstance::SnippetMetaData_SstPbaMapEntry_DoNotUse* Arena::CreateMaybeMessage< ::StorageEngineInstance::SnippetMetaData_SstPbaMapEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::StorageEngineInstance::SnippetMetaData_SstPbaMapEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::StorageEngineInstance::SnippetMetaData* Arena::CreateMaybeMessage< ::StorageEngineInstance::SnippetMetaData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::StorageEngineInstance::SnippetMetaData >(arena);
}
template<> PROTOBUF_NOINLINE ::StorageEngineInstance::CSDMetricList_CSDMetric* Arena::CreateMaybeMessage< ::StorageEngineInstance::CSDMetricList_CSDMetric >(Arena* arena) {
  return Arena::CreateMessageInternal< ::StorageEngineInstance::CSDMetricList_CSDMetric >(arena);
}
template<> PROTOBUF_NOINLINE ::StorageEngineInstance::CSDMetricList* Arena::CreateMaybeMessage< ::StorageEngineInstance::CSDMetricList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::StorageEngineInstance::CSDMetricList >(arena);
}
template<> PROTOBUF_NOINLINE ::StorageEngineInstance::LBA2PBARequest_SstCsdMapEntry_DoNotUse* Arena::CreateMaybeMessage< ::StorageEngineInstance::LBA2PBARequest_SstCsdMapEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::StorageEngineInstance::LBA2PBARequest_SstCsdMapEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::StorageEngineInstance::LBA2PBARequest* Arena::CreateMaybeMessage< ::StorageEngineInstance::LBA2PBARequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::StorageEngineInstance::LBA2PBARequest >(arena);
}
template<> PROTOBUF_NOINLINE ::StorageEngineInstance::LBA2PBAResponse_Chunk* Arena::CreateMaybeMessage< ::StorageEngineInstance::LBA2PBAResponse_Chunk >(Arena* arena) {
  return Arena::CreateMessageInternal< ::StorageEngineInstance::LBA2PBAResponse_Chunk >(arena);
}
template<> PROTOBUF_NOINLINE ::StorageEngineInstance::LBA2PBAResponse_PBA* Arena::CreateMaybeMessage< ::StorageEngineInstance::LBA2PBAResponse_PBA >(Arena* arena) {
  return Arena::CreateMessageInternal< ::StorageEngineInstance::LBA2PBAResponse_PBA >(arena);
}
template<> PROTOBUF_NOINLINE ::StorageEngineInstance::LBA2PBAResponse_SstPbaMapEntry_DoNotUse* Arena::CreateMaybeMessage< ::StorageEngineInstance::LBA2PBAResponse_SstPbaMapEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::StorageEngineInstance::LBA2PBAResponse_SstPbaMapEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::StorageEngineInstance::LBA2PBAResponse* Arena::CreateMaybeMessage< ::StorageEngineInstance::LBA2PBAResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::StorageEngineInstance::LBA2PBAResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::StorageEngineInstance::WALRequest* Arena::CreateMaybeMessage< ::StorageEngineInstance::WALRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::StorageEngineInstance::WALRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::StorageEngineInstance::WALResponse* Arena::CreateMaybeMessage< ::StorageEngineInstance::WALResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::StorageEngineInstance::WALResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
