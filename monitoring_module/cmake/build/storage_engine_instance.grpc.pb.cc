// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: storage_engine_instance.proto

#include "storage_engine_instance.pb.h"
#include "storage_engine_instance.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace StorageEngineInstance {

static const char* MergingModule_method_names[] = {
  "/StorageEngineInstance.MergingModule/Aggregation",
  "/StorageEngineInstance.MergingModule/EndQuery",
  "/StorageEngineInstance.MergingModule/GetQueryResult",
};

std::unique_ptr< MergingModule::Stub> MergingModule::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< MergingModule::Stub> stub(new MergingModule::Stub(channel, options));
  return stub;
}

MergingModule::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Aggregation_(MergingModule_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_EndQuery_(MergingModule_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetQueryResult_(MergingModule_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status MergingModule::Stub::Aggregation(::grpc::ClientContext* context, const ::StorageEngineInstance::SnippetRequest& request, ::StorageEngineInstance::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::StorageEngineInstance::SnippetRequest, ::StorageEngineInstance::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Aggregation_, context, request, response);
}

void MergingModule::Stub::async::Aggregation(::grpc::ClientContext* context, const ::StorageEngineInstance::SnippetRequest* request, ::StorageEngineInstance::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::StorageEngineInstance::SnippetRequest, ::StorageEngineInstance::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Aggregation_, context, request, response, std::move(f));
}

void MergingModule::Stub::async::Aggregation(::grpc::ClientContext* context, const ::StorageEngineInstance::SnippetRequest* request, ::StorageEngineInstance::Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Aggregation_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::Response>* MergingModule::Stub::PrepareAsyncAggregationRaw(::grpc::ClientContext* context, const ::StorageEngineInstance::SnippetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::StorageEngineInstance::Response, ::StorageEngineInstance::SnippetRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Aggregation_, context, request);
}

::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::Response>* MergingModule::Stub::AsyncAggregationRaw(::grpc::ClientContext* context, const ::StorageEngineInstance::SnippetRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAggregationRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MergingModule::Stub::EndQuery(::grpc::ClientContext* context, const ::StorageEngineInstance::Request& request, ::StorageEngineInstance::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::StorageEngineInstance::Request, ::StorageEngineInstance::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_EndQuery_, context, request, response);
}

void MergingModule::Stub::async::EndQuery(::grpc::ClientContext* context, const ::StorageEngineInstance::Request* request, ::StorageEngineInstance::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::StorageEngineInstance::Request, ::StorageEngineInstance::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_EndQuery_, context, request, response, std::move(f));
}

void MergingModule::Stub::async::EndQuery(::grpc::ClientContext* context, const ::StorageEngineInstance::Request* request, ::StorageEngineInstance::Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_EndQuery_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::Response>* MergingModule::Stub::PrepareAsyncEndQueryRaw(::grpc::ClientContext* context, const ::StorageEngineInstance::Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::StorageEngineInstance::Response, ::StorageEngineInstance::Request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_EndQuery_, context, request);
}

::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::Response>* MergingModule::Stub::AsyncEndQueryRaw(::grpc::ClientContext* context, const ::StorageEngineInstance::Request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncEndQueryRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MergingModule::Stub::GetQueryResult(::grpc::ClientContext* context, const ::StorageEngineInstance::Request& request, ::StorageEngineInstance::QueryResult* response) {
  return ::grpc::internal::BlockingUnaryCall< ::StorageEngineInstance::Request, ::StorageEngineInstance::QueryResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetQueryResult_, context, request, response);
}

void MergingModule::Stub::async::GetQueryResult(::grpc::ClientContext* context, const ::StorageEngineInstance::Request* request, ::StorageEngineInstance::QueryResult* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::StorageEngineInstance::Request, ::StorageEngineInstance::QueryResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetQueryResult_, context, request, response, std::move(f));
}

void MergingModule::Stub::async::GetQueryResult(::grpc::ClientContext* context, const ::StorageEngineInstance::Request* request, ::StorageEngineInstance::QueryResult* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetQueryResult_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::QueryResult>* MergingModule::Stub::PrepareAsyncGetQueryResultRaw(::grpc::ClientContext* context, const ::StorageEngineInstance::Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::StorageEngineInstance::QueryResult, ::StorageEngineInstance::Request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetQueryResult_, context, request);
}

::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::QueryResult>* MergingModule::Stub::AsyncGetQueryResultRaw(::grpc::ClientContext* context, const ::StorageEngineInstance::Request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetQueryResultRaw(context, request, cq);
  result->StartCall();
  return result;
}

MergingModule::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MergingModule_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MergingModule::Service, ::StorageEngineInstance::SnippetRequest, ::StorageEngineInstance::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MergingModule::Service* service,
             ::grpc::ServerContext* ctx,
             const ::StorageEngineInstance::SnippetRequest* req,
             ::StorageEngineInstance::Response* resp) {
               return service->Aggregation(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MergingModule_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MergingModule::Service, ::StorageEngineInstance::Request, ::StorageEngineInstance::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MergingModule::Service* service,
             ::grpc::ServerContext* ctx,
             const ::StorageEngineInstance::Request* req,
             ::StorageEngineInstance::Response* resp) {
               return service->EndQuery(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MergingModule_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MergingModule::Service, ::StorageEngineInstance::Request, ::StorageEngineInstance::QueryResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MergingModule::Service* service,
             ::grpc::ServerContext* ctx,
             const ::StorageEngineInstance::Request* req,
             ::StorageEngineInstance::QueryResult* resp) {
               return service->GetQueryResult(ctx, req, resp);
             }, this)));
}

MergingModule::Service::~Service() {
}

::grpc::Status MergingModule::Service::Aggregation(::grpc::ServerContext* context, const ::StorageEngineInstance::SnippetRequest* request, ::StorageEngineInstance::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MergingModule::Service::EndQuery(::grpc::ServerContext* context, const ::StorageEngineInstance::Request* request, ::StorageEngineInstance::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MergingModule::Service::GetQueryResult(::grpc::ServerContext* context, const ::StorageEngineInstance::Request* request, ::StorageEngineInstance::QueryResult* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* MonitoringModule_method_names[] = {
  "/StorageEngineInstance.MonitoringModule/GetDataFileInfo",
  "/StorageEngineInstance.MonitoringModule/GetSnippetMetaData",
  "/StorageEngineInstance.MonitoringModule/SyncMetaDataManager",
  "/StorageEngineInstance.MonitoringModule/SyncDBFileMonitoring",
};

std::unique_ptr< MonitoringModule::Stub> MonitoringModule::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< MonitoringModule::Stub> stub(new MonitoringModule::Stub(channel, options));
  return stub;
}

MonitoringModule::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_GetDataFileInfo_(MonitoringModule_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetSnippetMetaData_(MonitoringModule_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SyncMetaDataManager_(MonitoringModule_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SyncDBFileMonitoring_(MonitoringModule_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status MonitoringModule::Stub::GetDataFileInfo(::grpc::ClientContext* context, const ::StorageEngineInstance::Request& request, ::StorageEngineInstance::DataFileInfo* response) {
  return ::grpc::internal::BlockingUnaryCall< ::StorageEngineInstance::Request, ::StorageEngineInstance::DataFileInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetDataFileInfo_, context, request, response);
}

void MonitoringModule::Stub::async::GetDataFileInfo(::grpc::ClientContext* context, const ::StorageEngineInstance::Request* request, ::StorageEngineInstance::DataFileInfo* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::StorageEngineInstance::Request, ::StorageEngineInstance::DataFileInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetDataFileInfo_, context, request, response, std::move(f));
}

void MonitoringModule::Stub::async::GetDataFileInfo(::grpc::ClientContext* context, const ::StorageEngineInstance::Request* request, ::StorageEngineInstance::DataFileInfo* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetDataFileInfo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::DataFileInfo>* MonitoringModule::Stub::PrepareAsyncGetDataFileInfoRaw(::grpc::ClientContext* context, const ::StorageEngineInstance::Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::StorageEngineInstance::DataFileInfo, ::StorageEngineInstance::Request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetDataFileInfo_, context, request);
}

::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::DataFileInfo>* MonitoringModule::Stub::AsyncGetDataFileInfoRaw(::grpc::ClientContext* context, const ::StorageEngineInstance::Request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetDataFileInfoRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MonitoringModule::Stub::GetSnippetMetaData(::grpc::ClientContext* context, const ::StorageEngineInstance::Request& request, ::StorageEngineInstance::SnippetMetaData* response) {
  return ::grpc::internal::BlockingUnaryCall< ::StorageEngineInstance::Request, ::StorageEngineInstance::SnippetMetaData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetSnippetMetaData_, context, request, response);
}

void MonitoringModule::Stub::async::GetSnippetMetaData(::grpc::ClientContext* context, const ::StorageEngineInstance::Request* request, ::StorageEngineInstance::SnippetMetaData* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::StorageEngineInstance::Request, ::StorageEngineInstance::SnippetMetaData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetSnippetMetaData_, context, request, response, std::move(f));
}

void MonitoringModule::Stub::async::GetSnippetMetaData(::grpc::ClientContext* context, const ::StorageEngineInstance::Request* request, ::StorageEngineInstance::SnippetMetaData* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetSnippetMetaData_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::SnippetMetaData>* MonitoringModule::Stub::PrepareAsyncGetSnippetMetaDataRaw(::grpc::ClientContext* context, const ::StorageEngineInstance::Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::StorageEngineInstance::SnippetMetaData, ::StorageEngineInstance::Request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetSnippetMetaData_, context, request);
}

::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::SnippetMetaData>* MonitoringModule::Stub::AsyncGetSnippetMetaDataRaw(::grpc::ClientContext* context, const ::StorageEngineInstance::Request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetSnippetMetaDataRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MonitoringModule::Stub::SyncMetaDataManager(::grpc::ClientContext* context, const ::StorageEngineInstance::DBInfo& request, ::StorageEngineInstance::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::StorageEngineInstance::DBInfo, ::StorageEngineInstance::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SyncMetaDataManager_, context, request, response);
}

void MonitoringModule::Stub::async::SyncMetaDataManager(::grpc::ClientContext* context, const ::StorageEngineInstance::DBInfo* request, ::StorageEngineInstance::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::StorageEngineInstance::DBInfo, ::StorageEngineInstance::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SyncMetaDataManager_, context, request, response, std::move(f));
}

void MonitoringModule::Stub::async::SyncMetaDataManager(::grpc::ClientContext* context, const ::StorageEngineInstance::DBInfo* request, ::StorageEngineInstance::Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SyncMetaDataManager_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::Response>* MonitoringModule::Stub::PrepareAsyncSyncMetaDataManagerRaw(::grpc::ClientContext* context, const ::StorageEngineInstance::DBInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::StorageEngineInstance::Response, ::StorageEngineInstance::DBInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SyncMetaDataManager_, context, request);
}

::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::Response>* MonitoringModule::Stub::AsyncSyncMetaDataManagerRaw(::grpc::ClientContext* context, const ::StorageEngineInstance::DBInfo& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSyncMetaDataManagerRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MonitoringModule::Stub::SyncDBFileMonitoring(::grpc::ClientContext* context, const ::StorageEngineInstance::DataFileInfo& request, ::StorageEngineInstance::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::StorageEngineInstance::DataFileInfo, ::StorageEngineInstance::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SyncDBFileMonitoring_, context, request, response);
}

void MonitoringModule::Stub::async::SyncDBFileMonitoring(::grpc::ClientContext* context, const ::StorageEngineInstance::DataFileInfo* request, ::StorageEngineInstance::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::StorageEngineInstance::DataFileInfo, ::StorageEngineInstance::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SyncDBFileMonitoring_, context, request, response, std::move(f));
}

void MonitoringModule::Stub::async::SyncDBFileMonitoring(::grpc::ClientContext* context, const ::StorageEngineInstance::DataFileInfo* request, ::StorageEngineInstance::Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SyncDBFileMonitoring_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::Response>* MonitoringModule::Stub::PrepareAsyncSyncDBFileMonitoringRaw(::grpc::ClientContext* context, const ::StorageEngineInstance::DataFileInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::StorageEngineInstance::Response, ::StorageEngineInstance::DataFileInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SyncDBFileMonitoring_, context, request);
}

::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::Response>* MonitoringModule::Stub::AsyncSyncDBFileMonitoringRaw(::grpc::ClientContext* context, const ::StorageEngineInstance::DataFileInfo& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSyncDBFileMonitoringRaw(context, request, cq);
  result->StartCall();
  return result;
}

MonitoringModule::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MonitoringModule_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MonitoringModule::Service, ::StorageEngineInstance::Request, ::StorageEngineInstance::DataFileInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MonitoringModule::Service* service,
             ::grpc::ServerContext* ctx,
             const ::StorageEngineInstance::Request* req,
             ::StorageEngineInstance::DataFileInfo* resp) {
               return service->GetDataFileInfo(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MonitoringModule_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MonitoringModule::Service, ::StorageEngineInstance::Request, ::StorageEngineInstance::SnippetMetaData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MonitoringModule::Service* service,
             ::grpc::ServerContext* ctx,
             const ::StorageEngineInstance::Request* req,
             ::StorageEngineInstance::SnippetMetaData* resp) {
               return service->GetSnippetMetaData(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MonitoringModule_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MonitoringModule::Service, ::StorageEngineInstance::DBInfo, ::StorageEngineInstance::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MonitoringModule::Service* service,
             ::grpc::ServerContext* ctx,
             const ::StorageEngineInstance::DBInfo* req,
             ::StorageEngineInstance::Response* resp) {
               return service->SyncMetaDataManager(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MonitoringModule_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MonitoringModule::Service, ::StorageEngineInstance::DataFileInfo, ::StorageEngineInstance::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MonitoringModule::Service* service,
             ::grpc::ServerContext* ctx,
             const ::StorageEngineInstance::DataFileInfo* req,
             ::StorageEngineInstance::Response* resp) {
               return service->SyncDBFileMonitoring(ctx, req, resp);
             }, this)));
}

MonitoringModule::Service::~Service() {
}

::grpc::Status MonitoringModule::Service::GetDataFileInfo(::grpc::ServerContext* context, const ::StorageEngineInstance::Request* request, ::StorageEngineInstance::DataFileInfo* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MonitoringModule::Service::GetSnippetMetaData(::grpc::ServerContext* context, const ::StorageEngineInstance::Request* request, ::StorageEngineInstance::SnippetMetaData* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MonitoringModule::Service::SyncMetaDataManager(::grpc::ServerContext* context, const ::StorageEngineInstance::DBInfo* request, ::StorageEngineInstance::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MonitoringModule::Service::SyncDBFileMonitoring(::grpc::ServerContext* context, const ::StorageEngineInstance::DataFileInfo* request, ::StorageEngineInstance::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* OffloadingModule_method_names[] = {
  "/StorageEngineInstance.OffloadingModule/QueryOffload",
  "/StorageEngineInstance.OffloadingModule/PushCSDMetric",
};

std::unique_ptr< OffloadingModule::Stub> OffloadingModule::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< OffloadingModule::Stub> stub(new OffloadingModule::Stub(channel, options));
  return stub;
}

OffloadingModule::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_QueryOffload_(OffloadingModule_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::CLIENT_STREAMING, channel)
  , rpcmethod_PushCSDMetric_(OffloadingModule_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::ClientWriter< ::StorageEngineInstance::SnippetRequest>* OffloadingModule::Stub::QueryOffloadRaw(::grpc::ClientContext* context, ::StorageEngineInstance::QueryStringResult* response) {
  return ::grpc::internal::ClientWriterFactory< ::StorageEngineInstance::SnippetRequest>::Create(channel_.get(), rpcmethod_QueryOffload_, context, response);
}

void OffloadingModule::Stub::async::QueryOffload(::grpc::ClientContext* context, ::StorageEngineInstance::QueryStringResult* response, ::grpc::ClientWriteReactor< ::StorageEngineInstance::SnippetRequest>* reactor) {
  ::grpc::internal::ClientCallbackWriterFactory< ::StorageEngineInstance::SnippetRequest>::Create(stub_->channel_.get(), stub_->rpcmethod_QueryOffload_, context, response, reactor);
}

::grpc::ClientAsyncWriter< ::StorageEngineInstance::SnippetRequest>* OffloadingModule::Stub::AsyncQueryOffloadRaw(::grpc::ClientContext* context, ::StorageEngineInstance::QueryStringResult* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::StorageEngineInstance::SnippetRequest>::Create(channel_.get(), cq, rpcmethod_QueryOffload_, context, response, true, tag);
}

::grpc::ClientAsyncWriter< ::StorageEngineInstance::SnippetRequest>* OffloadingModule::Stub::PrepareAsyncQueryOffloadRaw(::grpc::ClientContext* context, ::StorageEngineInstance::QueryStringResult* response, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::StorageEngineInstance::SnippetRequest>::Create(channel_.get(), cq, rpcmethod_QueryOffload_, context, response, false, nullptr);
}

::grpc::Status OffloadingModule::Stub::PushCSDMetric(::grpc::ClientContext* context, const ::StorageEngineInstance::CSDMetricList& request, ::StorageEngineInstance::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::StorageEngineInstance::CSDMetricList, ::StorageEngineInstance::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PushCSDMetric_, context, request, response);
}

void OffloadingModule::Stub::async::PushCSDMetric(::grpc::ClientContext* context, const ::StorageEngineInstance::CSDMetricList* request, ::StorageEngineInstance::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::StorageEngineInstance::CSDMetricList, ::StorageEngineInstance::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PushCSDMetric_, context, request, response, std::move(f));
}

void OffloadingModule::Stub::async::PushCSDMetric(::grpc::ClientContext* context, const ::StorageEngineInstance::CSDMetricList* request, ::StorageEngineInstance::Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PushCSDMetric_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::Response>* OffloadingModule::Stub::PrepareAsyncPushCSDMetricRaw(::grpc::ClientContext* context, const ::StorageEngineInstance::CSDMetricList& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::StorageEngineInstance::Response, ::StorageEngineInstance::CSDMetricList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PushCSDMetric_, context, request);
}

::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::Response>* OffloadingModule::Stub::AsyncPushCSDMetricRaw(::grpc::ClientContext* context, const ::StorageEngineInstance::CSDMetricList& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPushCSDMetricRaw(context, request, cq);
  result->StartCall();
  return result;
}

OffloadingModule::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OffloadingModule_method_names[0],
      ::grpc::internal::RpcMethod::CLIENT_STREAMING,
      new ::grpc::internal::ClientStreamingHandler< OffloadingModule::Service, ::StorageEngineInstance::SnippetRequest, ::StorageEngineInstance::QueryStringResult>(
          [](OffloadingModule::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReader<::StorageEngineInstance::SnippetRequest>* reader,
             ::StorageEngineInstance::QueryStringResult* resp) {
               return service->QueryOffload(ctx, reader, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OffloadingModule_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OffloadingModule::Service, ::StorageEngineInstance::CSDMetricList, ::StorageEngineInstance::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OffloadingModule::Service* service,
             ::grpc::ServerContext* ctx,
             const ::StorageEngineInstance::CSDMetricList* req,
             ::StorageEngineInstance::Response* resp) {
               return service->PushCSDMetric(ctx, req, resp);
             }, this)));
}

OffloadingModule::Service::~Service() {
}

::grpc::Status OffloadingModule::Service::QueryOffload(::grpc::ServerContext* context, ::grpc::ServerReader< ::StorageEngineInstance::SnippetRequest>* reader, ::StorageEngineInstance::QueryStringResult* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OffloadingModule::Service::PushCSDMetric(::grpc::ServerContext* context, const ::StorageEngineInstance::CSDMetricList* request, ::StorageEngineInstance::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* StorageManager_method_names[] = {
  "/StorageEngineInstance.StorageManager/RequestPBA",
  "/StorageEngineInstance.StorageManager/InitDBFileMonitoring",
};

std::unique_ptr< StorageManager::Stub> StorageManager::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< StorageManager::Stub> stub(new StorageManager::Stub(channel, options));
  return stub;
}

StorageManager::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_RequestPBA_(StorageManager_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_InitDBFileMonitoring_(StorageManager_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status StorageManager::Stub::RequestPBA(::grpc::ClientContext* context, const ::StorageEngineInstance::LBA2PBARequest& request, ::StorageEngineInstance::LBA2PBAResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::StorageEngineInstance::LBA2PBARequest, ::StorageEngineInstance::LBA2PBAResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RequestPBA_, context, request, response);
}

void StorageManager::Stub::async::RequestPBA(::grpc::ClientContext* context, const ::StorageEngineInstance::LBA2PBARequest* request, ::StorageEngineInstance::LBA2PBAResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::StorageEngineInstance::LBA2PBARequest, ::StorageEngineInstance::LBA2PBAResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RequestPBA_, context, request, response, std::move(f));
}

void StorageManager::Stub::async::RequestPBA(::grpc::ClientContext* context, const ::StorageEngineInstance::LBA2PBARequest* request, ::StorageEngineInstance::LBA2PBAResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RequestPBA_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::LBA2PBAResponse>* StorageManager::Stub::PrepareAsyncRequestPBARaw(::grpc::ClientContext* context, const ::StorageEngineInstance::LBA2PBARequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::StorageEngineInstance::LBA2PBAResponse, ::StorageEngineInstance::LBA2PBARequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RequestPBA_, context, request);
}

::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::LBA2PBAResponse>* StorageManager::Stub::AsyncRequestPBARaw(::grpc::ClientContext* context, const ::StorageEngineInstance::LBA2PBARequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRequestPBARaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status StorageManager::Stub::InitDBFileMonitoring(::grpc::ClientContext* context, const ::StorageEngineInstance::SSTList& request, ::StorageEngineInstance::DataFileInfo* response) {
  return ::grpc::internal::BlockingUnaryCall< ::StorageEngineInstance::SSTList, ::StorageEngineInstance::DataFileInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_InitDBFileMonitoring_, context, request, response);
}

void StorageManager::Stub::async::InitDBFileMonitoring(::grpc::ClientContext* context, const ::StorageEngineInstance::SSTList* request, ::StorageEngineInstance::DataFileInfo* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::StorageEngineInstance::SSTList, ::StorageEngineInstance::DataFileInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_InitDBFileMonitoring_, context, request, response, std::move(f));
}

void StorageManager::Stub::async::InitDBFileMonitoring(::grpc::ClientContext* context, const ::StorageEngineInstance::SSTList* request, ::StorageEngineInstance::DataFileInfo* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_InitDBFileMonitoring_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::DataFileInfo>* StorageManager::Stub::PrepareAsyncInitDBFileMonitoringRaw(::grpc::ClientContext* context, const ::StorageEngineInstance::SSTList& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::StorageEngineInstance::DataFileInfo, ::StorageEngineInstance::SSTList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_InitDBFileMonitoring_, context, request);
}

::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::DataFileInfo>* StorageManager::Stub::AsyncInitDBFileMonitoringRaw(::grpc::ClientContext* context, const ::StorageEngineInstance::SSTList& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncInitDBFileMonitoringRaw(context, request, cq);
  result->StartCall();
  return result;
}

StorageManager::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      StorageManager_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< StorageManager::Service, ::StorageEngineInstance::LBA2PBARequest, ::StorageEngineInstance::LBA2PBAResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](StorageManager::Service* service,
             ::grpc::ServerContext* ctx,
             const ::StorageEngineInstance::LBA2PBARequest* req,
             ::StorageEngineInstance::LBA2PBAResponse* resp) {
               return service->RequestPBA(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      StorageManager_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< StorageManager::Service, ::StorageEngineInstance::SSTList, ::StorageEngineInstance::DataFileInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](StorageManager::Service* service,
             ::grpc::ServerContext* ctx,
             const ::StorageEngineInstance::SSTList* req,
             ::StorageEngineInstance::DataFileInfo* resp) {
               return service->InitDBFileMonitoring(ctx, req, resp);
             }, this)));
}

StorageManager::Service::~Service() {
}

::grpc::Status StorageManager::Service::RequestPBA(::grpc::ServerContext* context, const ::StorageEngineInstance::LBA2PBARequest* request, ::StorageEngineInstance::LBA2PBAResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status StorageManager::Service::InitDBFileMonitoring(::grpc::ServerContext* context, const ::StorageEngineInstance::SSTList* request, ::StorageEngineInstance::DataFileInfo* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* WALManager_method_names[] = {
  "/StorageEngineInstance.WALManager/RequestWAL",
};

std::unique_ptr< WALManager::Stub> WALManager::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< WALManager::Stub> stub(new WALManager::Stub(channel, options));
  return stub;
}

WALManager::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_RequestWAL_(WALManager_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status WALManager::Stub::RequestWAL(::grpc::ClientContext* context, const ::StorageEngineInstance::WALRequest& request, ::StorageEngineInstance::WALResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::StorageEngineInstance::WALRequest, ::StorageEngineInstance::WALResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RequestWAL_, context, request, response);
}

void WALManager::Stub::async::RequestWAL(::grpc::ClientContext* context, const ::StorageEngineInstance::WALRequest* request, ::StorageEngineInstance::WALResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::StorageEngineInstance::WALRequest, ::StorageEngineInstance::WALResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RequestWAL_, context, request, response, std::move(f));
}

void WALManager::Stub::async::RequestWAL(::grpc::ClientContext* context, const ::StorageEngineInstance::WALRequest* request, ::StorageEngineInstance::WALResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RequestWAL_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::WALResponse>* WALManager::Stub::PrepareAsyncRequestWALRaw(::grpc::ClientContext* context, const ::StorageEngineInstance::WALRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::StorageEngineInstance::WALResponse, ::StorageEngineInstance::WALRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RequestWAL_, context, request);
}

::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::WALResponse>* WALManager::Stub::AsyncRequestWALRaw(::grpc::ClientContext* context, const ::StorageEngineInstance::WALRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRequestWALRaw(context, request, cq);
  result->StartCall();
  return result;
}

WALManager::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WALManager_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WALManager::Service, ::StorageEngineInstance::WALRequest, ::StorageEngineInstance::WALResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](WALManager::Service* service,
             ::grpc::ServerContext* ctx,
             const ::StorageEngineInstance::WALRequest* req,
             ::StorageEngineInstance::WALResponse* resp) {
               return service->RequestWAL(ctx, req, resp);
             }, this)));
}

WALManager::Service::~Service() {
}

::grpc::Status WALManager::Service::RequestWAL(::grpc::ServerContext* context, const ::StorageEngineInstance::WALRequest* request, ::StorageEngineInstance::WALResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace StorageEngineInstance

