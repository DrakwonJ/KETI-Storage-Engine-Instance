// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: storage_engine_instance.proto

#include "storage_engine_instance.pb.h"
#include "storage_engine_instance.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace StorageEngineInstance {

static const char* StorageEngineInterface_method_names[] = {
  "/StorageEngineInstance.StorageEngineInterface/GenericQueryInterface",
  "/StorageEngineInstance.StorageEngineInterface/OffloadingQueryInterface",
  "/StorageEngineInstance.StorageEngineInterface/PushCSDMetric",
};

std::unique_ptr< StorageEngineInterface::Stub> StorageEngineInterface::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< StorageEngineInterface::Stub> stub(new StorageEngineInterface::Stub(channel, options));
  return stub;
}

StorageEngineInterface::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_GenericQueryInterface_(StorageEngineInterface_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_OffloadingQueryInterface_(StorageEngineInterface_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::CLIENT_STREAMING, channel)
  , rpcmethod_PushCSDMetric_(StorageEngineInterface_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status StorageEngineInterface::Stub::GenericQueryInterface(::grpc::ClientContext* context, const ::StorageEngineInstance::GenericQuery& request, ::StorageEngineInstance::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::StorageEngineInstance::GenericQuery, ::StorageEngineInstance::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GenericQueryInterface_, context, request, response);
}

void StorageEngineInterface::Stub::async::GenericQueryInterface(::grpc::ClientContext* context, const ::StorageEngineInstance::GenericQuery* request, ::StorageEngineInstance::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::StorageEngineInstance::GenericQuery, ::StorageEngineInstance::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GenericQueryInterface_, context, request, response, std::move(f));
}

void StorageEngineInterface::Stub::async::GenericQueryInterface(::grpc::ClientContext* context, const ::StorageEngineInstance::GenericQuery* request, ::StorageEngineInstance::Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GenericQueryInterface_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::Response>* StorageEngineInterface::Stub::PrepareAsyncGenericQueryInterfaceRaw(::grpc::ClientContext* context, const ::StorageEngineInstance::GenericQuery& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::StorageEngineInstance::Response, ::StorageEngineInstance::GenericQuery, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GenericQueryInterface_, context, request);
}

::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::Response>* StorageEngineInterface::Stub::AsyncGenericQueryInterfaceRaw(::grpc::ClientContext* context, const ::StorageEngineInstance::GenericQuery& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGenericQueryInterfaceRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientWriter< ::StorageEngineInstance::SnippetRequest>* StorageEngineInterface::Stub::OffloadingQueryInterfaceRaw(::grpc::ClientContext* context, ::StorageEngineInstance::QueryStringResult* response) {
  return ::grpc::internal::ClientWriterFactory< ::StorageEngineInstance::SnippetRequest>::Create(channel_.get(), rpcmethod_OffloadingQueryInterface_, context, response);
}

void StorageEngineInterface::Stub::async::OffloadingQueryInterface(::grpc::ClientContext* context, ::StorageEngineInstance::QueryStringResult* response, ::grpc::ClientWriteReactor< ::StorageEngineInstance::SnippetRequest>* reactor) {
  ::grpc::internal::ClientCallbackWriterFactory< ::StorageEngineInstance::SnippetRequest>::Create(stub_->channel_.get(), stub_->rpcmethod_OffloadingQueryInterface_, context, response, reactor);
}

::grpc::ClientAsyncWriter< ::StorageEngineInstance::SnippetRequest>* StorageEngineInterface::Stub::AsyncOffloadingQueryInterfaceRaw(::grpc::ClientContext* context, ::StorageEngineInstance::QueryStringResult* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::StorageEngineInstance::SnippetRequest>::Create(channel_.get(), cq, rpcmethod_OffloadingQueryInterface_, context, response, true, tag);
}

::grpc::ClientAsyncWriter< ::StorageEngineInstance::SnippetRequest>* StorageEngineInterface::Stub::PrepareAsyncOffloadingQueryInterfaceRaw(::grpc::ClientContext* context, ::StorageEngineInstance::QueryStringResult* response, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::StorageEngineInstance::SnippetRequest>::Create(channel_.get(), cq, rpcmethod_OffloadingQueryInterface_, context, response, false, nullptr);
}

::grpc::Status StorageEngineInterface::Stub::PushCSDMetric(::grpc::ClientContext* context, const ::StorageEngineInstance::CSDMetricList& request, ::StorageEngineInstance::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::StorageEngineInstance::CSDMetricList, ::StorageEngineInstance::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PushCSDMetric_, context, request, response);
}

void StorageEngineInterface::Stub::async::PushCSDMetric(::grpc::ClientContext* context, const ::StorageEngineInstance::CSDMetricList* request, ::StorageEngineInstance::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::StorageEngineInstance::CSDMetricList, ::StorageEngineInstance::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PushCSDMetric_, context, request, response, std::move(f));
}

void StorageEngineInterface::Stub::async::PushCSDMetric(::grpc::ClientContext* context, const ::StorageEngineInstance::CSDMetricList* request, ::StorageEngineInstance::Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PushCSDMetric_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::Response>* StorageEngineInterface::Stub::PrepareAsyncPushCSDMetricRaw(::grpc::ClientContext* context, const ::StorageEngineInstance::CSDMetricList& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::StorageEngineInstance::Response, ::StorageEngineInstance::CSDMetricList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PushCSDMetric_, context, request);
}

::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::Response>* StorageEngineInterface::Stub::AsyncPushCSDMetricRaw(::grpc::ClientContext* context, const ::StorageEngineInstance::CSDMetricList& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPushCSDMetricRaw(context, request, cq);
  result->StartCall();
  return result;
}

StorageEngineInterface::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      StorageEngineInterface_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< StorageEngineInterface::Service, ::StorageEngineInstance::GenericQuery, ::StorageEngineInstance::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](StorageEngineInterface::Service* service,
             ::grpc::ServerContext* ctx,
             const ::StorageEngineInstance::GenericQuery* req,
             ::StorageEngineInstance::Response* resp) {
               return service->GenericQueryInterface(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      StorageEngineInterface_method_names[1],
      ::grpc::internal::RpcMethod::CLIENT_STREAMING,
      new ::grpc::internal::ClientStreamingHandler< StorageEngineInterface::Service, ::StorageEngineInstance::SnippetRequest, ::StorageEngineInstance::QueryStringResult>(
          [](StorageEngineInterface::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReader<::StorageEngineInstance::SnippetRequest>* reader,
             ::StorageEngineInstance::QueryStringResult* resp) {
               return service->OffloadingQueryInterface(ctx, reader, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      StorageEngineInterface_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< StorageEngineInterface::Service, ::StorageEngineInstance::CSDMetricList, ::StorageEngineInstance::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](StorageEngineInterface::Service* service,
             ::grpc::ServerContext* ctx,
             const ::StorageEngineInstance::CSDMetricList* req,
             ::StorageEngineInstance::Response* resp) {
               return service->PushCSDMetric(ctx, req, resp);
             }, this)));
}

StorageEngineInterface::Service::~Service() {
}

::grpc::Status StorageEngineInterface::Service::GenericQueryInterface(::grpc::ServerContext* context, const ::StorageEngineInstance::GenericQuery* request, ::StorageEngineInstance::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status StorageEngineInterface::Service::OffloadingQueryInterface(::grpc::ServerContext* context, ::grpc::ServerReader< ::StorageEngineInstance::SnippetRequest>* reader, ::StorageEngineInstance::QueryStringResult* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status StorageEngineInterface::Service::PushCSDMetric(::grpc::ServerContext* context, const ::StorageEngineInstance::CSDMetricList* request, ::StorageEngineInstance::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* MergingModule_method_names[] = {
  "/StorageEngineInstance.MergingModule/Aggregation",
  "/StorageEngineInstance.MergingModule/EndQuery",
  "/StorageEngineInstance.MergingModule/GetQueryResult",
};

std::unique_ptr< MergingModule::Stub> MergingModule::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< MergingModule::Stub> stub(new MergingModule::Stub(channel, options));
  return stub;
}

MergingModule::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Aggregation_(MergingModule_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_EndQuery_(MergingModule_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetQueryResult_(MergingModule_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status MergingModule::Stub::Aggregation(::grpc::ClientContext* context, const ::StorageEngineInstance::SnippetRequest& request, ::StorageEngineInstance::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::StorageEngineInstance::SnippetRequest, ::StorageEngineInstance::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Aggregation_, context, request, response);
}

void MergingModule::Stub::async::Aggregation(::grpc::ClientContext* context, const ::StorageEngineInstance::SnippetRequest* request, ::StorageEngineInstance::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::StorageEngineInstance::SnippetRequest, ::StorageEngineInstance::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Aggregation_, context, request, response, std::move(f));
}

void MergingModule::Stub::async::Aggregation(::grpc::ClientContext* context, const ::StorageEngineInstance::SnippetRequest* request, ::StorageEngineInstance::Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Aggregation_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::Response>* MergingModule::Stub::PrepareAsyncAggregationRaw(::grpc::ClientContext* context, const ::StorageEngineInstance::SnippetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::StorageEngineInstance::Response, ::StorageEngineInstance::SnippetRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Aggregation_, context, request);
}

::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::Response>* MergingModule::Stub::AsyncAggregationRaw(::grpc::ClientContext* context, const ::StorageEngineInstance::SnippetRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAggregationRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MergingModule::Stub::EndQuery(::grpc::ClientContext* context, const ::StorageEngineInstance::Request& request, ::StorageEngineInstance::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::StorageEngineInstance::Request, ::StorageEngineInstance::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_EndQuery_, context, request, response);
}

void MergingModule::Stub::async::EndQuery(::grpc::ClientContext* context, const ::StorageEngineInstance::Request* request, ::StorageEngineInstance::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::StorageEngineInstance::Request, ::StorageEngineInstance::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_EndQuery_, context, request, response, std::move(f));
}

void MergingModule::Stub::async::EndQuery(::grpc::ClientContext* context, const ::StorageEngineInstance::Request* request, ::StorageEngineInstance::Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_EndQuery_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::Response>* MergingModule::Stub::PrepareAsyncEndQueryRaw(::grpc::ClientContext* context, const ::StorageEngineInstance::Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::StorageEngineInstance::Response, ::StorageEngineInstance::Request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_EndQuery_, context, request);
}

::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::Response>* MergingModule::Stub::AsyncEndQueryRaw(::grpc::ClientContext* context, const ::StorageEngineInstance::Request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncEndQueryRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MergingModule::Stub::GetQueryResult(::grpc::ClientContext* context, const ::StorageEngineInstance::Request& request, ::StorageEngineInstance::QueryResult* response) {
  return ::grpc::internal::BlockingUnaryCall< ::StorageEngineInstance::Request, ::StorageEngineInstance::QueryResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetQueryResult_, context, request, response);
}

void MergingModule::Stub::async::GetQueryResult(::grpc::ClientContext* context, const ::StorageEngineInstance::Request* request, ::StorageEngineInstance::QueryResult* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::StorageEngineInstance::Request, ::StorageEngineInstance::QueryResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetQueryResult_, context, request, response, std::move(f));
}

void MergingModule::Stub::async::GetQueryResult(::grpc::ClientContext* context, const ::StorageEngineInstance::Request* request, ::StorageEngineInstance::QueryResult* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetQueryResult_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::QueryResult>* MergingModule::Stub::PrepareAsyncGetQueryResultRaw(::grpc::ClientContext* context, const ::StorageEngineInstance::Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::StorageEngineInstance::QueryResult, ::StorageEngineInstance::Request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetQueryResult_, context, request);
}

::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::QueryResult>* MergingModule::Stub::AsyncGetQueryResultRaw(::grpc::ClientContext* context, const ::StorageEngineInstance::Request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetQueryResultRaw(context, request, cq);
  result->StartCall();
  return result;
}

MergingModule::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MergingModule_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MergingModule::Service, ::StorageEngineInstance::SnippetRequest, ::StorageEngineInstance::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MergingModule::Service* service,
             ::grpc::ServerContext* ctx,
             const ::StorageEngineInstance::SnippetRequest* req,
             ::StorageEngineInstance::Response* resp) {
               return service->Aggregation(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MergingModule_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MergingModule::Service, ::StorageEngineInstance::Request, ::StorageEngineInstance::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MergingModule::Service* service,
             ::grpc::ServerContext* ctx,
             const ::StorageEngineInstance::Request* req,
             ::StorageEngineInstance::Response* resp) {
               return service->EndQuery(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MergingModule_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MergingModule::Service, ::StorageEngineInstance::Request, ::StorageEngineInstance::QueryResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MergingModule::Service* service,
             ::grpc::ServerContext* ctx,
             const ::StorageEngineInstance::Request* req,
             ::StorageEngineInstance::QueryResult* resp) {
               return service->GetQueryResult(ctx, req, resp);
             }, this)));
}

MergingModule::Service::~Service() {
}

::grpc::Status MergingModule::Service::Aggregation(::grpc::ServerContext* context, const ::StorageEngineInstance::SnippetRequest* request, ::StorageEngineInstance::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MergingModule::Service::EndQuery(::grpc::ServerContext* context, const ::StorageEngineInstance::Request* request, ::StorageEngineInstance::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MergingModule::Service::GetQueryResult(::grpc::ServerContext* context, const ::StorageEngineInstance::Request* request, ::StorageEngineInstance::QueryResult* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* MonitoringModule_method_names[] = {
  "/StorageEngineInstance.MonitoringModule/GetSnippetMetaData",
};

std::unique_ptr< MonitoringModule::Stub> MonitoringModule::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< MonitoringModule::Stub> stub(new MonitoringModule::Stub(channel, options));
  return stub;
}

MonitoringModule::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_GetSnippetMetaData_(MonitoringModule_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status MonitoringModule::Stub::GetSnippetMetaData(::grpc::ClientContext* context, const ::StorageEngineInstance::MetaDataRequest& request, ::StorageEngineInstance::SnippetMetaData* response) {
  return ::grpc::internal::BlockingUnaryCall< ::StorageEngineInstance::MetaDataRequest, ::StorageEngineInstance::SnippetMetaData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetSnippetMetaData_, context, request, response);
}

void MonitoringModule::Stub::async::GetSnippetMetaData(::grpc::ClientContext* context, const ::StorageEngineInstance::MetaDataRequest* request, ::StorageEngineInstance::SnippetMetaData* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::StorageEngineInstance::MetaDataRequest, ::StorageEngineInstance::SnippetMetaData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetSnippetMetaData_, context, request, response, std::move(f));
}

void MonitoringModule::Stub::async::GetSnippetMetaData(::grpc::ClientContext* context, const ::StorageEngineInstance::MetaDataRequest* request, ::StorageEngineInstance::SnippetMetaData* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetSnippetMetaData_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::SnippetMetaData>* MonitoringModule::Stub::PrepareAsyncGetSnippetMetaDataRaw(::grpc::ClientContext* context, const ::StorageEngineInstance::MetaDataRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::StorageEngineInstance::SnippetMetaData, ::StorageEngineInstance::MetaDataRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetSnippetMetaData_, context, request);
}

::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::SnippetMetaData>* MonitoringModule::Stub::AsyncGetSnippetMetaDataRaw(::grpc::ClientContext* context, const ::StorageEngineInstance::MetaDataRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetSnippetMetaDataRaw(context, request, cq);
  result->StartCall();
  return result;
}

MonitoringModule::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MonitoringModule_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MonitoringModule::Service, ::StorageEngineInstance::MetaDataRequest, ::StorageEngineInstance::SnippetMetaData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MonitoringModule::Service* service,
             ::grpc::ServerContext* ctx,
             const ::StorageEngineInstance::MetaDataRequest* req,
             ::StorageEngineInstance::SnippetMetaData* resp) {
               return service->GetSnippetMetaData(ctx, req, resp);
             }, this)));
}

MonitoringModule::Service::~Service() {
}

::grpc::Status MonitoringModule::Service::GetSnippetMetaData(::grpc::ServerContext* context, const ::StorageEngineInstance::MetaDataRequest* request, ::StorageEngineInstance::SnippetMetaData* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* OffloadingModule_method_names[] = {
  "/StorageEngineInstance.OffloadingModule/Scheduling",
  "/StorageEngineInstance.OffloadingModule/PushCSDMetric",
};

std::unique_ptr< OffloadingModule::Stub> OffloadingModule::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< OffloadingModule::Stub> stub(new OffloadingModule::Stub(channel, options));
  return stub;
}

OffloadingModule::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Scheduling_(OffloadingModule_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PushCSDMetric_(OffloadingModule_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status OffloadingModule::Stub::Scheduling(::grpc::ClientContext* context, const ::StorageEngineInstance::SnippetRequest& request, ::StorageEngineInstance::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::StorageEngineInstance::SnippetRequest, ::StorageEngineInstance::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Scheduling_, context, request, response);
}

void OffloadingModule::Stub::async::Scheduling(::grpc::ClientContext* context, const ::StorageEngineInstance::SnippetRequest* request, ::StorageEngineInstance::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::StorageEngineInstance::SnippetRequest, ::StorageEngineInstance::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Scheduling_, context, request, response, std::move(f));
}

void OffloadingModule::Stub::async::Scheduling(::grpc::ClientContext* context, const ::StorageEngineInstance::SnippetRequest* request, ::StorageEngineInstance::Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Scheduling_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::Response>* OffloadingModule::Stub::PrepareAsyncSchedulingRaw(::grpc::ClientContext* context, const ::StorageEngineInstance::SnippetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::StorageEngineInstance::Response, ::StorageEngineInstance::SnippetRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Scheduling_, context, request);
}

::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::Response>* OffloadingModule::Stub::AsyncSchedulingRaw(::grpc::ClientContext* context, const ::StorageEngineInstance::SnippetRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSchedulingRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OffloadingModule::Stub::PushCSDMetric(::grpc::ClientContext* context, const ::StorageEngineInstance::CSDMetricList& request, ::StorageEngineInstance::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::StorageEngineInstance::CSDMetricList, ::StorageEngineInstance::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PushCSDMetric_, context, request, response);
}

void OffloadingModule::Stub::async::PushCSDMetric(::grpc::ClientContext* context, const ::StorageEngineInstance::CSDMetricList* request, ::StorageEngineInstance::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::StorageEngineInstance::CSDMetricList, ::StorageEngineInstance::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PushCSDMetric_, context, request, response, std::move(f));
}

void OffloadingModule::Stub::async::PushCSDMetric(::grpc::ClientContext* context, const ::StorageEngineInstance::CSDMetricList* request, ::StorageEngineInstance::Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PushCSDMetric_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::Response>* OffloadingModule::Stub::PrepareAsyncPushCSDMetricRaw(::grpc::ClientContext* context, const ::StorageEngineInstance::CSDMetricList& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::StorageEngineInstance::Response, ::StorageEngineInstance::CSDMetricList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PushCSDMetric_, context, request);
}

::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::Response>* OffloadingModule::Stub::AsyncPushCSDMetricRaw(::grpc::ClientContext* context, const ::StorageEngineInstance::CSDMetricList& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPushCSDMetricRaw(context, request, cq);
  result->StartCall();
  return result;
}

OffloadingModule::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OffloadingModule_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OffloadingModule::Service, ::StorageEngineInstance::SnippetRequest, ::StorageEngineInstance::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OffloadingModule::Service* service,
             ::grpc::ServerContext* ctx,
             const ::StorageEngineInstance::SnippetRequest* req,
             ::StorageEngineInstance::Response* resp) {
               return service->Scheduling(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OffloadingModule_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OffloadingModule::Service, ::StorageEngineInstance::CSDMetricList, ::StorageEngineInstance::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OffloadingModule::Service* service,
             ::grpc::ServerContext* ctx,
             const ::StorageEngineInstance::CSDMetricList* req,
             ::StorageEngineInstance::Response* resp) {
               return service->PushCSDMetric(ctx, req, resp);
             }, this)));
}

OffloadingModule::Service::~Service() {
}

::grpc::Status OffloadingModule::Service::Scheduling(::grpc::ServerContext* context, const ::StorageEngineInstance::SnippetRequest* request, ::StorageEngineInstance::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OffloadingModule::Service::PushCSDMetric(::grpc::ServerContext* context, const ::StorageEngineInstance::CSDMetricList* request, ::StorageEngineInstance::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* StorageManager_method_names[] = {
  "/StorageEngineInstance.StorageManager/RequestPBA",
  "/StorageEngineInstance.StorageManager/RequestVolumeAllocation",
};

std::unique_ptr< StorageManager::Stub> StorageManager::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< StorageManager::Stub> stub(new StorageManager::Stub(channel, options));
  return stub;
}

StorageManager::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_RequestPBA_(StorageManager_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RequestVolumeAllocation_(StorageManager_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status StorageManager::Stub::RequestPBA(::grpc::ClientContext* context, const ::StorageEngineInstance::LBARequest& request, ::StorageEngineInstance::PBAResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::StorageEngineInstance::LBARequest, ::StorageEngineInstance::PBAResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RequestPBA_, context, request, response);
}

void StorageManager::Stub::async::RequestPBA(::grpc::ClientContext* context, const ::StorageEngineInstance::LBARequest* request, ::StorageEngineInstance::PBAResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::StorageEngineInstance::LBARequest, ::StorageEngineInstance::PBAResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RequestPBA_, context, request, response, std::move(f));
}

void StorageManager::Stub::async::RequestPBA(::grpc::ClientContext* context, const ::StorageEngineInstance::LBARequest* request, ::StorageEngineInstance::PBAResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RequestPBA_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::PBAResponse>* StorageManager::Stub::PrepareAsyncRequestPBARaw(::grpc::ClientContext* context, const ::StorageEngineInstance::LBARequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::StorageEngineInstance::PBAResponse, ::StorageEngineInstance::LBARequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RequestPBA_, context, request);
}

::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::PBAResponse>* StorageManager::Stub::AsyncRequestPBARaw(::grpc::ClientContext* context, const ::StorageEngineInstance::LBARequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRequestPBARaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status StorageManager::Stub::RequestVolumeAllocation(::grpc::ClientContext* context, const ::StorageEngineInstance::VolumeRequest& request, ::StorageEngineInstance::AllocatedVolumeInfo* response) {
  return ::grpc::internal::BlockingUnaryCall< ::StorageEngineInstance::VolumeRequest, ::StorageEngineInstance::AllocatedVolumeInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RequestVolumeAllocation_, context, request, response);
}

void StorageManager::Stub::async::RequestVolumeAllocation(::grpc::ClientContext* context, const ::StorageEngineInstance::VolumeRequest* request, ::StorageEngineInstance::AllocatedVolumeInfo* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::StorageEngineInstance::VolumeRequest, ::StorageEngineInstance::AllocatedVolumeInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RequestVolumeAllocation_, context, request, response, std::move(f));
}

void StorageManager::Stub::async::RequestVolumeAllocation(::grpc::ClientContext* context, const ::StorageEngineInstance::VolumeRequest* request, ::StorageEngineInstance::AllocatedVolumeInfo* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RequestVolumeAllocation_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::AllocatedVolumeInfo>* StorageManager::Stub::PrepareAsyncRequestVolumeAllocationRaw(::grpc::ClientContext* context, const ::StorageEngineInstance::VolumeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::StorageEngineInstance::AllocatedVolumeInfo, ::StorageEngineInstance::VolumeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RequestVolumeAllocation_, context, request);
}

::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::AllocatedVolumeInfo>* StorageManager::Stub::AsyncRequestVolumeAllocationRaw(::grpc::ClientContext* context, const ::StorageEngineInstance::VolumeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRequestVolumeAllocationRaw(context, request, cq);
  result->StartCall();
  return result;
}

StorageManager::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      StorageManager_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< StorageManager::Service, ::StorageEngineInstance::LBARequest, ::StorageEngineInstance::PBAResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](StorageManager::Service* service,
             ::grpc::ServerContext* ctx,
             const ::StorageEngineInstance::LBARequest* req,
             ::StorageEngineInstance::PBAResponse* resp) {
               return service->RequestPBA(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      StorageManager_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< StorageManager::Service, ::StorageEngineInstance::VolumeRequest, ::StorageEngineInstance::AllocatedVolumeInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](StorageManager::Service* service,
             ::grpc::ServerContext* ctx,
             const ::StorageEngineInstance::VolumeRequest* req,
             ::StorageEngineInstance::AllocatedVolumeInfo* resp) {
               return service->RequestVolumeAllocation(ctx, req, resp);
             }, this)));
}

StorageManager::Service::~Service() {
}

::grpc::Status StorageManager::Service::RequestPBA(::grpc::ServerContext* context, const ::StorageEngineInstance::LBARequest* request, ::StorageEngineInstance::PBAResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status StorageManager::Service::RequestVolumeAllocation(::grpc::ServerContext* context, const ::StorageEngineInstance::VolumeRequest* request, ::StorageEngineInstance::AllocatedVolumeInfo* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* WALManager_method_names[] = {
  "/StorageEngineInstance.WALManager/RequestWAL",
};

std::unique_ptr< WALManager::Stub> WALManager::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< WALManager::Stub> stub(new WALManager::Stub(channel, options));
  return stub;
}

WALManager::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_RequestWAL_(WALManager_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status WALManager::Stub::RequestWAL(::grpc::ClientContext* context, const ::StorageEngineInstance::WALRequest& request, ::StorageEngineInstance::WALResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::StorageEngineInstance::WALRequest, ::StorageEngineInstance::WALResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RequestWAL_, context, request, response);
}

void WALManager::Stub::async::RequestWAL(::grpc::ClientContext* context, const ::StorageEngineInstance::WALRequest* request, ::StorageEngineInstance::WALResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::StorageEngineInstance::WALRequest, ::StorageEngineInstance::WALResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RequestWAL_, context, request, response, std::move(f));
}

void WALManager::Stub::async::RequestWAL(::grpc::ClientContext* context, const ::StorageEngineInstance::WALRequest* request, ::StorageEngineInstance::WALResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RequestWAL_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::WALResponse>* WALManager::Stub::PrepareAsyncRequestWALRaw(::grpc::ClientContext* context, const ::StorageEngineInstance::WALRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::StorageEngineInstance::WALResponse, ::StorageEngineInstance::WALRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RequestWAL_, context, request);
}

::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::WALResponse>* WALManager::Stub::AsyncRequestWALRaw(::grpc::ClientContext* context, const ::StorageEngineInstance::WALRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRequestWALRaw(context, request, cq);
  result->StartCall();
  return result;
}

WALManager::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WALManager_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WALManager::Service, ::StorageEngineInstance::WALRequest, ::StorageEngineInstance::WALResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](WALManager::Service* service,
             ::grpc::ServerContext* ctx,
             const ::StorageEngineInstance::WALRequest* req,
             ::StorageEngineInstance::WALResponse* resp) {
               return service->RequestWAL(ctx, req, resp);
             }, this)));
}

WALManager::Service::~Service() {
}

::grpc::Status WALManager::Service::RequestWAL(::grpc::ServerContext* context, const ::StorageEngineInstance::WALRequest* request, ::StorageEngineInstance::WALResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace StorageEngineInstance

