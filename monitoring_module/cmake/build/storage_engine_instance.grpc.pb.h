// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: storage_engine_instance.proto
#ifndef GRPC_storage_5fengine_5finstance_2eproto__INCLUDED
#define GRPC_storage_5fengine_5finstance_2eproto__INCLUDED

#include "storage_engine_instance.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace StorageEngineInstance {

class MergingModule final {
 public:
  static constexpr char const* service_full_name() {
    return "StorageEngineInstance.MergingModule";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status Aggregation(::grpc::ClientContext* context, const ::StorageEngineInstance::SnippetRequest& request, ::StorageEngineInstance::Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StorageEngineInstance::Response>> AsyncAggregation(::grpc::ClientContext* context, const ::StorageEngineInstance::SnippetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StorageEngineInstance::Response>>(AsyncAggregationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StorageEngineInstance::Response>> PrepareAsyncAggregation(::grpc::ClientContext* context, const ::StorageEngineInstance::SnippetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StorageEngineInstance::Response>>(PrepareAsyncAggregationRaw(context, request, cq));
    }
    virtual ::grpc::Status EndQuery(::grpc::ClientContext* context, const ::StorageEngineInstance::Request& request, ::StorageEngineInstance::Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StorageEngineInstance::Response>> AsyncEndQuery(::grpc::ClientContext* context, const ::StorageEngineInstance::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StorageEngineInstance::Response>>(AsyncEndQueryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StorageEngineInstance::Response>> PrepareAsyncEndQuery(::grpc::ClientContext* context, const ::StorageEngineInstance::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StorageEngineInstance::Response>>(PrepareAsyncEndQueryRaw(context, request, cq));
    }
    virtual ::grpc::Status GetQueryResult(::grpc::ClientContext* context, const ::StorageEngineInstance::Request& request, ::StorageEngineInstance::QueryResult* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StorageEngineInstance::QueryResult>> AsyncGetQueryResult(::grpc::ClientContext* context, const ::StorageEngineInstance::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StorageEngineInstance::QueryResult>>(AsyncGetQueryResultRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StorageEngineInstance::QueryResult>> PrepareAsyncGetQueryResult(::grpc::ClientContext* context, const ::StorageEngineInstance::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StorageEngineInstance::QueryResult>>(PrepareAsyncGetQueryResultRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void Aggregation(::grpc::ClientContext* context, const ::StorageEngineInstance::SnippetRequest* request, ::StorageEngineInstance::Response* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Aggregation(::grpc::ClientContext* context, const ::StorageEngineInstance::SnippetRequest* request, ::StorageEngineInstance::Response* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void EndQuery(::grpc::ClientContext* context, const ::StorageEngineInstance::Request* request, ::StorageEngineInstance::Response* response, std::function<void(::grpc::Status)>) = 0;
      virtual void EndQuery(::grpc::ClientContext* context, const ::StorageEngineInstance::Request* request, ::StorageEngineInstance::Response* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetQueryResult(::grpc::ClientContext* context, const ::StorageEngineInstance::Request* request, ::StorageEngineInstance::QueryResult* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetQueryResult(::grpc::ClientContext* context, const ::StorageEngineInstance::Request* request, ::StorageEngineInstance::QueryResult* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::StorageEngineInstance::Response>* AsyncAggregationRaw(::grpc::ClientContext* context, const ::StorageEngineInstance::SnippetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::StorageEngineInstance::Response>* PrepareAsyncAggregationRaw(::grpc::ClientContext* context, const ::StorageEngineInstance::SnippetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::StorageEngineInstance::Response>* AsyncEndQueryRaw(::grpc::ClientContext* context, const ::StorageEngineInstance::Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::StorageEngineInstance::Response>* PrepareAsyncEndQueryRaw(::grpc::ClientContext* context, const ::StorageEngineInstance::Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::StorageEngineInstance::QueryResult>* AsyncGetQueryResultRaw(::grpc::ClientContext* context, const ::StorageEngineInstance::Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::StorageEngineInstance::QueryResult>* PrepareAsyncGetQueryResultRaw(::grpc::ClientContext* context, const ::StorageEngineInstance::Request& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status Aggregation(::grpc::ClientContext* context, const ::StorageEngineInstance::SnippetRequest& request, ::StorageEngineInstance::Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::Response>> AsyncAggregation(::grpc::ClientContext* context, const ::StorageEngineInstance::SnippetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::Response>>(AsyncAggregationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::Response>> PrepareAsyncAggregation(::grpc::ClientContext* context, const ::StorageEngineInstance::SnippetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::Response>>(PrepareAsyncAggregationRaw(context, request, cq));
    }
    ::grpc::Status EndQuery(::grpc::ClientContext* context, const ::StorageEngineInstance::Request& request, ::StorageEngineInstance::Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::Response>> AsyncEndQuery(::grpc::ClientContext* context, const ::StorageEngineInstance::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::Response>>(AsyncEndQueryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::Response>> PrepareAsyncEndQuery(::grpc::ClientContext* context, const ::StorageEngineInstance::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::Response>>(PrepareAsyncEndQueryRaw(context, request, cq));
    }
    ::grpc::Status GetQueryResult(::grpc::ClientContext* context, const ::StorageEngineInstance::Request& request, ::StorageEngineInstance::QueryResult* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::QueryResult>> AsyncGetQueryResult(::grpc::ClientContext* context, const ::StorageEngineInstance::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::QueryResult>>(AsyncGetQueryResultRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::QueryResult>> PrepareAsyncGetQueryResult(::grpc::ClientContext* context, const ::StorageEngineInstance::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::QueryResult>>(PrepareAsyncGetQueryResultRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void Aggregation(::grpc::ClientContext* context, const ::StorageEngineInstance::SnippetRequest* request, ::StorageEngineInstance::Response* response, std::function<void(::grpc::Status)>) override;
      void Aggregation(::grpc::ClientContext* context, const ::StorageEngineInstance::SnippetRequest* request, ::StorageEngineInstance::Response* response, ::grpc::ClientUnaryReactor* reactor) override;
      void EndQuery(::grpc::ClientContext* context, const ::StorageEngineInstance::Request* request, ::StorageEngineInstance::Response* response, std::function<void(::grpc::Status)>) override;
      void EndQuery(::grpc::ClientContext* context, const ::StorageEngineInstance::Request* request, ::StorageEngineInstance::Response* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetQueryResult(::grpc::ClientContext* context, const ::StorageEngineInstance::Request* request, ::StorageEngineInstance::QueryResult* response, std::function<void(::grpc::Status)>) override;
      void GetQueryResult(::grpc::ClientContext* context, const ::StorageEngineInstance::Request* request, ::StorageEngineInstance::QueryResult* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::Response>* AsyncAggregationRaw(::grpc::ClientContext* context, const ::StorageEngineInstance::SnippetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::Response>* PrepareAsyncAggregationRaw(::grpc::ClientContext* context, const ::StorageEngineInstance::SnippetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::Response>* AsyncEndQueryRaw(::grpc::ClientContext* context, const ::StorageEngineInstance::Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::Response>* PrepareAsyncEndQueryRaw(::grpc::ClientContext* context, const ::StorageEngineInstance::Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::QueryResult>* AsyncGetQueryResultRaw(::grpc::ClientContext* context, const ::StorageEngineInstance::Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::QueryResult>* PrepareAsyncGetQueryResultRaw(::grpc::ClientContext* context, const ::StorageEngineInstance::Request& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Aggregation_;
    const ::grpc::internal::RpcMethod rpcmethod_EndQuery_;
    const ::grpc::internal::RpcMethod rpcmethod_GetQueryResult_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Aggregation(::grpc::ServerContext* context, const ::StorageEngineInstance::SnippetRequest* request, ::StorageEngineInstance::Response* response);
    virtual ::grpc::Status EndQuery(::grpc::ServerContext* context, const ::StorageEngineInstance::Request* request, ::StorageEngineInstance::Response* response);
    virtual ::grpc::Status GetQueryResult(::grpc::ServerContext* context, const ::StorageEngineInstance::Request* request, ::StorageEngineInstance::QueryResult* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Aggregation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Aggregation() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Aggregation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Aggregation(::grpc::ServerContext* /*context*/, const ::StorageEngineInstance::SnippetRequest* /*request*/, ::StorageEngineInstance::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAggregation(::grpc::ServerContext* context, ::StorageEngineInstance::SnippetRequest* request, ::grpc::ServerAsyncResponseWriter< ::StorageEngineInstance::Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_EndQuery : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_EndQuery() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_EndQuery() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EndQuery(::grpc::ServerContext* /*context*/, const ::StorageEngineInstance::Request* /*request*/, ::StorageEngineInstance::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestEndQuery(::grpc::ServerContext* context, ::StorageEngineInstance::Request* request, ::grpc::ServerAsyncResponseWriter< ::StorageEngineInstance::Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetQueryResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetQueryResult() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetQueryResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetQueryResult(::grpc::ServerContext* /*context*/, const ::StorageEngineInstance::Request* /*request*/, ::StorageEngineInstance::QueryResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetQueryResult(::grpc::ServerContext* context, ::StorageEngineInstance::Request* request, ::grpc::ServerAsyncResponseWriter< ::StorageEngineInstance::QueryResult>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Aggregation<WithAsyncMethod_EndQuery<WithAsyncMethod_GetQueryResult<Service > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_Aggregation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Aggregation() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::StorageEngineInstance::SnippetRequest, ::StorageEngineInstance::Response>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::StorageEngineInstance::SnippetRequest* request, ::StorageEngineInstance::Response* response) { return this->Aggregation(context, request, response); }));}
    void SetMessageAllocatorFor_Aggregation(
        ::grpc::MessageAllocator< ::StorageEngineInstance::SnippetRequest, ::StorageEngineInstance::Response>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::StorageEngineInstance::SnippetRequest, ::StorageEngineInstance::Response>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Aggregation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Aggregation(::grpc::ServerContext* /*context*/, const ::StorageEngineInstance::SnippetRequest* /*request*/, ::StorageEngineInstance::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Aggregation(
      ::grpc::CallbackServerContext* /*context*/, const ::StorageEngineInstance::SnippetRequest* /*request*/, ::StorageEngineInstance::Response* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_EndQuery : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_EndQuery() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::StorageEngineInstance::Request, ::StorageEngineInstance::Response>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::StorageEngineInstance::Request* request, ::StorageEngineInstance::Response* response) { return this->EndQuery(context, request, response); }));}
    void SetMessageAllocatorFor_EndQuery(
        ::grpc::MessageAllocator< ::StorageEngineInstance::Request, ::StorageEngineInstance::Response>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::StorageEngineInstance::Request, ::StorageEngineInstance::Response>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_EndQuery() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EndQuery(::grpc::ServerContext* /*context*/, const ::StorageEngineInstance::Request* /*request*/, ::StorageEngineInstance::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* EndQuery(
      ::grpc::CallbackServerContext* /*context*/, const ::StorageEngineInstance::Request* /*request*/, ::StorageEngineInstance::Response* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetQueryResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetQueryResult() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::StorageEngineInstance::Request, ::StorageEngineInstance::QueryResult>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::StorageEngineInstance::Request* request, ::StorageEngineInstance::QueryResult* response) { return this->GetQueryResult(context, request, response); }));}
    void SetMessageAllocatorFor_GetQueryResult(
        ::grpc::MessageAllocator< ::StorageEngineInstance::Request, ::StorageEngineInstance::QueryResult>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::StorageEngineInstance::Request, ::StorageEngineInstance::QueryResult>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetQueryResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetQueryResult(::grpc::ServerContext* /*context*/, const ::StorageEngineInstance::Request* /*request*/, ::StorageEngineInstance::QueryResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetQueryResult(
      ::grpc::CallbackServerContext* /*context*/, const ::StorageEngineInstance::Request* /*request*/, ::StorageEngineInstance::QueryResult* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_Aggregation<WithCallbackMethod_EndQuery<WithCallbackMethod_GetQueryResult<Service > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Aggregation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Aggregation() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Aggregation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Aggregation(::grpc::ServerContext* /*context*/, const ::StorageEngineInstance::SnippetRequest* /*request*/, ::StorageEngineInstance::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_EndQuery : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_EndQuery() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_EndQuery() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EndQuery(::grpc::ServerContext* /*context*/, const ::StorageEngineInstance::Request* /*request*/, ::StorageEngineInstance::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetQueryResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetQueryResult() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetQueryResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetQueryResult(::grpc::ServerContext* /*context*/, const ::StorageEngineInstance::Request* /*request*/, ::StorageEngineInstance::QueryResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Aggregation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Aggregation() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Aggregation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Aggregation(::grpc::ServerContext* /*context*/, const ::StorageEngineInstance::SnippetRequest* /*request*/, ::StorageEngineInstance::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAggregation(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_EndQuery : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_EndQuery() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_EndQuery() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EndQuery(::grpc::ServerContext* /*context*/, const ::StorageEngineInstance::Request* /*request*/, ::StorageEngineInstance::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestEndQuery(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetQueryResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetQueryResult() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_GetQueryResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetQueryResult(::grpc::ServerContext* /*context*/, const ::StorageEngineInstance::Request* /*request*/, ::StorageEngineInstance::QueryResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetQueryResult(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Aggregation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Aggregation() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Aggregation(context, request, response); }));
    }
    ~WithRawCallbackMethod_Aggregation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Aggregation(::grpc::ServerContext* /*context*/, const ::StorageEngineInstance::SnippetRequest* /*request*/, ::StorageEngineInstance::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Aggregation(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_EndQuery : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_EndQuery() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->EndQuery(context, request, response); }));
    }
    ~WithRawCallbackMethod_EndQuery() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EndQuery(::grpc::ServerContext* /*context*/, const ::StorageEngineInstance::Request* /*request*/, ::StorageEngineInstance::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* EndQuery(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetQueryResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetQueryResult() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetQueryResult(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetQueryResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetQueryResult(::grpc::ServerContext* /*context*/, const ::StorageEngineInstance::Request* /*request*/, ::StorageEngineInstance::QueryResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetQueryResult(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Aggregation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Aggregation() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::StorageEngineInstance::SnippetRequest, ::StorageEngineInstance::Response>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::StorageEngineInstance::SnippetRequest, ::StorageEngineInstance::Response>* streamer) {
                       return this->StreamedAggregation(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Aggregation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Aggregation(::grpc::ServerContext* /*context*/, const ::StorageEngineInstance::SnippetRequest* /*request*/, ::StorageEngineInstance::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAggregation(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::StorageEngineInstance::SnippetRequest,::StorageEngineInstance::Response>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_EndQuery : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_EndQuery() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::StorageEngineInstance::Request, ::StorageEngineInstance::Response>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::StorageEngineInstance::Request, ::StorageEngineInstance::Response>* streamer) {
                       return this->StreamedEndQuery(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_EndQuery() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status EndQuery(::grpc::ServerContext* /*context*/, const ::StorageEngineInstance::Request* /*request*/, ::StorageEngineInstance::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedEndQuery(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::StorageEngineInstance::Request,::StorageEngineInstance::Response>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetQueryResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetQueryResult() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::StorageEngineInstance::Request, ::StorageEngineInstance::QueryResult>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::StorageEngineInstance::Request, ::StorageEngineInstance::QueryResult>* streamer) {
                       return this->StreamedGetQueryResult(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetQueryResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetQueryResult(::grpc::ServerContext* /*context*/, const ::StorageEngineInstance::Request* /*request*/, ::StorageEngineInstance::QueryResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetQueryResult(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::StorageEngineInstance::Request,::StorageEngineInstance::QueryResult>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Aggregation<WithStreamedUnaryMethod_EndQuery<WithStreamedUnaryMethod_GetQueryResult<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Aggregation<WithStreamedUnaryMethod_EndQuery<WithStreamedUnaryMethod_GetQueryResult<Service > > > StreamedService;
};

class MonitoringModule final {
 public:
  static constexpr char const* service_full_name() {
    return "StorageEngineInstance.MonitoringModule";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status GetDataFileInfo(::grpc::ClientContext* context, const ::StorageEngineInstance::Request& request, ::StorageEngineInstance::DataFileInfo* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StorageEngineInstance::DataFileInfo>> AsyncGetDataFileInfo(::grpc::ClientContext* context, const ::StorageEngineInstance::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StorageEngineInstance::DataFileInfo>>(AsyncGetDataFileInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StorageEngineInstance::DataFileInfo>> PrepareAsyncGetDataFileInfo(::grpc::ClientContext* context, const ::StorageEngineInstance::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StorageEngineInstance::DataFileInfo>>(PrepareAsyncGetDataFileInfoRaw(context, request, cq));
    }
    virtual ::grpc::Status GetSnippetMetaData(::grpc::ClientContext* context, const ::StorageEngineInstance::Request& request, ::StorageEngineInstance::SnippetMetaData* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StorageEngineInstance::SnippetMetaData>> AsyncGetSnippetMetaData(::grpc::ClientContext* context, const ::StorageEngineInstance::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StorageEngineInstance::SnippetMetaData>>(AsyncGetSnippetMetaDataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StorageEngineInstance::SnippetMetaData>> PrepareAsyncGetSnippetMetaData(::grpc::ClientContext* context, const ::StorageEngineInstance::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StorageEngineInstance::SnippetMetaData>>(PrepareAsyncGetSnippetMetaDataRaw(context, request, cq));
    }
    virtual ::grpc::Status SyncMetaDataManager(::grpc::ClientContext* context, const ::StorageEngineInstance::DBInfo& request, ::StorageEngineInstance::Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StorageEngineInstance::Response>> AsyncSyncMetaDataManager(::grpc::ClientContext* context, const ::StorageEngineInstance::DBInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StorageEngineInstance::Response>>(AsyncSyncMetaDataManagerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StorageEngineInstance::Response>> PrepareAsyncSyncMetaDataManager(::grpc::ClientContext* context, const ::StorageEngineInstance::DBInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StorageEngineInstance::Response>>(PrepareAsyncSyncMetaDataManagerRaw(context, request, cq));
    }
    virtual ::grpc::Status SyncDBFileMonitoring(::grpc::ClientContext* context, const ::StorageEngineInstance::DataFileInfo& request, ::StorageEngineInstance::Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StorageEngineInstance::Response>> AsyncSyncDBFileMonitoring(::grpc::ClientContext* context, const ::StorageEngineInstance::DataFileInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StorageEngineInstance::Response>>(AsyncSyncDBFileMonitoringRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StorageEngineInstance::Response>> PrepareAsyncSyncDBFileMonitoring(::grpc::ClientContext* context, const ::StorageEngineInstance::DataFileInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StorageEngineInstance::Response>>(PrepareAsyncSyncDBFileMonitoringRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void GetDataFileInfo(::grpc::ClientContext* context, const ::StorageEngineInstance::Request* request, ::StorageEngineInstance::DataFileInfo* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetDataFileInfo(::grpc::ClientContext* context, const ::StorageEngineInstance::Request* request, ::StorageEngineInstance::DataFileInfo* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetSnippetMetaData(::grpc::ClientContext* context, const ::StorageEngineInstance::Request* request, ::StorageEngineInstance::SnippetMetaData* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetSnippetMetaData(::grpc::ClientContext* context, const ::StorageEngineInstance::Request* request, ::StorageEngineInstance::SnippetMetaData* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void SyncMetaDataManager(::grpc::ClientContext* context, const ::StorageEngineInstance::DBInfo* request, ::StorageEngineInstance::Response* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SyncMetaDataManager(::grpc::ClientContext* context, const ::StorageEngineInstance::DBInfo* request, ::StorageEngineInstance::Response* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void SyncDBFileMonitoring(::grpc::ClientContext* context, const ::StorageEngineInstance::DataFileInfo* request, ::StorageEngineInstance::Response* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SyncDBFileMonitoring(::grpc::ClientContext* context, const ::StorageEngineInstance::DataFileInfo* request, ::StorageEngineInstance::Response* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::StorageEngineInstance::DataFileInfo>* AsyncGetDataFileInfoRaw(::grpc::ClientContext* context, const ::StorageEngineInstance::Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::StorageEngineInstance::DataFileInfo>* PrepareAsyncGetDataFileInfoRaw(::grpc::ClientContext* context, const ::StorageEngineInstance::Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::StorageEngineInstance::SnippetMetaData>* AsyncGetSnippetMetaDataRaw(::grpc::ClientContext* context, const ::StorageEngineInstance::Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::StorageEngineInstance::SnippetMetaData>* PrepareAsyncGetSnippetMetaDataRaw(::grpc::ClientContext* context, const ::StorageEngineInstance::Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::StorageEngineInstance::Response>* AsyncSyncMetaDataManagerRaw(::grpc::ClientContext* context, const ::StorageEngineInstance::DBInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::StorageEngineInstance::Response>* PrepareAsyncSyncMetaDataManagerRaw(::grpc::ClientContext* context, const ::StorageEngineInstance::DBInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::StorageEngineInstance::Response>* AsyncSyncDBFileMonitoringRaw(::grpc::ClientContext* context, const ::StorageEngineInstance::DataFileInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::StorageEngineInstance::Response>* PrepareAsyncSyncDBFileMonitoringRaw(::grpc::ClientContext* context, const ::StorageEngineInstance::DataFileInfo& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status GetDataFileInfo(::grpc::ClientContext* context, const ::StorageEngineInstance::Request& request, ::StorageEngineInstance::DataFileInfo* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::DataFileInfo>> AsyncGetDataFileInfo(::grpc::ClientContext* context, const ::StorageEngineInstance::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::DataFileInfo>>(AsyncGetDataFileInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::DataFileInfo>> PrepareAsyncGetDataFileInfo(::grpc::ClientContext* context, const ::StorageEngineInstance::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::DataFileInfo>>(PrepareAsyncGetDataFileInfoRaw(context, request, cq));
    }
    ::grpc::Status GetSnippetMetaData(::grpc::ClientContext* context, const ::StorageEngineInstance::Request& request, ::StorageEngineInstance::SnippetMetaData* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::SnippetMetaData>> AsyncGetSnippetMetaData(::grpc::ClientContext* context, const ::StorageEngineInstance::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::SnippetMetaData>>(AsyncGetSnippetMetaDataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::SnippetMetaData>> PrepareAsyncGetSnippetMetaData(::grpc::ClientContext* context, const ::StorageEngineInstance::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::SnippetMetaData>>(PrepareAsyncGetSnippetMetaDataRaw(context, request, cq));
    }
    ::grpc::Status SyncMetaDataManager(::grpc::ClientContext* context, const ::StorageEngineInstance::DBInfo& request, ::StorageEngineInstance::Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::Response>> AsyncSyncMetaDataManager(::grpc::ClientContext* context, const ::StorageEngineInstance::DBInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::Response>>(AsyncSyncMetaDataManagerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::Response>> PrepareAsyncSyncMetaDataManager(::grpc::ClientContext* context, const ::StorageEngineInstance::DBInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::Response>>(PrepareAsyncSyncMetaDataManagerRaw(context, request, cq));
    }
    ::grpc::Status SyncDBFileMonitoring(::grpc::ClientContext* context, const ::StorageEngineInstance::DataFileInfo& request, ::StorageEngineInstance::Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::Response>> AsyncSyncDBFileMonitoring(::grpc::ClientContext* context, const ::StorageEngineInstance::DataFileInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::Response>>(AsyncSyncDBFileMonitoringRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::Response>> PrepareAsyncSyncDBFileMonitoring(::grpc::ClientContext* context, const ::StorageEngineInstance::DataFileInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::Response>>(PrepareAsyncSyncDBFileMonitoringRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void GetDataFileInfo(::grpc::ClientContext* context, const ::StorageEngineInstance::Request* request, ::StorageEngineInstance::DataFileInfo* response, std::function<void(::grpc::Status)>) override;
      void GetDataFileInfo(::grpc::ClientContext* context, const ::StorageEngineInstance::Request* request, ::StorageEngineInstance::DataFileInfo* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetSnippetMetaData(::grpc::ClientContext* context, const ::StorageEngineInstance::Request* request, ::StorageEngineInstance::SnippetMetaData* response, std::function<void(::grpc::Status)>) override;
      void GetSnippetMetaData(::grpc::ClientContext* context, const ::StorageEngineInstance::Request* request, ::StorageEngineInstance::SnippetMetaData* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SyncMetaDataManager(::grpc::ClientContext* context, const ::StorageEngineInstance::DBInfo* request, ::StorageEngineInstance::Response* response, std::function<void(::grpc::Status)>) override;
      void SyncMetaDataManager(::grpc::ClientContext* context, const ::StorageEngineInstance::DBInfo* request, ::StorageEngineInstance::Response* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SyncDBFileMonitoring(::grpc::ClientContext* context, const ::StorageEngineInstance::DataFileInfo* request, ::StorageEngineInstance::Response* response, std::function<void(::grpc::Status)>) override;
      void SyncDBFileMonitoring(::grpc::ClientContext* context, const ::StorageEngineInstance::DataFileInfo* request, ::StorageEngineInstance::Response* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::DataFileInfo>* AsyncGetDataFileInfoRaw(::grpc::ClientContext* context, const ::StorageEngineInstance::Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::DataFileInfo>* PrepareAsyncGetDataFileInfoRaw(::grpc::ClientContext* context, const ::StorageEngineInstance::Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::SnippetMetaData>* AsyncGetSnippetMetaDataRaw(::grpc::ClientContext* context, const ::StorageEngineInstance::Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::SnippetMetaData>* PrepareAsyncGetSnippetMetaDataRaw(::grpc::ClientContext* context, const ::StorageEngineInstance::Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::Response>* AsyncSyncMetaDataManagerRaw(::grpc::ClientContext* context, const ::StorageEngineInstance::DBInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::Response>* PrepareAsyncSyncMetaDataManagerRaw(::grpc::ClientContext* context, const ::StorageEngineInstance::DBInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::Response>* AsyncSyncDBFileMonitoringRaw(::grpc::ClientContext* context, const ::StorageEngineInstance::DataFileInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::Response>* PrepareAsyncSyncDBFileMonitoringRaw(::grpc::ClientContext* context, const ::StorageEngineInstance::DataFileInfo& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetDataFileInfo_;
    const ::grpc::internal::RpcMethod rpcmethod_GetSnippetMetaData_;
    const ::grpc::internal::RpcMethod rpcmethod_SyncMetaDataManager_;
    const ::grpc::internal::RpcMethod rpcmethod_SyncDBFileMonitoring_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status GetDataFileInfo(::grpc::ServerContext* context, const ::StorageEngineInstance::Request* request, ::StorageEngineInstance::DataFileInfo* response);
    virtual ::grpc::Status GetSnippetMetaData(::grpc::ServerContext* context, const ::StorageEngineInstance::Request* request, ::StorageEngineInstance::SnippetMetaData* response);
    virtual ::grpc::Status SyncMetaDataManager(::grpc::ServerContext* context, const ::StorageEngineInstance::DBInfo* request, ::StorageEngineInstance::Response* response);
    virtual ::grpc::Status SyncDBFileMonitoring(::grpc::ServerContext* context, const ::StorageEngineInstance::DataFileInfo* request, ::StorageEngineInstance::Response* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetDataFileInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetDataFileInfo() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetDataFileInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDataFileInfo(::grpc::ServerContext* /*context*/, const ::StorageEngineInstance::Request* /*request*/, ::StorageEngineInstance::DataFileInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetDataFileInfo(::grpc::ServerContext* context, ::StorageEngineInstance::Request* request, ::grpc::ServerAsyncResponseWriter< ::StorageEngineInstance::DataFileInfo>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetSnippetMetaData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetSnippetMetaData() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetSnippetMetaData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSnippetMetaData(::grpc::ServerContext* /*context*/, const ::StorageEngineInstance::Request* /*request*/, ::StorageEngineInstance::SnippetMetaData* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetSnippetMetaData(::grpc::ServerContext* context, ::StorageEngineInstance::Request* request, ::grpc::ServerAsyncResponseWriter< ::StorageEngineInstance::SnippetMetaData>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SyncMetaDataManager : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SyncMetaDataManager() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_SyncMetaDataManager() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SyncMetaDataManager(::grpc::ServerContext* /*context*/, const ::StorageEngineInstance::DBInfo* /*request*/, ::StorageEngineInstance::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSyncMetaDataManager(::grpc::ServerContext* context, ::StorageEngineInstance::DBInfo* request, ::grpc::ServerAsyncResponseWriter< ::StorageEngineInstance::Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SyncDBFileMonitoring : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SyncDBFileMonitoring() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_SyncDBFileMonitoring() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SyncDBFileMonitoring(::grpc::ServerContext* /*context*/, const ::StorageEngineInstance::DataFileInfo* /*request*/, ::StorageEngineInstance::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSyncDBFileMonitoring(::grpc::ServerContext* context, ::StorageEngineInstance::DataFileInfo* request, ::grpc::ServerAsyncResponseWriter< ::StorageEngineInstance::Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetDataFileInfo<WithAsyncMethod_GetSnippetMetaData<WithAsyncMethod_SyncMetaDataManager<WithAsyncMethod_SyncDBFileMonitoring<Service > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_GetDataFileInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetDataFileInfo() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::StorageEngineInstance::Request, ::StorageEngineInstance::DataFileInfo>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::StorageEngineInstance::Request* request, ::StorageEngineInstance::DataFileInfo* response) { return this->GetDataFileInfo(context, request, response); }));}
    void SetMessageAllocatorFor_GetDataFileInfo(
        ::grpc::MessageAllocator< ::StorageEngineInstance::Request, ::StorageEngineInstance::DataFileInfo>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::StorageEngineInstance::Request, ::StorageEngineInstance::DataFileInfo>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetDataFileInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDataFileInfo(::grpc::ServerContext* /*context*/, const ::StorageEngineInstance::Request* /*request*/, ::StorageEngineInstance::DataFileInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetDataFileInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::StorageEngineInstance::Request* /*request*/, ::StorageEngineInstance::DataFileInfo* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetSnippetMetaData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetSnippetMetaData() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::StorageEngineInstance::Request, ::StorageEngineInstance::SnippetMetaData>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::StorageEngineInstance::Request* request, ::StorageEngineInstance::SnippetMetaData* response) { return this->GetSnippetMetaData(context, request, response); }));}
    void SetMessageAllocatorFor_GetSnippetMetaData(
        ::grpc::MessageAllocator< ::StorageEngineInstance::Request, ::StorageEngineInstance::SnippetMetaData>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::StorageEngineInstance::Request, ::StorageEngineInstance::SnippetMetaData>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetSnippetMetaData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSnippetMetaData(::grpc::ServerContext* /*context*/, const ::StorageEngineInstance::Request* /*request*/, ::StorageEngineInstance::SnippetMetaData* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetSnippetMetaData(
      ::grpc::CallbackServerContext* /*context*/, const ::StorageEngineInstance::Request* /*request*/, ::StorageEngineInstance::SnippetMetaData* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SyncMetaDataManager : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SyncMetaDataManager() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::StorageEngineInstance::DBInfo, ::StorageEngineInstance::Response>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::StorageEngineInstance::DBInfo* request, ::StorageEngineInstance::Response* response) { return this->SyncMetaDataManager(context, request, response); }));}
    void SetMessageAllocatorFor_SyncMetaDataManager(
        ::grpc::MessageAllocator< ::StorageEngineInstance::DBInfo, ::StorageEngineInstance::Response>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::StorageEngineInstance::DBInfo, ::StorageEngineInstance::Response>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SyncMetaDataManager() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SyncMetaDataManager(::grpc::ServerContext* /*context*/, const ::StorageEngineInstance::DBInfo* /*request*/, ::StorageEngineInstance::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SyncMetaDataManager(
      ::grpc::CallbackServerContext* /*context*/, const ::StorageEngineInstance::DBInfo* /*request*/, ::StorageEngineInstance::Response* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SyncDBFileMonitoring : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SyncDBFileMonitoring() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::StorageEngineInstance::DataFileInfo, ::StorageEngineInstance::Response>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::StorageEngineInstance::DataFileInfo* request, ::StorageEngineInstance::Response* response) { return this->SyncDBFileMonitoring(context, request, response); }));}
    void SetMessageAllocatorFor_SyncDBFileMonitoring(
        ::grpc::MessageAllocator< ::StorageEngineInstance::DataFileInfo, ::StorageEngineInstance::Response>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::StorageEngineInstance::DataFileInfo, ::StorageEngineInstance::Response>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SyncDBFileMonitoring() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SyncDBFileMonitoring(::grpc::ServerContext* /*context*/, const ::StorageEngineInstance::DataFileInfo* /*request*/, ::StorageEngineInstance::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SyncDBFileMonitoring(
      ::grpc::CallbackServerContext* /*context*/, const ::StorageEngineInstance::DataFileInfo* /*request*/, ::StorageEngineInstance::Response* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_GetDataFileInfo<WithCallbackMethod_GetSnippetMetaData<WithCallbackMethod_SyncMetaDataManager<WithCallbackMethod_SyncDBFileMonitoring<Service > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetDataFileInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetDataFileInfo() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetDataFileInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDataFileInfo(::grpc::ServerContext* /*context*/, const ::StorageEngineInstance::Request* /*request*/, ::StorageEngineInstance::DataFileInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetSnippetMetaData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetSnippetMetaData() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetSnippetMetaData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSnippetMetaData(::grpc::ServerContext* /*context*/, const ::StorageEngineInstance::Request* /*request*/, ::StorageEngineInstance::SnippetMetaData* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SyncMetaDataManager : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SyncMetaDataManager() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_SyncMetaDataManager() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SyncMetaDataManager(::grpc::ServerContext* /*context*/, const ::StorageEngineInstance::DBInfo* /*request*/, ::StorageEngineInstance::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SyncDBFileMonitoring : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SyncDBFileMonitoring() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_SyncDBFileMonitoring() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SyncDBFileMonitoring(::grpc::ServerContext* /*context*/, const ::StorageEngineInstance::DataFileInfo* /*request*/, ::StorageEngineInstance::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetDataFileInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetDataFileInfo() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetDataFileInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDataFileInfo(::grpc::ServerContext* /*context*/, const ::StorageEngineInstance::Request* /*request*/, ::StorageEngineInstance::DataFileInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetDataFileInfo(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetSnippetMetaData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetSnippetMetaData() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetSnippetMetaData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSnippetMetaData(::grpc::ServerContext* /*context*/, const ::StorageEngineInstance::Request* /*request*/, ::StorageEngineInstance::SnippetMetaData* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetSnippetMetaData(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SyncMetaDataManager : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SyncMetaDataManager() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_SyncMetaDataManager() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SyncMetaDataManager(::grpc::ServerContext* /*context*/, const ::StorageEngineInstance::DBInfo* /*request*/, ::StorageEngineInstance::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSyncMetaDataManager(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SyncDBFileMonitoring : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SyncDBFileMonitoring() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_SyncDBFileMonitoring() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SyncDBFileMonitoring(::grpc::ServerContext* /*context*/, const ::StorageEngineInstance::DataFileInfo* /*request*/, ::StorageEngineInstance::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSyncDBFileMonitoring(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetDataFileInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetDataFileInfo() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetDataFileInfo(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetDataFileInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDataFileInfo(::grpc::ServerContext* /*context*/, const ::StorageEngineInstance::Request* /*request*/, ::StorageEngineInstance::DataFileInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetDataFileInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetSnippetMetaData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetSnippetMetaData() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetSnippetMetaData(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetSnippetMetaData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSnippetMetaData(::grpc::ServerContext* /*context*/, const ::StorageEngineInstance::Request* /*request*/, ::StorageEngineInstance::SnippetMetaData* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetSnippetMetaData(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SyncMetaDataManager : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SyncMetaDataManager() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SyncMetaDataManager(context, request, response); }));
    }
    ~WithRawCallbackMethod_SyncMetaDataManager() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SyncMetaDataManager(::grpc::ServerContext* /*context*/, const ::StorageEngineInstance::DBInfo* /*request*/, ::StorageEngineInstance::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SyncMetaDataManager(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SyncDBFileMonitoring : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SyncDBFileMonitoring() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SyncDBFileMonitoring(context, request, response); }));
    }
    ~WithRawCallbackMethod_SyncDBFileMonitoring() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SyncDBFileMonitoring(::grpc::ServerContext* /*context*/, const ::StorageEngineInstance::DataFileInfo* /*request*/, ::StorageEngineInstance::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SyncDBFileMonitoring(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetDataFileInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetDataFileInfo() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::StorageEngineInstance::Request, ::StorageEngineInstance::DataFileInfo>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::StorageEngineInstance::Request, ::StorageEngineInstance::DataFileInfo>* streamer) {
                       return this->StreamedGetDataFileInfo(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetDataFileInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetDataFileInfo(::grpc::ServerContext* /*context*/, const ::StorageEngineInstance::Request* /*request*/, ::StorageEngineInstance::DataFileInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetDataFileInfo(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::StorageEngineInstance::Request,::StorageEngineInstance::DataFileInfo>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetSnippetMetaData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetSnippetMetaData() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::StorageEngineInstance::Request, ::StorageEngineInstance::SnippetMetaData>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::StorageEngineInstance::Request, ::StorageEngineInstance::SnippetMetaData>* streamer) {
                       return this->StreamedGetSnippetMetaData(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetSnippetMetaData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetSnippetMetaData(::grpc::ServerContext* /*context*/, const ::StorageEngineInstance::Request* /*request*/, ::StorageEngineInstance::SnippetMetaData* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetSnippetMetaData(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::StorageEngineInstance::Request,::StorageEngineInstance::SnippetMetaData>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SyncMetaDataManager : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SyncMetaDataManager() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::StorageEngineInstance::DBInfo, ::StorageEngineInstance::Response>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::StorageEngineInstance::DBInfo, ::StorageEngineInstance::Response>* streamer) {
                       return this->StreamedSyncMetaDataManager(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SyncMetaDataManager() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SyncMetaDataManager(::grpc::ServerContext* /*context*/, const ::StorageEngineInstance::DBInfo* /*request*/, ::StorageEngineInstance::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSyncMetaDataManager(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::StorageEngineInstance::DBInfo,::StorageEngineInstance::Response>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SyncDBFileMonitoring : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SyncDBFileMonitoring() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::StorageEngineInstance::DataFileInfo, ::StorageEngineInstance::Response>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::StorageEngineInstance::DataFileInfo, ::StorageEngineInstance::Response>* streamer) {
                       return this->StreamedSyncDBFileMonitoring(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SyncDBFileMonitoring() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SyncDBFileMonitoring(::grpc::ServerContext* /*context*/, const ::StorageEngineInstance::DataFileInfo* /*request*/, ::StorageEngineInstance::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSyncDBFileMonitoring(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::StorageEngineInstance::DataFileInfo,::StorageEngineInstance::Response>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetDataFileInfo<WithStreamedUnaryMethod_GetSnippetMetaData<WithStreamedUnaryMethod_SyncMetaDataManager<WithStreamedUnaryMethod_SyncDBFileMonitoring<Service > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetDataFileInfo<WithStreamedUnaryMethod_GetSnippetMetaData<WithStreamedUnaryMethod_SyncMetaDataManager<WithStreamedUnaryMethod_SyncDBFileMonitoring<Service > > > > StreamedService;
};

class OffloadingModule final {
 public:
  static constexpr char const* service_full_name() {
    return "StorageEngineInstance.OffloadingModule";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    std::unique_ptr< ::grpc::ClientWriterInterface< ::StorageEngineInstance::SnippetRequest>> QueryOffload(::grpc::ClientContext* context, ::StorageEngineInstance::QueryStringResult* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::StorageEngineInstance::SnippetRequest>>(QueryOffloadRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::StorageEngineInstance::SnippetRequest>> AsyncQueryOffload(::grpc::ClientContext* context, ::StorageEngineInstance::QueryStringResult* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::StorageEngineInstance::SnippetRequest>>(AsyncQueryOffloadRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::StorageEngineInstance::SnippetRequest>> PrepareAsyncQueryOffload(::grpc::ClientContext* context, ::StorageEngineInstance::QueryStringResult* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::StorageEngineInstance::SnippetRequest>>(PrepareAsyncQueryOffloadRaw(context, response, cq));
    }
    virtual ::grpc::Status PushCSDMetric(::grpc::ClientContext* context, const ::StorageEngineInstance::CSDMetricList& request, ::StorageEngineInstance::Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StorageEngineInstance::Response>> AsyncPushCSDMetric(::grpc::ClientContext* context, const ::StorageEngineInstance::CSDMetricList& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StorageEngineInstance::Response>>(AsyncPushCSDMetricRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StorageEngineInstance::Response>> PrepareAsyncPushCSDMetric(::grpc::ClientContext* context, const ::StorageEngineInstance::CSDMetricList& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StorageEngineInstance::Response>>(PrepareAsyncPushCSDMetricRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void QueryOffload(::grpc::ClientContext* context, ::StorageEngineInstance::QueryStringResult* response, ::grpc::ClientWriteReactor< ::StorageEngineInstance::SnippetRequest>* reactor) = 0;
      virtual void PushCSDMetric(::grpc::ClientContext* context, const ::StorageEngineInstance::CSDMetricList* request, ::StorageEngineInstance::Response* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PushCSDMetric(::grpc::ClientContext* context, const ::StorageEngineInstance::CSDMetricList* request, ::StorageEngineInstance::Response* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientWriterInterface< ::StorageEngineInstance::SnippetRequest>* QueryOffloadRaw(::grpc::ClientContext* context, ::StorageEngineInstance::QueryStringResult* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::StorageEngineInstance::SnippetRequest>* AsyncQueryOffloadRaw(::grpc::ClientContext* context, ::StorageEngineInstance::QueryStringResult* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::StorageEngineInstance::SnippetRequest>* PrepareAsyncQueryOffloadRaw(::grpc::ClientContext* context, ::StorageEngineInstance::QueryStringResult* response, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::StorageEngineInstance::Response>* AsyncPushCSDMetricRaw(::grpc::ClientContext* context, const ::StorageEngineInstance::CSDMetricList& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::StorageEngineInstance::Response>* PrepareAsyncPushCSDMetricRaw(::grpc::ClientContext* context, const ::StorageEngineInstance::CSDMetricList& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    std::unique_ptr< ::grpc::ClientWriter< ::StorageEngineInstance::SnippetRequest>> QueryOffload(::grpc::ClientContext* context, ::StorageEngineInstance::QueryStringResult* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::StorageEngineInstance::SnippetRequest>>(QueryOffloadRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::StorageEngineInstance::SnippetRequest>> AsyncQueryOffload(::grpc::ClientContext* context, ::StorageEngineInstance::QueryStringResult* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::StorageEngineInstance::SnippetRequest>>(AsyncQueryOffloadRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::StorageEngineInstance::SnippetRequest>> PrepareAsyncQueryOffload(::grpc::ClientContext* context, ::StorageEngineInstance::QueryStringResult* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::StorageEngineInstance::SnippetRequest>>(PrepareAsyncQueryOffloadRaw(context, response, cq));
    }
    ::grpc::Status PushCSDMetric(::grpc::ClientContext* context, const ::StorageEngineInstance::CSDMetricList& request, ::StorageEngineInstance::Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::Response>> AsyncPushCSDMetric(::grpc::ClientContext* context, const ::StorageEngineInstance::CSDMetricList& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::Response>>(AsyncPushCSDMetricRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::Response>> PrepareAsyncPushCSDMetric(::grpc::ClientContext* context, const ::StorageEngineInstance::CSDMetricList& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::Response>>(PrepareAsyncPushCSDMetricRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void QueryOffload(::grpc::ClientContext* context, ::StorageEngineInstance::QueryStringResult* response, ::grpc::ClientWriteReactor< ::StorageEngineInstance::SnippetRequest>* reactor) override;
      void PushCSDMetric(::grpc::ClientContext* context, const ::StorageEngineInstance::CSDMetricList* request, ::StorageEngineInstance::Response* response, std::function<void(::grpc::Status)>) override;
      void PushCSDMetric(::grpc::ClientContext* context, const ::StorageEngineInstance::CSDMetricList* request, ::StorageEngineInstance::Response* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientWriter< ::StorageEngineInstance::SnippetRequest>* QueryOffloadRaw(::grpc::ClientContext* context, ::StorageEngineInstance::QueryStringResult* response) override;
    ::grpc::ClientAsyncWriter< ::StorageEngineInstance::SnippetRequest>* AsyncQueryOffloadRaw(::grpc::ClientContext* context, ::StorageEngineInstance::QueryStringResult* response, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncWriter< ::StorageEngineInstance::SnippetRequest>* PrepareAsyncQueryOffloadRaw(::grpc::ClientContext* context, ::StorageEngineInstance::QueryStringResult* response, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::Response>* AsyncPushCSDMetricRaw(::grpc::ClientContext* context, const ::StorageEngineInstance::CSDMetricList& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::Response>* PrepareAsyncPushCSDMetricRaw(::grpc::ClientContext* context, const ::StorageEngineInstance::CSDMetricList& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_QueryOffload_;
    const ::grpc::internal::RpcMethod rpcmethod_PushCSDMetric_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status QueryOffload(::grpc::ServerContext* context, ::grpc::ServerReader< ::StorageEngineInstance::SnippetRequest>* reader, ::StorageEngineInstance::QueryStringResult* response);
    virtual ::grpc::Status PushCSDMetric(::grpc::ServerContext* context, const ::StorageEngineInstance::CSDMetricList* request, ::StorageEngineInstance::Response* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_QueryOffload : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_QueryOffload() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_QueryOffload() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryOffload(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::StorageEngineInstance::SnippetRequest>* /*reader*/, ::StorageEngineInstance::QueryStringResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestQueryOffload(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::StorageEngineInstance::QueryStringResult, ::StorageEngineInstance::SnippetRequest>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(0, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PushCSDMetric : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PushCSDMetric() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_PushCSDMetric() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PushCSDMetric(::grpc::ServerContext* /*context*/, const ::StorageEngineInstance::CSDMetricList* /*request*/, ::StorageEngineInstance::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPushCSDMetric(::grpc::ServerContext* context, ::StorageEngineInstance::CSDMetricList* request, ::grpc::ServerAsyncResponseWriter< ::StorageEngineInstance::Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_QueryOffload<WithAsyncMethod_PushCSDMetric<Service > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_QueryOffload : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_QueryOffload() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackClientStreamingHandler< ::StorageEngineInstance::SnippetRequest, ::StorageEngineInstance::QueryStringResult>(
            [this](
                   ::grpc::CallbackServerContext* context, ::StorageEngineInstance::QueryStringResult* response) { return this->QueryOffload(context, response); }));
    }
    ~WithCallbackMethod_QueryOffload() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryOffload(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::StorageEngineInstance::SnippetRequest>* /*reader*/, ::StorageEngineInstance::QueryStringResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::StorageEngineInstance::SnippetRequest>* QueryOffload(
      ::grpc::CallbackServerContext* /*context*/, ::StorageEngineInstance::QueryStringResult* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_PushCSDMetric : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_PushCSDMetric() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::StorageEngineInstance::CSDMetricList, ::StorageEngineInstance::Response>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::StorageEngineInstance::CSDMetricList* request, ::StorageEngineInstance::Response* response) { return this->PushCSDMetric(context, request, response); }));}
    void SetMessageAllocatorFor_PushCSDMetric(
        ::grpc::MessageAllocator< ::StorageEngineInstance::CSDMetricList, ::StorageEngineInstance::Response>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::StorageEngineInstance::CSDMetricList, ::StorageEngineInstance::Response>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_PushCSDMetric() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PushCSDMetric(::grpc::ServerContext* /*context*/, const ::StorageEngineInstance::CSDMetricList* /*request*/, ::StorageEngineInstance::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PushCSDMetric(
      ::grpc::CallbackServerContext* /*context*/, const ::StorageEngineInstance::CSDMetricList* /*request*/, ::StorageEngineInstance::Response* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_QueryOffload<WithCallbackMethod_PushCSDMetric<Service > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_QueryOffload : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_QueryOffload() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_QueryOffload() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryOffload(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::StorageEngineInstance::SnippetRequest>* /*reader*/, ::StorageEngineInstance::QueryStringResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PushCSDMetric : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PushCSDMetric() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_PushCSDMetric() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PushCSDMetric(::grpc::ServerContext* /*context*/, const ::StorageEngineInstance::CSDMetricList* /*request*/, ::StorageEngineInstance::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_QueryOffload : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_QueryOffload() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_QueryOffload() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryOffload(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::StorageEngineInstance::SnippetRequest>* /*reader*/, ::StorageEngineInstance::QueryStringResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestQueryOffload(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(0, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PushCSDMetric : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PushCSDMetric() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_PushCSDMetric() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PushCSDMetric(::grpc::ServerContext* /*context*/, const ::StorageEngineInstance::CSDMetricList* /*request*/, ::StorageEngineInstance::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPushCSDMetric(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_QueryOffload : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_QueryOffload() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackClientStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, ::grpc::ByteBuffer* response) { return this->QueryOffload(context, response); }));
    }
    ~WithRawCallbackMethod_QueryOffload() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryOffload(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::StorageEngineInstance::SnippetRequest>* /*reader*/, ::StorageEngineInstance::QueryStringResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::grpc::ByteBuffer>* QueryOffload(
      ::grpc::CallbackServerContext* /*context*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_PushCSDMetric : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_PushCSDMetric() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PushCSDMetric(context, request, response); }));
    }
    ~WithRawCallbackMethod_PushCSDMetric() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PushCSDMetric(::grpc::ServerContext* /*context*/, const ::StorageEngineInstance::CSDMetricList* /*request*/, ::StorageEngineInstance::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PushCSDMetric(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PushCSDMetric : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PushCSDMetric() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::StorageEngineInstance::CSDMetricList, ::StorageEngineInstance::Response>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::StorageEngineInstance::CSDMetricList, ::StorageEngineInstance::Response>* streamer) {
                       return this->StreamedPushCSDMetric(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PushCSDMetric() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PushCSDMetric(::grpc::ServerContext* /*context*/, const ::StorageEngineInstance::CSDMetricList* /*request*/, ::StorageEngineInstance::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPushCSDMetric(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::StorageEngineInstance::CSDMetricList,::StorageEngineInstance::Response>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_PushCSDMetric<Service > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_PushCSDMetric<Service > StreamedService;
};

class StorageManager final {
 public:
  static constexpr char const* service_full_name() {
    return "StorageEngineInstance.StorageManager";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status RequestPBA(::grpc::ClientContext* context, const ::StorageEngineInstance::LBA2PBARequest& request, ::StorageEngineInstance::LBA2PBAResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StorageEngineInstance::LBA2PBAResponse>> AsyncRequestPBA(::grpc::ClientContext* context, const ::StorageEngineInstance::LBA2PBARequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StorageEngineInstance::LBA2PBAResponse>>(AsyncRequestPBARaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StorageEngineInstance::LBA2PBAResponse>> PrepareAsyncRequestPBA(::grpc::ClientContext* context, const ::StorageEngineInstance::LBA2PBARequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StorageEngineInstance::LBA2PBAResponse>>(PrepareAsyncRequestPBARaw(context, request, cq));
    }
    virtual ::grpc::Status InitDBFileMonitoring(::grpc::ClientContext* context, const ::StorageEngineInstance::SSTList& request, ::StorageEngineInstance::DataFileInfo* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StorageEngineInstance::DataFileInfo>> AsyncInitDBFileMonitoring(::grpc::ClientContext* context, const ::StorageEngineInstance::SSTList& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StorageEngineInstance::DataFileInfo>>(AsyncInitDBFileMonitoringRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StorageEngineInstance::DataFileInfo>> PrepareAsyncInitDBFileMonitoring(::grpc::ClientContext* context, const ::StorageEngineInstance::SSTList& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StorageEngineInstance::DataFileInfo>>(PrepareAsyncInitDBFileMonitoringRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void RequestPBA(::grpc::ClientContext* context, const ::StorageEngineInstance::LBA2PBARequest* request, ::StorageEngineInstance::LBA2PBAResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RequestPBA(::grpc::ClientContext* context, const ::StorageEngineInstance::LBA2PBARequest* request, ::StorageEngineInstance::LBA2PBAResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void InitDBFileMonitoring(::grpc::ClientContext* context, const ::StorageEngineInstance::SSTList* request, ::StorageEngineInstance::DataFileInfo* response, std::function<void(::grpc::Status)>) = 0;
      virtual void InitDBFileMonitoring(::grpc::ClientContext* context, const ::StorageEngineInstance::SSTList* request, ::StorageEngineInstance::DataFileInfo* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::StorageEngineInstance::LBA2PBAResponse>* AsyncRequestPBARaw(::grpc::ClientContext* context, const ::StorageEngineInstance::LBA2PBARequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::StorageEngineInstance::LBA2PBAResponse>* PrepareAsyncRequestPBARaw(::grpc::ClientContext* context, const ::StorageEngineInstance::LBA2PBARequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::StorageEngineInstance::DataFileInfo>* AsyncInitDBFileMonitoringRaw(::grpc::ClientContext* context, const ::StorageEngineInstance::SSTList& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::StorageEngineInstance::DataFileInfo>* PrepareAsyncInitDBFileMonitoringRaw(::grpc::ClientContext* context, const ::StorageEngineInstance::SSTList& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status RequestPBA(::grpc::ClientContext* context, const ::StorageEngineInstance::LBA2PBARequest& request, ::StorageEngineInstance::LBA2PBAResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::LBA2PBAResponse>> AsyncRequestPBA(::grpc::ClientContext* context, const ::StorageEngineInstance::LBA2PBARequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::LBA2PBAResponse>>(AsyncRequestPBARaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::LBA2PBAResponse>> PrepareAsyncRequestPBA(::grpc::ClientContext* context, const ::StorageEngineInstance::LBA2PBARequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::LBA2PBAResponse>>(PrepareAsyncRequestPBARaw(context, request, cq));
    }
    ::grpc::Status InitDBFileMonitoring(::grpc::ClientContext* context, const ::StorageEngineInstance::SSTList& request, ::StorageEngineInstance::DataFileInfo* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::DataFileInfo>> AsyncInitDBFileMonitoring(::grpc::ClientContext* context, const ::StorageEngineInstance::SSTList& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::DataFileInfo>>(AsyncInitDBFileMonitoringRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::DataFileInfo>> PrepareAsyncInitDBFileMonitoring(::grpc::ClientContext* context, const ::StorageEngineInstance::SSTList& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::DataFileInfo>>(PrepareAsyncInitDBFileMonitoringRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void RequestPBA(::grpc::ClientContext* context, const ::StorageEngineInstance::LBA2PBARequest* request, ::StorageEngineInstance::LBA2PBAResponse* response, std::function<void(::grpc::Status)>) override;
      void RequestPBA(::grpc::ClientContext* context, const ::StorageEngineInstance::LBA2PBARequest* request, ::StorageEngineInstance::LBA2PBAResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void InitDBFileMonitoring(::grpc::ClientContext* context, const ::StorageEngineInstance::SSTList* request, ::StorageEngineInstance::DataFileInfo* response, std::function<void(::grpc::Status)>) override;
      void InitDBFileMonitoring(::grpc::ClientContext* context, const ::StorageEngineInstance::SSTList* request, ::StorageEngineInstance::DataFileInfo* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::LBA2PBAResponse>* AsyncRequestPBARaw(::grpc::ClientContext* context, const ::StorageEngineInstance::LBA2PBARequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::LBA2PBAResponse>* PrepareAsyncRequestPBARaw(::grpc::ClientContext* context, const ::StorageEngineInstance::LBA2PBARequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::DataFileInfo>* AsyncInitDBFileMonitoringRaw(::grpc::ClientContext* context, const ::StorageEngineInstance::SSTList& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::DataFileInfo>* PrepareAsyncInitDBFileMonitoringRaw(::grpc::ClientContext* context, const ::StorageEngineInstance::SSTList& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_RequestPBA_;
    const ::grpc::internal::RpcMethod rpcmethod_InitDBFileMonitoring_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status RequestPBA(::grpc::ServerContext* context, const ::StorageEngineInstance::LBA2PBARequest* request, ::StorageEngineInstance::LBA2PBAResponse* response);
    virtual ::grpc::Status InitDBFileMonitoring(::grpc::ServerContext* context, const ::StorageEngineInstance::SSTList* request, ::StorageEngineInstance::DataFileInfo* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_RequestPBA : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RequestPBA() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_RequestPBA() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestPBA(::grpc::ServerContext* /*context*/, const ::StorageEngineInstance::LBA2PBARequest* /*request*/, ::StorageEngineInstance::LBA2PBAResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRequestPBA(::grpc::ServerContext* context, ::StorageEngineInstance::LBA2PBARequest* request, ::grpc::ServerAsyncResponseWriter< ::StorageEngineInstance::LBA2PBAResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_InitDBFileMonitoring : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_InitDBFileMonitoring() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_InitDBFileMonitoring() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InitDBFileMonitoring(::grpc::ServerContext* /*context*/, const ::StorageEngineInstance::SSTList* /*request*/, ::StorageEngineInstance::DataFileInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInitDBFileMonitoring(::grpc::ServerContext* context, ::StorageEngineInstance::SSTList* request, ::grpc::ServerAsyncResponseWriter< ::StorageEngineInstance::DataFileInfo>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_RequestPBA<WithAsyncMethod_InitDBFileMonitoring<Service > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_RequestPBA : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_RequestPBA() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::StorageEngineInstance::LBA2PBARequest, ::StorageEngineInstance::LBA2PBAResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::StorageEngineInstance::LBA2PBARequest* request, ::StorageEngineInstance::LBA2PBAResponse* response) { return this->RequestPBA(context, request, response); }));}
    void SetMessageAllocatorFor_RequestPBA(
        ::grpc::MessageAllocator< ::StorageEngineInstance::LBA2PBARequest, ::StorageEngineInstance::LBA2PBAResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::StorageEngineInstance::LBA2PBARequest, ::StorageEngineInstance::LBA2PBAResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_RequestPBA() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestPBA(::grpc::ServerContext* /*context*/, const ::StorageEngineInstance::LBA2PBARequest* /*request*/, ::StorageEngineInstance::LBA2PBAResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RequestPBA(
      ::grpc::CallbackServerContext* /*context*/, const ::StorageEngineInstance::LBA2PBARequest* /*request*/, ::StorageEngineInstance::LBA2PBAResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_InitDBFileMonitoring : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_InitDBFileMonitoring() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::StorageEngineInstance::SSTList, ::StorageEngineInstance::DataFileInfo>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::StorageEngineInstance::SSTList* request, ::StorageEngineInstance::DataFileInfo* response) { return this->InitDBFileMonitoring(context, request, response); }));}
    void SetMessageAllocatorFor_InitDBFileMonitoring(
        ::grpc::MessageAllocator< ::StorageEngineInstance::SSTList, ::StorageEngineInstance::DataFileInfo>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::StorageEngineInstance::SSTList, ::StorageEngineInstance::DataFileInfo>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_InitDBFileMonitoring() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InitDBFileMonitoring(::grpc::ServerContext* /*context*/, const ::StorageEngineInstance::SSTList* /*request*/, ::StorageEngineInstance::DataFileInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* InitDBFileMonitoring(
      ::grpc::CallbackServerContext* /*context*/, const ::StorageEngineInstance::SSTList* /*request*/, ::StorageEngineInstance::DataFileInfo* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_RequestPBA<WithCallbackMethod_InitDBFileMonitoring<Service > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_RequestPBA : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RequestPBA() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_RequestPBA() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestPBA(::grpc::ServerContext* /*context*/, const ::StorageEngineInstance::LBA2PBARequest* /*request*/, ::StorageEngineInstance::LBA2PBAResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_InitDBFileMonitoring : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_InitDBFileMonitoring() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_InitDBFileMonitoring() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InitDBFileMonitoring(::grpc::ServerContext* /*context*/, const ::StorageEngineInstance::SSTList* /*request*/, ::StorageEngineInstance::DataFileInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_RequestPBA : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RequestPBA() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_RequestPBA() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestPBA(::grpc::ServerContext* /*context*/, const ::StorageEngineInstance::LBA2PBARequest* /*request*/, ::StorageEngineInstance::LBA2PBAResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRequestPBA(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_InitDBFileMonitoring : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_InitDBFileMonitoring() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_InitDBFileMonitoring() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InitDBFileMonitoring(::grpc::ServerContext* /*context*/, const ::StorageEngineInstance::SSTList* /*request*/, ::StorageEngineInstance::DataFileInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInitDBFileMonitoring(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_RequestPBA : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_RequestPBA() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RequestPBA(context, request, response); }));
    }
    ~WithRawCallbackMethod_RequestPBA() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestPBA(::grpc::ServerContext* /*context*/, const ::StorageEngineInstance::LBA2PBARequest* /*request*/, ::StorageEngineInstance::LBA2PBAResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RequestPBA(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_InitDBFileMonitoring : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_InitDBFileMonitoring() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->InitDBFileMonitoring(context, request, response); }));
    }
    ~WithRawCallbackMethod_InitDBFileMonitoring() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InitDBFileMonitoring(::grpc::ServerContext* /*context*/, const ::StorageEngineInstance::SSTList* /*request*/, ::StorageEngineInstance::DataFileInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* InitDBFileMonitoring(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RequestPBA : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RequestPBA() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::StorageEngineInstance::LBA2PBARequest, ::StorageEngineInstance::LBA2PBAResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::StorageEngineInstance::LBA2PBARequest, ::StorageEngineInstance::LBA2PBAResponse>* streamer) {
                       return this->StreamedRequestPBA(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RequestPBA() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RequestPBA(::grpc::ServerContext* /*context*/, const ::StorageEngineInstance::LBA2PBARequest* /*request*/, ::StorageEngineInstance::LBA2PBAResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRequestPBA(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::StorageEngineInstance::LBA2PBARequest,::StorageEngineInstance::LBA2PBAResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_InitDBFileMonitoring : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_InitDBFileMonitoring() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::StorageEngineInstance::SSTList, ::StorageEngineInstance::DataFileInfo>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::StorageEngineInstance::SSTList, ::StorageEngineInstance::DataFileInfo>* streamer) {
                       return this->StreamedInitDBFileMonitoring(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_InitDBFileMonitoring() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status InitDBFileMonitoring(::grpc::ServerContext* /*context*/, const ::StorageEngineInstance::SSTList* /*request*/, ::StorageEngineInstance::DataFileInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedInitDBFileMonitoring(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::StorageEngineInstance::SSTList,::StorageEngineInstance::DataFileInfo>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_RequestPBA<WithStreamedUnaryMethod_InitDBFileMonitoring<Service > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_RequestPBA<WithStreamedUnaryMethod_InitDBFileMonitoring<Service > > StreamedService;
};

class WALManager final {
 public:
  static constexpr char const* service_full_name() {
    return "StorageEngineInstance.WALManager";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status RequestWAL(::grpc::ClientContext* context, const ::StorageEngineInstance::WALRequest& request, ::StorageEngineInstance::WALResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StorageEngineInstance::WALResponse>> AsyncRequestWAL(::grpc::ClientContext* context, const ::StorageEngineInstance::WALRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StorageEngineInstance::WALResponse>>(AsyncRequestWALRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StorageEngineInstance::WALResponse>> PrepareAsyncRequestWAL(::grpc::ClientContext* context, const ::StorageEngineInstance::WALRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StorageEngineInstance::WALResponse>>(PrepareAsyncRequestWALRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void RequestWAL(::grpc::ClientContext* context, const ::StorageEngineInstance::WALRequest* request, ::StorageEngineInstance::WALResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RequestWAL(::grpc::ClientContext* context, const ::StorageEngineInstance::WALRequest* request, ::StorageEngineInstance::WALResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::StorageEngineInstance::WALResponse>* AsyncRequestWALRaw(::grpc::ClientContext* context, const ::StorageEngineInstance::WALRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::StorageEngineInstance::WALResponse>* PrepareAsyncRequestWALRaw(::grpc::ClientContext* context, const ::StorageEngineInstance::WALRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status RequestWAL(::grpc::ClientContext* context, const ::StorageEngineInstance::WALRequest& request, ::StorageEngineInstance::WALResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::WALResponse>> AsyncRequestWAL(::grpc::ClientContext* context, const ::StorageEngineInstance::WALRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::WALResponse>>(AsyncRequestWALRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::WALResponse>> PrepareAsyncRequestWAL(::grpc::ClientContext* context, const ::StorageEngineInstance::WALRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::WALResponse>>(PrepareAsyncRequestWALRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void RequestWAL(::grpc::ClientContext* context, const ::StorageEngineInstance::WALRequest* request, ::StorageEngineInstance::WALResponse* response, std::function<void(::grpc::Status)>) override;
      void RequestWAL(::grpc::ClientContext* context, const ::StorageEngineInstance::WALRequest* request, ::StorageEngineInstance::WALResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::WALResponse>* AsyncRequestWALRaw(::grpc::ClientContext* context, const ::StorageEngineInstance::WALRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::WALResponse>* PrepareAsyncRequestWALRaw(::grpc::ClientContext* context, const ::StorageEngineInstance::WALRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_RequestWAL_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status RequestWAL(::grpc::ServerContext* context, const ::StorageEngineInstance::WALRequest* request, ::StorageEngineInstance::WALResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_RequestWAL : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RequestWAL() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_RequestWAL() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestWAL(::grpc::ServerContext* /*context*/, const ::StorageEngineInstance::WALRequest* /*request*/, ::StorageEngineInstance::WALResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRequestWAL(::grpc::ServerContext* context, ::StorageEngineInstance::WALRequest* request, ::grpc::ServerAsyncResponseWriter< ::StorageEngineInstance::WALResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_RequestWAL<Service > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_RequestWAL : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_RequestWAL() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::StorageEngineInstance::WALRequest, ::StorageEngineInstance::WALResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::StorageEngineInstance::WALRequest* request, ::StorageEngineInstance::WALResponse* response) { return this->RequestWAL(context, request, response); }));}
    void SetMessageAllocatorFor_RequestWAL(
        ::grpc::MessageAllocator< ::StorageEngineInstance::WALRequest, ::StorageEngineInstance::WALResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::StorageEngineInstance::WALRequest, ::StorageEngineInstance::WALResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_RequestWAL() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestWAL(::grpc::ServerContext* /*context*/, const ::StorageEngineInstance::WALRequest* /*request*/, ::StorageEngineInstance::WALResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RequestWAL(
      ::grpc::CallbackServerContext* /*context*/, const ::StorageEngineInstance::WALRequest* /*request*/, ::StorageEngineInstance::WALResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_RequestWAL<Service > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_RequestWAL : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RequestWAL() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_RequestWAL() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestWAL(::grpc::ServerContext* /*context*/, const ::StorageEngineInstance::WALRequest* /*request*/, ::StorageEngineInstance::WALResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_RequestWAL : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RequestWAL() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_RequestWAL() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestWAL(::grpc::ServerContext* /*context*/, const ::StorageEngineInstance::WALRequest* /*request*/, ::StorageEngineInstance::WALResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRequestWAL(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_RequestWAL : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_RequestWAL() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RequestWAL(context, request, response); }));
    }
    ~WithRawCallbackMethod_RequestWAL() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestWAL(::grpc::ServerContext* /*context*/, const ::StorageEngineInstance::WALRequest* /*request*/, ::StorageEngineInstance::WALResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RequestWAL(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RequestWAL : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RequestWAL() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::StorageEngineInstance::WALRequest, ::StorageEngineInstance::WALResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::StorageEngineInstance::WALRequest, ::StorageEngineInstance::WALResponse>* streamer) {
                       return this->StreamedRequestWAL(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RequestWAL() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RequestWAL(::grpc::ServerContext* /*context*/, const ::StorageEngineInstance::WALRequest* /*request*/, ::StorageEngineInstance::WALResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRequestWAL(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::StorageEngineInstance::WALRequest,::StorageEngineInstance::WALResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_RequestWAL<Service > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_RequestWAL<Service > StreamedService;
};

}  // namespace StorageEngineInstance


#endif  // GRPC_storage_5fengine_5finstance_2eproto__INCLUDED
