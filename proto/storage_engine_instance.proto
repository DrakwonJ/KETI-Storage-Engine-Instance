syntax = "proto3";

option java_multiple_files = true;
option java_package = "io.grpc.snippet_sample";
option java_outer_classname = "snippet_sample_Proto";
option objc_class_prefix = "SSP";

package StorageEngineInstance;

service StorageEngineInterface {
  rpc OffloadingQueryInterface (stream SnippetRequest) returns (QueryStringResult) {}
  rpc PushCSDMetric (CSDMetricList) returns (Response) {}
  rpc keti_send_snippet(TmaxRequest) returns (TmaxResponse) {}
  rpc keti_get_csd_status(Empty) returns (CSDMetricList) {}
}

service MergingModule {
  rpc Aggregation (SnippetRequest) returns (Response) {}
  rpc EndQuery (Request) returns (Response) {}
  rpc GetQueryResult (Request) returns (QueryResult) {}
}

service MonitoringModule {
  rpc GetSnippetMetaData (MetaDataRequest) returns (SnippetMetaData) {}
}

service OffloadingModule {
  rpc Scheduling (SnippetRequest) returns (Response) {}
  rpc PushCSDMetric (CSDMetricList) returns (Response) {}
  rpc t_snippet_scheduling (TmaxRequest) returns (Response) {}
  rpc t_get_csd_status(Empty) returns (CSDMetricList) {}
}

service StorageManager {
  rpc RequestPBA (LBARequest) returns (PBAResponse) {}
  rpc RequestVolumeAllocation (VolumeRequest) returns (AllocatedVolumeInfo) {}
}

service WALManager {
  rpc RequestWAL (WALRequest) returns (WALResponse) {}
}

message SnippetRequest {
  enum SnippetType {
    CSD_SCAN_SNIPPET = 0;
    AGGREGATION_SNIPPET = 1;
    STORAGE_FILTER_SNIPPET = 2;
    INNER_JOIN_SNIPPET = 3;
    LEFT_OUTER_JOIN_SNIPPET = 4;
    RIGHT_OUTER_JOIN_SNIPPET = 5;
    CROSS_JOIN_SNIPPET = 6;
    UNION_SNIPPET = 7;
    IN_SNIPPET = 8;
    DEPENDENCY_INNER_JOIN_SNIPPET = 9;
    DEPENDENCY_EXIST_SNIPPET = 10;
    DEPENDENCY_IN_SNIPPET = 11;
  }
  SnippetType type = 1;
  Snippet snippet = 2;
  ScanInfo scan_info = 3;
}

message ScanInfo {
  message SSTInfo {
    string sst_name = 1;
    repeated string csd_list = 2;
  }
  message BlockInfo {
    string sst_name = 1;
    repeated Chunk chunks = 2;
  }
  repeated SSTInfo sst_csd_map = 1;
  repeated BlockInfo block_info = 2;
}

message Snippet {
  enum ValueType {
    INT8 = 0;
    INT16 = 1;
    INT32 = 2; //DEFAULT
    INT64 = 3;
    FLOAT32 = 4;
    FLOAT64 = 5;
    NUMERIC = 6;
    DATE = 7;
    TIMESTAMP = 8;
    STRING = 9;
    COLUMN = 10;
    OPERATOR = 11; //value string으로 연산자 확인
  }
  message Filter {
    enum OperType {
      KETI_DEFAULT = 0; //DEFAULT
      KETI_GE = 1;
      KETI_LE = 2;
      KETI_GT = 3;
      KETI_LT = 4;
      KETI_ET = 5;
      KETI_NE = 6;
      KETI_LIKE = 7;
      KETI_BETWEEN = 8;
      KETI_IN = 9;
      KETI_IS = 10;
      KETI_ISNOT = 11;
      KETI_NOT = 12;
      KETI_AND = 13;
      KETI_OR = 14;
      KETI_ALL = 15;
      KETI_SUBSTRING = 16;
    }
    message FilterValue {
      repeated ValueType type = 1;
      repeated string value = 2;
    }
    FilterValue LV = 1;
    OperType Operator = 2;
    FilterValue RV = 3;
  }
  message Projection {
    enum SelectType{
      COLUMNNAME = 0; //DEFAULT
      SUM = 1;
      AVG = 2;
      COUNT = 3;
      COUNTSTAR = 4;
      COUNTDISTINCT = 5;
      TOP = 6;
      MIN = 7;
      MAX = 8;
    }
    SelectType select_type = 1;
    repeated string value = 2;
    repeated ValueType value_type = 3;    
  }
  message Order {
    enum OrderDirection {
      ASC = 0; //DEFAULT
      DESC = 1;
    }
    repeated OrderDirection ascending = 1;
    repeated string column_name = 2;
  }
  message Dependency {
    repeated Projection dependency_projection = 1;
    repeated Filter dependency_filter = 2;
  }
  message Limit {
    int32 offset = 1;
    int32 length = 2;
  }
  string db_name = 1;
  int32 query_ID = 2;
  int32 work_ID = 3;
  repeated string table_name = 4;
  repeated string table_col = 5;
  repeated Filter table_filter = 6;
  Dependency dependency = 7;
  repeated int32 table_offset = 8;
  repeated int32 table_offlen = 9;
  repeated int32 table_datatype = 10;
  string table_alias = 11;
  repeated string column_alias = 12;
  repeated Projection column_projection = 13;
  repeated string group_by = 14;
  Order order_by = 15;
  Limit limit = 16;
  int32 pk_num = 17;
  repeated Filter having = 18;
}

message GenericQuery {
  string db_name = 1;
  string query = 2;
}

message Request {
  int32 query_id = 1;
  int32 work_id = 2;
  string db_name = 3;
  string table_name = 4;
}

message Response {
  string value = 1;
}

message QueryResult {
  message Column {
    enum ColType {
      TYPE_EMPTY = 0;
      TYPE_STRING = 1;
      TYPE_INT = 2;
      TYPE_FLOAT = 3;
    }
    ColType col_type = 2;
    repeated string string_col = 3;
    repeated int32 int_col = 4;
    repeated double double_col = 5;
  }
  map<string, Column> query_result = 1;
  int32 row_count = 2;
  int32 scanned_row_count = 3;
  int32 filtered_row_count = 4; 
}

message QueryStringResult {
  string query_result = 1;
  int32 scanned_row_count = 2;
  int32 filtered_row_count = 3; 
}

message MetaDataRequest {
  string db_name = 1;
  string table_name = 2;
  ScanInfo scan_info = 3;
}

message SnippetMetaData {
  message PBAInfo{
    string pba_string = 1;
    int32 block_count = 2;
  }
  map<string,PBAInfo> sst_pba_map = 1;
  int32 table_total_block_count = 2;
  string wal_deleted_key_json = 3;
  repeated string wal_inserted_row_json = 4;
}

message CSDMetricList {
  message CSDMetric{
    string id = 1;
    string ip = 2;
    float cpu_usage = 3;
    float memory_usage = 4;
    float disk_usage = 5;
    float network = 6;
    int32 working_block_count = 7;
    float score = 8;
  }
  repeated CSDMetric csd_metric_list = 1;
}

message Chunk {
  int64 offset = 1;
  int32 length = 2;
}

message Chunks {
  repeated Chunk chunks = 1;
}

message TableBlock {
  map<int32, Chunks> table_block_chunks = 1;
}

message LBARequest {
  message SST {
    repeated string csd_list = 1;
    TableBlock table_lba_block = 2;
  }
  map<string,SST> sst_list = 1;
}

message PBAResponse {
  message SST {
    map<string, TableBlock> table_pba_block = 1;
  }
  map<string,SST> sst_list = 1;
}

message WALRequest {
  string db_name = 1;
  string table_name = 2;
}

message WALResponse {
  repeated string deleted_key = 1;
  repeated string inserted_key = 2;
  repeated string inserted_value = 3;
}

message VolumeRequest{  
  float capacity  = 1;
  int32 using_csd = 2;
}

message AllocatedVolumeInfo {
  message Allocation {
    string csd_id = 1;
    string capacity = 2;
    string partition_name = 3;
  }
  map<string,Allocation> csd_allocation_map = 1;
}


message TmaxRequest {
  message Chunk {
    int64 offset = 1;
    int32 length = 2;
  }
  int32 query_id = 1;
  int32 work_id = 2;
  repeated Chunk chunks = 3;
  string file_name = 4;
  string csd_name = 5;
  string table_filter = 6;
  string column_projection = 7;
}

message TmaxResponse {
  string result = 1;
}

message Empty {}