// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: storage_engine_instance.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_storage_5fengine_5finstance_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_storage_5fengine_5finstance_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_storage_5fengine_5finstance_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_storage_5fengine_5finstance_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[46]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_storage_5fengine_5finstance_2eproto;
namespace StorageEngineInstance {
class AllocatedVolumeInfo;
struct AllocatedVolumeInfoDefaultTypeInternal;
extern AllocatedVolumeInfoDefaultTypeInternal _AllocatedVolumeInfo_default_instance_;
class AllocatedVolumeInfo_Allocation;
struct AllocatedVolumeInfo_AllocationDefaultTypeInternal;
extern AllocatedVolumeInfo_AllocationDefaultTypeInternal _AllocatedVolumeInfo_Allocation_default_instance_;
class AllocatedVolumeInfo_CsdAllocationMapEntry_DoNotUse;
struct AllocatedVolumeInfo_CsdAllocationMapEntry_DoNotUseDefaultTypeInternal;
extern AllocatedVolumeInfo_CsdAllocationMapEntry_DoNotUseDefaultTypeInternal _AllocatedVolumeInfo_CsdAllocationMapEntry_DoNotUse_default_instance_;
class CSDMetricList;
struct CSDMetricListDefaultTypeInternal;
extern CSDMetricListDefaultTypeInternal _CSDMetricList_default_instance_;
class CSDMetricList_CSDMetric;
struct CSDMetricList_CSDMetricDefaultTypeInternal;
extern CSDMetricList_CSDMetricDefaultTypeInternal _CSDMetricList_CSDMetric_default_instance_;
class Chunk;
struct ChunkDefaultTypeInternal;
extern ChunkDefaultTypeInternal _Chunk_default_instance_;
class Chunks;
struct ChunksDefaultTypeInternal;
extern ChunksDefaultTypeInternal _Chunks_default_instance_;
class Empty;
struct EmptyDefaultTypeInternal;
extern EmptyDefaultTypeInternal _Empty_default_instance_;
class GenericQuery;
struct GenericQueryDefaultTypeInternal;
extern GenericQueryDefaultTypeInternal _GenericQuery_default_instance_;
class LBARequest;
struct LBARequestDefaultTypeInternal;
extern LBARequestDefaultTypeInternal _LBARequest_default_instance_;
class LBARequest_SST;
struct LBARequest_SSTDefaultTypeInternal;
extern LBARequest_SSTDefaultTypeInternal _LBARequest_SST_default_instance_;
class LBARequest_SstListEntry_DoNotUse;
struct LBARequest_SstListEntry_DoNotUseDefaultTypeInternal;
extern LBARequest_SstListEntry_DoNotUseDefaultTypeInternal _LBARequest_SstListEntry_DoNotUse_default_instance_;
class MetaDataRequest;
struct MetaDataRequestDefaultTypeInternal;
extern MetaDataRequestDefaultTypeInternal _MetaDataRequest_default_instance_;
class PBAResponse;
struct PBAResponseDefaultTypeInternal;
extern PBAResponseDefaultTypeInternal _PBAResponse_default_instance_;
class PBAResponse_SST;
struct PBAResponse_SSTDefaultTypeInternal;
extern PBAResponse_SSTDefaultTypeInternal _PBAResponse_SST_default_instance_;
class PBAResponse_SST_TablePbaBlockEntry_DoNotUse;
struct PBAResponse_SST_TablePbaBlockEntry_DoNotUseDefaultTypeInternal;
extern PBAResponse_SST_TablePbaBlockEntry_DoNotUseDefaultTypeInternal _PBAResponse_SST_TablePbaBlockEntry_DoNotUse_default_instance_;
class PBAResponse_SstListEntry_DoNotUse;
struct PBAResponse_SstListEntry_DoNotUseDefaultTypeInternal;
extern PBAResponse_SstListEntry_DoNotUseDefaultTypeInternal _PBAResponse_SstListEntry_DoNotUse_default_instance_;
class QueryResult;
struct QueryResultDefaultTypeInternal;
extern QueryResultDefaultTypeInternal _QueryResult_default_instance_;
class QueryResult_Column;
struct QueryResult_ColumnDefaultTypeInternal;
extern QueryResult_ColumnDefaultTypeInternal _QueryResult_Column_default_instance_;
class QueryResult_QueryResultEntry_DoNotUse;
struct QueryResult_QueryResultEntry_DoNotUseDefaultTypeInternal;
extern QueryResult_QueryResultEntry_DoNotUseDefaultTypeInternal _QueryResult_QueryResultEntry_DoNotUse_default_instance_;
class QueryStringResult;
struct QueryStringResultDefaultTypeInternal;
extern QueryStringResultDefaultTypeInternal _QueryStringResult_default_instance_;
class Request;
struct RequestDefaultTypeInternal;
extern RequestDefaultTypeInternal _Request_default_instance_;
class Response;
struct ResponseDefaultTypeInternal;
extern ResponseDefaultTypeInternal _Response_default_instance_;
class ScanInfo;
struct ScanInfoDefaultTypeInternal;
extern ScanInfoDefaultTypeInternal _ScanInfo_default_instance_;
class ScanInfo_SST;
struct ScanInfo_SSTDefaultTypeInternal;
extern ScanInfo_SSTDefaultTypeInternal _ScanInfo_SST_default_instance_;
class ScanInfo_SST_CsdPbaMapEntry_DoNotUse;
struct ScanInfo_SST_CsdPbaMapEntry_DoNotUseDefaultTypeInternal;
extern ScanInfo_SST_CsdPbaMapEntry_DoNotUseDefaultTypeInternal _ScanInfo_SST_CsdPbaMapEntry_DoNotUse_default_instance_;
class ScanInfo_SstListEntry_DoNotUse;
struct ScanInfo_SstListEntry_DoNotUseDefaultTypeInternal;
extern ScanInfo_SstListEntry_DoNotUseDefaultTypeInternal _ScanInfo_SstListEntry_DoNotUse_default_instance_;
class Snippet;
struct SnippetDefaultTypeInternal;
extern SnippetDefaultTypeInternal _Snippet_default_instance_;
class SnippetMetaData;
struct SnippetMetaDataDefaultTypeInternal;
extern SnippetMetaDataDefaultTypeInternal _SnippetMetaData_default_instance_;
class SnippetMetaData_PBAInfo;
struct SnippetMetaData_PBAInfoDefaultTypeInternal;
extern SnippetMetaData_PBAInfoDefaultTypeInternal _SnippetMetaData_PBAInfo_default_instance_;
class SnippetMetaData_SstPbaMapEntry_DoNotUse;
struct SnippetMetaData_SstPbaMapEntry_DoNotUseDefaultTypeInternal;
extern SnippetMetaData_SstPbaMapEntry_DoNotUseDefaultTypeInternal _SnippetMetaData_SstPbaMapEntry_DoNotUse_default_instance_;
class SnippetRequest;
struct SnippetRequestDefaultTypeInternal;
extern SnippetRequestDefaultTypeInternal _SnippetRequest_default_instance_;
class Snippet_Dependency;
struct Snippet_DependencyDefaultTypeInternal;
extern Snippet_DependencyDefaultTypeInternal _Snippet_Dependency_default_instance_;
class Snippet_Filter;
struct Snippet_FilterDefaultTypeInternal;
extern Snippet_FilterDefaultTypeInternal _Snippet_Filter_default_instance_;
class Snippet_Filter_FilterValue;
struct Snippet_Filter_FilterValueDefaultTypeInternal;
extern Snippet_Filter_FilterValueDefaultTypeInternal _Snippet_Filter_FilterValue_default_instance_;
class Snippet_Limit;
struct Snippet_LimitDefaultTypeInternal;
extern Snippet_LimitDefaultTypeInternal _Snippet_Limit_default_instance_;
class Snippet_Order;
struct Snippet_OrderDefaultTypeInternal;
extern Snippet_OrderDefaultTypeInternal _Snippet_Order_default_instance_;
class Snippet_Projection;
struct Snippet_ProjectionDefaultTypeInternal;
extern Snippet_ProjectionDefaultTypeInternal _Snippet_Projection_default_instance_;
class TableBlock;
struct TableBlockDefaultTypeInternal;
extern TableBlockDefaultTypeInternal _TableBlock_default_instance_;
class TableBlock_TableBlockChunksEntry_DoNotUse;
struct TableBlock_TableBlockChunksEntry_DoNotUseDefaultTypeInternal;
extern TableBlock_TableBlockChunksEntry_DoNotUseDefaultTypeInternal _TableBlock_TableBlockChunksEntry_DoNotUse_default_instance_;
class TmaxRequest;
struct TmaxRequestDefaultTypeInternal;
extern TmaxRequestDefaultTypeInternal _TmaxRequest_default_instance_;
class TmaxRequest_Chunk;
struct TmaxRequest_ChunkDefaultTypeInternal;
extern TmaxRequest_ChunkDefaultTypeInternal _TmaxRequest_Chunk_default_instance_;
class TmaxResponse;
struct TmaxResponseDefaultTypeInternal;
extern TmaxResponseDefaultTypeInternal _TmaxResponse_default_instance_;
class VolumeRequest;
struct VolumeRequestDefaultTypeInternal;
extern VolumeRequestDefaultTypeInternal _VolumeRequest_default_instance_;
class WALRequest;
struct WALRequestDefaultTypeInternal;
extern WALRequestDefaultTypeInternal _WALRequest_default_instance_;
class WALResponse;
struct WALResponseDefaultTypeInternal;
extern WALResponseDefaultTypeInternal _WALResponse_default_instance_;
}  // namespace StorageEngineInstance
PROTOBUF_NAMESPACE_OPEN
template<> ::StorageEngineInstance::AllocatedVolumeInfo* Arena::CreateMaybeMessage<::StorageEngineInstance::AllocatedVolumeInfo>(Arena*);
template<> ::StorageEngineInstance::AllocatedVolumeInfo_Allocation* Arena::CreateMaybeMessage<::StorageEngineInstance::AllocatedVolumeInfo_Allocation>(Arena*);
template<> ::StorageEngineInstance::AllocatedVolumeInfo_CsdAllocationMapEntry_DoNotUse* Arena::CreateMaybeMessage<::StorageEngineInstance::AllocatedVolumeInfo_CsdAllocationMapEntry_DoNotUse>(Arena*);
template<> ::StorageEngineInstance::CSDMetricList* Arena::CreateMaybeMessage<::StorageEngineInstance::CSDMetricList>(Arena*);
template<> ::StorageEngineInstance::CSDMetricList_CSDMetric* Arena::CreateMaybeMessage<::StorageEngineInstance::CSDMetricList_CSDMetric>(Arena*);
template<> ::StorageEngineInstance::Chunk* Arena::CreateMaybeMessage<::StorageEngineInstance::Chunk>(Arena*);
template<> ::StorageEngineInstance::Chunks* Arena::CreateMaybeMessage<::StorageEngineInstance::Chunks>(Arena*);
template<> ::StorageEngineInstance::Empty* Arena::CreateMaybeMessage<::StorageEngineInstance::Empty>(Arena*);
template<> ::StorageEngineInstance::GenericQuery* Arena::CreateMaybeMessage<::StorageEngineInstance::GenericQuery>(Arena*);
template<> ::StorageEngineInstance::LBARequest* Arena::CreateMaybeMessage<::StorageEngineInstance::LBARequest>(Arena*);
template<> ::StorageEngineInstance::LBARequest_SST* Arena::CreateMaybeMessage<::StorageEngineInstance::LBARequest_SST>(Arena*);
template<> ::StorageEngineInstance::LBARequest_SstListEntry_DoNotUse* Arena::CreateMaybeMessage<::StorageEngineInstance::LBARequest_SstListEntry_DoNotUse>(Arena*);
template<> ::StorageEngineInstance::MetaDataRequest* Arena::CreateMaybeMessage<::StorageEngineInstance::MetaDataRequest>(Arena*);
template<> ::StorageEngineInstance::PBAResponse* Arena::CreateMaybeMessage<::StorageEngineInstance::PBAResponse>(Arena*);
template<> ::StorageEngineInstance::PBAResponse_SST* Arena::CreateMaybeMessage<::StorageEngineInstance::PBAResponse_SST>(Arena*);
template<> ::StorageEngineInstance::PBAResponse_SST_TablePbaBlockEntry_DoNotUse* Arena::CreateMaybeMessage<::StorageEngineInstance::PBAResponse_SST_TablePbaBlockEntry_DoNotUse>(Arena*);
template<> ::StorageEngineInstance::PBAResponse_SstListEntry_DoNotUse* Arena::CreateMaybeMessage<::StorageEngineInstance::PBAResponse_SstListEntry_DoNotUse>(Arena*);
template<> ::StorageEngineInstance::QueryResult* Arena::CreateMaybeMessage<::StorageEngineInstance::QueryResult>(Arena*);
template<> ::StorageEngineInstance::QueryResult_Column* Arena::CreateMaybeMessage<::StorageEngineInstance::QueryResult_Column>(Arena*);
template<> ::StorageEngineInstance::QueryResult_QueryResultEntry_DoNotUse* Arena::CreateMaybeMessage<::StorageEngineInstance::QueryResult_QueryResultEntry_DoNotUse>(Arena*);
template<> ::StorageEngineInstance::QueryStringResult* Arena::CreateMaybeMessage<::StorageEngineInstance::QueryStringResult>(Arena*);
template<> ::StorageEngineInstance::Request* Arena::CreateMaybeMessage<::StorageEngineInstance::Request>(Arena*);
template<> ::StorageEngineInstance::Response* Arena::CreateMaybeMessage<::StorageEngineInstance::Response>(Arena*);
template<> ::StorageEngineInstance::ScanInfo* Arena::CreateMaybeMessage<::StorageEngineInstance::ScanInfo>(Arena*);
template<> ::StorageEngineInstance::ScanInfo_SST* Arena::CreateMaybeMessage<::StorageEngineInstance::ScanInfo_SST>(Arena*);
template<> ::StorageEngineInstance::ScanInfo_SST_CsdPbaMapEntry_DoNotUse* Arena::CreateMaybeMessage<::StorageEngineInstance::ScanInfo_SST_CsdPbaMapEntry_DoNotUse>(Arena*);
template<> ::StorageEngineInstance::ScanInfo_SstListEntry_DoNotUse* Arena::CreateMaybeMessage<::StorageEngineInstance::ScanInfo_SstListEntry_DoNotUse>(Arena*);
template<> ::StorageEngineInstance::Snippet* Arena::CreateMaybeMessage<::StorageEngineInstance::Snippet>(Arena*);
template<> ::StorageEngineInstance::SnippetMetaData* Arena::CreateMaybeMessage<::StorageEngineInstance::SnippetMetaData>(Arena*);
template<> ::StorageEngineInstance::SnippetMetaData_PBAInfo* Arena::CreateMaybeMessage<::StorageEngineInstance::SnippetMetaData_PBAInfo>(Arena*);
template<> ::StorageEngineInstance::SnippetMetaData_SstPbaMapEntry_DoNotUse* Arena::CreateMaybeMessage<::StorageEngineInstance::SnippetMetaData_SstPbaMapEntry_DoNotUse>(Arena*);
template<> ::StorageEngineInstance::SnippetRequest* Arena::CreateMaybeMessage<::StorageEngineInstance::SnippetRequest>(Arena*);
template<> ::StorageEngineInstance::Snippet_Dependency* Arena::CreateMaybeMessage<::StorageEngineInstance::Snippet_Dependency>(Arena*);
template<> ::StorageEngineInstance::Snippet_Filter* Arena::CreateMaybeMessage<::StorageEngineInstance::Snippet_Filter>(Arena*);
template<> ::StorageEngineInstance::Snippet_Filter_FilterValue* Arena::CreateMaybeMessage<::StorageEngineInstance::Snippet_Filter_FilterValue>(Arena*);
template<> ::StorageEngineInstance::Snippet_Limit* Arena::CreateMaybeMessage<::StorageEngineInstance::Snippet_Limit>(Arena*);
template<> ::StorageEngineInstance::Snippet_Order* Arena::CreateMaybeMessage<::StorageEngineInstance::Snippet_Order>(Arena*);
template<> ::StorageEngineInstance::Snippet_Projection* Arena::CreateMaybeMessage<::StorageEngineInstance::Snippet_Projection>(Arena*);
template<> ::StorageEngineInstance::TableBlock* Arena::CreateMaybeMessage<::StorageEngineInstance::TableBlock>(Arena*);
template<> ::StorageEngineInstance::TableBlock_TableBlockChunksEntry_DoNotUse* Arena::CreateMaybeMessage<::StorageEngineInstance::TableBlock_TableBlockChunksEntry_DoNotUse>(Arena*);
template<> ::StorageEngineInstance::TmaxRequest* Arena::CreateMaybeMessage<::StorageEngineInstance::TmaxRequest>(Arena*);
template<> ::StorageEngineInstance::TmaxRequest_Chunk* Arena::CreateMaybeMessage<::StorageEngineInstance::TmaxRequest_Chunk>(Arena*);
template<> ::StorageEngineInstance::TmaxResponse* Arena::CreateMaybeMessage<::StorageEngineInstance::TmaxResponse>(Arena*);
template<> ::StorageEngineInstance::VolumeRequest* Arena::CreateMaybeMessage<::StorageEngineInstance::VolumeRequest>(Arena*);
template<> ::StorageEngineInstance::WALRequest* Arena::CreateMaybeMessage<::StorageEngineInstance::WALRequest>(Arena*);
template<> ::StorageEngineInstance::WALResponse* Arena::CreateMaybeMessage<::StorageEngineInstance::WALResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace StorageEngineInstance {

enum SnippetRequest_SnippetType : int {
  SnippetRequest_SnippetType_CSD_SCAN_SNIPPET = 0,
  SnippetRequest_SnippetType_AGGREGATION_SNIPPET = 1,
  SnippetRequest_SnippetType_STORAGE_FILTER_SNIPPET = 2,
  SnippetRequest_SnippetType_INNER_JOIN_SNIPPET = 3,
  SnippetRequest_SnippetType_LEFT_OUTER_JOIN_SNIPPET = 4,
  SnippetRequest_SnippetType_RIGHT_OUTER_JOIN_SNIPPET = 5,
  SnippetRequest_SnippetType_CROSS_JOIN_SNIPPET = 6,
  SnippetRequest_SnippetType_UNION_SNIPPET = 7,
  SnippetRequest_SnippetType_IN_SNIPPET = 8,
  SnippetRequest_SnippetType_DEPENDENCY_INNER_JOIN_SNIPPET = 9,
  SnippetRequest_SnippetType_DEPENDENCY_EXIST_SNIPPET = 10,
  SnippetRequest_SnippetType_DEPENDENCY_IN_SNIPPET = 11,
  SnippetRequest_SnippetType_SnippetRequest_SnippetType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  SnippetRequest_SnippetType_SnippetRequest_SnippetType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool SnippetRequest_SnippetType_IsValid(int value);
constexpr SnippetRequest_SnippetType SnippetRequest_SnippetType_SnippetType_MIN = SnippetRequest_SnippetType_CSD_SCAN_SNIPPET;
constexpr SnippetRequest_SnippetType SnippetRequest_SnippetType_SnippetType_MAX = SnippetRequest_SnippetType_DEPENDENCY_IN_SNIPPET;
constexpr int SnippetRequest_SnippetType_SnippetType_ARRAYSIZE = SnippetRequest_SnippetType_SnippetType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SnippetRequest_SnippetType_descriptor();
template<typename T>
inline const std::string& SnippetRequest_SnippetType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SnippetRequest_SnippetType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SnippetRequest_SnippetType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SnippetRequest_SnippetType_descriptor(), enum_t_value);
}
inline bool SnippetRequest_SnippetType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SnippetRequest_SnippetType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SnippetRequest_SnippetType>(
    SnippetRequest_SnippetType_descriptor(), name, value);
}
enum Snippet_Filter_OperType : int {
  Snippet_Filter_OperType_KETI_DEFAULT = 0,
  Snippet_Filter_OperType_KETI_GE = 1,
  Snippet_Filter_OperType_KETI_LE = 2,
  Snippet_Filter_OperType_KETI_GT = 3,
  Snippet_Filter_OperType_KETI_LT = 4,
  Snippet_Filter_OperType_KETI_ET = 5,
  Snippet_Filter_OperType_KETI_NE = 6,
  Snippet_Filter_OperType_KETI_LIKE = 7,
  Snippet_Filter_OperType_KETI_BETWEEN = 8,
  Snippet_Filter_OperType_KETI_IN = 9,
  Snippet_Filter_OperType_KETI_IS = 10,
  Snippet_Filter_OperType_KETI_ISNOT = 11,
  Snippet_Filter_OperType_KETI_NOT = 12,
  Snippet_Filter_OperType_KETI_AND = 13,
  Snippet_Filter_OperType_KETI_OR = 14,
  Snippet_Filter_OperType_KETI_ALL = 15,
  Snippet_Filter_OperType_KETI_SUBSTRING = 16,
  Snippet_Filter_OperType_Snippet_Filter_OperType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Snippet_Filter_OperType_Snippet_Filter_OperType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Snippet_Filter_OperType_IsValid(int value);
constexpr Snippet_Filter_OperType Snippet_Filter_OperType_OperType_MIN = Snippet_Filter_OperType_KETI_DEFAULT;
constexpr Snippet_Filter_OperType Snippet_Filter_OperType_OperType_MAX = Snippet_Filter_OperType_KETI_SUBSTRING;
constexpr int Snippet_Filter_OperType_OperType_ARRAYSIZE = Snippet_Filter_OperType_OperType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Snippet_Filter_OperType_descriptor();
template<typename T>
inline const std::string& Snippet_Filter_OperType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Snippet_Filter_OperType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Snippet_Filter_OperType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Snippet_Filter_OperType_descriptor(), enum_t_value);
}
inline bool Snippet_Filter_OperType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Snippet_Filter_OperType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Snippet_Filter_OperType>(
    Snippet_Filter_OperType_descriptor(), name, value);
}
enum Snippet_Projection_SelectType : int {
  Snippet_Projection_SelectType_COLUMNNAME = 0,
  Snippet_Projection_SelectType_SUM = 1,
  Snippet_Projection_SelectType_AVG = 2,
  Snippet_Projection_SelectType_COUNT = 3,
  Snippet_Projection_SelectType_COUNTSTAR = 4,
  Snippet_Projection_SelectType_COUNTDISTINCT = 5,
  Snippet_Projection_SelectType_TOP = 6,
  Snippet_Projection_SelectType_MIN = 7,
  Snippet_Projection_SelectType_MAX = 8,
  Snippet_Projection_SelectType_Snippet_Projection_SelectType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Snippet_Projection_SelectType_Snippet_Projection_SelectType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Snippet_Projection_SelectType_IsValid(int value);
constexpr Snippet_Projection_SelectType Snippet_Projection_SelectType_SelectType_MIN = Snippet_Projection_SelectType_COLUMNNAME;
constexpr Snippet_Projection_SelectType Snippet_Projection_SelectType_SelectType_MAX = Snippet_Projection_SelectType_MAX;
constexpr int Snippet_Projection_SelectType_SelectType_ARRAYSIZE = Snippet_Projection_SelectType_SelectType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Snippet_Projection_SelectType_descriptor();
template<typename T>
inline const std::string& Snippet_Projection_SelectType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Snippet_Projection_SelectType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Snippet_Projection_SelectType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Snippet_Projection_SelectType_descriptor(), enum_t_value);
}
inline bool Snippet_Projection_SelectType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Snippet_Projection_SelectType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Snippet_Projection_SelectType>(
    Snippet_Projection_SelectType_descriptor(), name, value);
}
enum Snippet_Order_OrderDirection : int {
  Snippet_Order_OrderDirection_ASC = 0,
  Snippet_Order_OrderDirection_DESC = 1,
  Snippet_Order_OrderDirection_Snippet_Order_OrderDirection_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Snippet_Order_OrderDirection_Snippet_Order_OrderDirection_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Snippet_Order_OrderDirection_IsValid(int value);
constexpr Snippet_Order_OrderDirection Snippet_Order_OrderDirection_OrderDirection_MIN = Snippet_Order_OrderDirection_ASC;
constexpr Snippet_Order_OrderDirection Snippet_Order_OrderDirection_OrderDirection_MAX = Snippet_Order_OrderDirection_DESC;
constexpr int Snippet_Order_OrderDirection_OrderDirection_ARRAYSIZE = Snippet_Order_OrderDirection_OrderDirection_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Snippet_Order_OrderDirection_descriptor();
template<typename T>
inline const std::string& Snippet_Order_OrderDirection_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Snippet_Order_OrderDirection>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Snippet_Order_OrderDirection_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Snippet_Order_OrderDirection_descriptor(), enum_t_value);
}
inline bool Snippet_Order_OrderDirection_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Snippet_Order_OrderDirection* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Snippet_Order_OrderDirection>(
    Snippet_Order_OrderDirection_descriptor(), name, value);
}
enum Snippet_ValueType : int {
  Snippet_ValueType_INT8 = 0,
  Snippet_ValueType_INT16 = 1,
  Snippet_ValueType_INT32 = 2,
  Snippet_ValueType_INT64 = 3,
  Snippet_ValueType_FLOAT32 = 4,
  Snippet_ValueType_FLOAT64 = 5,
  Snippet_ValueType_NUMERIC = 6,
  Snippet_ValueType_DATE = 7,
  Snippet_ValueType_TIMESTAMP = 8,
  Snippet_ValueType_STRING = 9,
  Snippet_ValueType_COLUMN = 10,
  Snippet_ValueType_OPERATOR = 11,
  Snippet_ValueType_Snippet_ValueType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Snippet_ValueType_Snippet_ValueType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Snippet_ValueType_IsValid(int value);
constexpr Snippet_ValueType Snippet_ValueType_ValueType_MIN = Snippet_ValueType_INT8;
constexpr Snippet_ValueType Snippet_ValueType_ValueType_MAX = Snippet_ValueType_OPERATOR;
constexpr int Snippet_ValueType_ValueType_ARRAYSIZE = Snippet_ValueType_ValueType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Snippet_ValueType_descriptor();
template<typename T>
inline const std::string& Snippet_ValueType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Snippet_ValueType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Snippet_ValueType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Snippet_ValueType_descriptor(), enum_t_value);
}
inline bool Snippet_ValueType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Snippet_ValueType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Snippet_ValueType>(
    Snippet_ValueType_descriptor(), name, value);
}
enum QueryResult_Column_ColType : int {
  QueryResult_Column_ColType_TYPE_EMPTY = 0,
  QueryResult_Column_ColType_TYPE_STRING = 1,
  QueryResult_Column_ColType_TYPE_INT = 2,
  QueryResult_Column_ColType_TYPE_FLOAT = 3,
  QueryResult_Column_ColType_QueryResult_Column_ColType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  QueryResult_Column_ColType_QueryResult_Column_ColType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool QueryResult_Column_ColType_IsValid(int value);
constexpr QueryResult_Column_ColType QueryResult_Column_ColType_ColType_MIN = QueryResult_Column_ColType_TYPE_EMPTY;
constexpr QueryResult_Column_ColType QueryResult_Column_ColType_ColType_MAX = QueryResult_Column_ColType_TYPE_FLOAT;
constexpr int QueryResult_Column_ColType_ColType_ARRAYSIZE = QueryResult_Column_ColType_ColType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* QueryResult_Column_ColType_descriptor();
template<typename T>
inline const std::string& QueryResult_Column_ColType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, QueryResult_Column_ColType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function QueryResult_Column_ColType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    QueryResult_Column_ColType_descriptor(), enum_t_value);
}
inline bool QueryResult_Column_ColType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, QueryResult_Column_ColType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<QueryResult_Column_ColType>(
    QueryResult_Column_ColType_descriptor(), name, value);
}
// ===================================================================

class SnippetRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:StorageEngineInstance.SnippetRequest) */ {
 public:
  inline SnippetRequest() : SnippetRequest(nullptr) {}
  ~SnippetRequest() override;
  explicit constexpr SnippetRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SnippetRequest(const SnippetRequest& from);
  SnippetRequest(SnippetRequest&& from) noexcept
    : SnippetRequest() {
    *this = ::std::move(from);
  }

  inline SnippetRequest& operator=(const SnippetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SnippetRequest& operator=(SnippetRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SnippetRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SnippetRequest* internal_default_instance() {
    return reinterpret_cast<const SnippetRequest*>(
               &_SnippetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SnippetRequest& a, SnippetRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SnippetRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SnippetRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SnippetRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SnippetRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SnippetRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SnippetRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SnippetRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "StorageEngineInstance.SnippetRequest";
  }
  protected:
  explicit SnippetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SnippetRequest_SnippetType SnippetType;
  static constexpr SnippetType CSD_SCAN_SNIPPET =
    SnippetRequest_SnippetType_CSD_SCAN_SNIPPET;
  static constexpr SnippetType AGGREGATION_SNIPPET =
    SnippetRequest_SnippetType_AGGREGATION_SNIPPET;
  static constexpr SnippetType STORAGE_FILTER_SNIPPET =
    SnippetRequest_SnippetType_STORAGE_FILTER_SNIPPET;
  static constexpr SnippetType INNER_JOIN_SNIPPET =
    SnippetRequest_SnippetType_INNER_JOIN_SNIPPET;
  static constexpr SnippetType LEFT_OUTER_JOIN_SNIPPET =
    SnippetRequest_SnippetType_LEFT_OUTER_JOIN_SNIPPET;
  static constexpr SnippetType RIGHT_OUTER_JOIN_SNIPPET =
    SnippetRequest_SnippetType_RIGHT_OUTER_JOIN_SNIPPET;
  static constexpr SnippetType CROSS_JOIN_SNIPPET =
    SnippetRequest_SnippetType_CROSS_JOIN_SNIPPET;
  static constexpr SnippetType UNION_SNIPPET =
    SnippetRequest_SnippetType_UNION_SNIPPET;
  static constexpr SnippetType IN_SNIPPET =
    SnippetRequest_SnippetType_IN_SNIPPET;
  static constexpr SnippetType DEPENDENCY_INNER_JOIN_SNIPPET =
    SnippetRequest_SnippetType_DEPENDENCY_INNER_JOIN_SNIPPET;
  static constexpr SnippetType DEPENDENCY_EXIST_SNIPPET =
    SnippetRequest_SnippetType_DEPENDENCY_EXIST_SNIPPET;
  static constexpr SnippetType DEPENDENCY_IN_SNIPPET =
    SnippetRequest_SnippetType_DEPENDENCY_IN_SNIPPET;
  static inline bool SnippetType_IsValid(int value) {
    return SnippetRequest_SnippetType_IsValid(value);
  }
  static constexpr SnippetType SnippetType_MIN =
    SnippetRequest_SnippetType_SnippetType_MIN;
  static constexpr SnippetType SnippetType_MAX =
    SnippetRequest_SnippetType_SnippetType_MAX;
  static constexpr int SnippetType_ARRAYSIZE =
    SnippetRequest_SnippetType_SnippetType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  SnippetType_descriptor() {
    return SnippetRequest_SnippetType_descriptor();
  }
  template<typename T>
  static inline const std::string& SnippetType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, SnippetType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function SnippetType_Name.");
    return SnippetRequest_SnippetType_Name(enum_t_value);
  }
  static inline bool SnippetType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      SnippetType* value) {
    return SnippetRequest_SnippetType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kSnippetFieldNumber = 2,
    kScanInfoFieldNumber = 3,
    kTypeFieldNumber = 1,
  };
  // .StorageEngineInstance.Snippet snippet = 2;
  bool has_snippet() const;
  private:
  bool _internal_has_snippet() const;
  public:
  void clear_snippet();
  const ::StorageEngineInstance::Snippet& snippet() const;
  PROTOBUF_NODISCARD ::StorageEngineInstance::Snippet* release_snippet();
  ::StorageEngineInstance::Snippet* mutable_snippet();
  void set_allocated_snippet(::StorageEngineInstance::Snippet* snippet);
  private:
  const ::StorageEngineInstance::Snippet& _internal_snippet() const;
  ::StorageEngineInstance::Snippet* _internal_mutable_snippet();
  public:
  void unsafe_arena_set_allocated_snippet(
      ::StorageEngineInstance::Snippet* snippet);
  ::StorageEngineInstance::Snippet* unsafe_arena_release_snippet();

  // .StorageEngineInstance.ScanInfo scan_info = 3;
  bool has_scan_info() const;
  private:
  bool _internal_has_scan_info() const;
  public:
  void clear_scan_info();
  const ::StorageEngineInstance::ScanInfo& scan_info() const;
  PROTOBUF_NODISCARD ::StorageEngineInstance::ScanInfo* release_scan_info();
  ::StorageEngineInstance::ScanInfo* mutable_scan_info();
  void set_allocated_scan_info(::StorageEngineInstance::ScanInfo* scan_info);
  private:
  const ::StorageEngineInstance::ScanInfo& _internal_scan_info() const;
  ::StorageEngineInstance::ScanInfo* _internal_mutable_scan_info();
  public:
  void unsafe_arena_set_allocated_scan_info(
      ::StorageEngineInstance::ScanInfo* scan_info);
  ::StorageEngineInstance::ScanInfo* unsafe_arena_release_scan_info();

  // .StorageEngineInstance.SnippetRequest.SnippetType type = 1;
  void clear_type();
  ::StorageEngineInstance::SnippetRequest_SnippetType type() const;
  void set_type(::StorageEngineInstance::SnippetRequest_SnippetType value);
  private:
  ::StorageEngineInstance::SnippetRequest_SnippetType _internal_type() const;
  void _internal_set_type(::StorageEngineInstance::SnippetRequest_SnippetType value);
  public:

  // @@protoc_insertion_point(class_scope:StorageEngineInstance.SnippetRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::StorageEngineInstance::Snippet* snippet_;
  ::StorageEngineInstance::ScanInfo* scan_info_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_storage_5fengine_5finstance_2eproto;
};
// -------------------------------------------------------------------

class ScanInfo_SST_CsdPbaMapEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ScanInfo_SST_CsdPbaMapEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ScanInfo_SST_CsdPbaMapEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  ScanInfo_SST_CsdPbaMapEntry_DoNotUse();
  explicit constexpr ScanInfo_SST_CsdPbaMapEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit ScanInfo_SST_CsdPbaMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const ScanInfo_SST_CsdPbaMapEntry_DoNotUse& other);
  static const ScanInfo_SST_CsdPbaMapEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ScanInfo_SST_CsdPbaMapEntry_DoNotUse*>(&_ScanInfo_SST_CsdPbaMapEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "StorageEngineInstance.ScanInfo.SST.CsdPbaMapEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "StorageEngineInstance.ScanInfo.SST.CsdPbaMapEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class ScanInfo_SST final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:StorageEngineInstance.ScanInfo.SST) */ {
 public:
  inline ScanInfo_SST() : ScanInfo_SST(nullptr) {}
  ~ScanInfo_SST() override;
  explicit constexpr ScanInfo_SST(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ScanInfo_SST(const ScanInfo_SST& from);
  ScanInfo_SST(ScanInfo_SST&& from) noexcept
    : ScanInfo_SST() {
    *this = ::std::move(from);
  }

  inline ScanInfo_SST& operator=(const ScanInfo_SST& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScanInfo_SST& operator=(ScanInfo_SST&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ScanInfo_SST& default_instance() {
    return *internal_default_instance();
  }
  static inline const ScanInfo_SST* internal_default_instance() {
    return reinterpret_cast<const ScanInfo_SST*>(
               &_ScanInfo_SST_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ScanInfo_SST& a, ScanInfo_SST& b) {
    a.Swap(&b);
  }
  inline void Swap(ScanInfo_SST* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ScanInfo_SST* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ScanInfo_SST* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ScanInfo_SST>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ScanInfo_SST& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ScanInfo_SST& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScanInfo_SST* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "StorageEngineInstance.ScanInfo.SST";
  }
  protected:
  explicit ScanInfo_SST(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kCsdPbaMapFieldNumber = 1,
    kSstBlockCountFieldNumber = 2,
  };
  // map<string, string> csd_pba_map = 1;
  int csd_pba_map_size() const;
  private:
  int _internal_csd_pba_map_size() const;
  public:
  void clear_csd_pba_map();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_csd_pba_map() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_csd_pba_map();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      csd_pba_map() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_csd_pba_map();

  // int32 sst_block_count = 2;
  void clear_sst_block_count();
  int32_t sst_block_count() const;
  void set_sst_block_count(int32_t value);
  private:
  int32_t _internal_sst_block_count() const;
  void _internal_set_sst_block_count(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:StorageEngineInstance.ScanInfo.SST)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      ScanInfo_SST_CsdPbaMapEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> csd_pba_map_;
  int32_t sst_block_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_storage_5fengine_5finstance_2eproto;
};
// -------------------------------------------------------------------

class ScanInfo_SstListEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ScanInfo_SstListEntry_DoNotUse, 
    std::string, ::StorageEngineInstance::ScanInfo_SST,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ScanInfo_SstListEntry_DoNotUse, 
    std::string, ::StorageEngineInstance::ScanInfo_SST,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  ScanInfo_SstListEntry_DoNotUse();
  explicit constexpr ScanInfo_SstListEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit ScanInfo_SstListEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const ScanInfo_SstListEntry_DoNotUse& other);
  static const ScanInfo_SstListEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ScanInfo_SstListEntry_DoNotUse*>(&_ScanInfo_SstListEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "StorageEngineInstance.ScanInfo.SstListEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class ScanInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:StorageEngineInstance.ScanInfo) */ {
 public:
  inline ScanInfo() : ScanInfo(nullptr) {}
  ~ScanInfo() override;
  explicit constexpr ScanInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ScanInfo(const ScanInfo& from);
  ScanInfo(ScanInfo&& from) noexcept
    : ScanInfo() {
    *this = ::std::move(from);
  }

  inline ScanInfo& operator=(const ScanInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScanInfo& operator=(ScanInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ScanInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ScanInfo* internal_default_instance() {
    return reinterpret_cast<const ScanInfo*>(
               &_ScanInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ScanInfo& a, ScanInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ScanInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ScanInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ScanInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ScanInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ScanInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ScanInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScanInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "StorageEngineInstance.ScanInfo";
  }
  protected:
  explicit ScanInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ScanInfo_SST SST;

  // accessors -------------------------------------------------------

  enum : int {
    kSstListFieldNumber = 1,
    kWalDataFieldNumber = 3,
    kTableBlockCountFieldNumber = 2,
  };
  // map<string, .StorageEngineInstance.ScanInfo.SST> sst_list = 1;
  int sst_list_size() const;
  private:
  int _internal_sst_list_size() const;
  public:
  void clear_sst_list();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::StorageEngineInstance::ScanInfo_SST >&
      _internal_sst_list() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::StorageEngineInstance::ScanInfo_SST >*
      _internal_mutable_sst_list();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::StorageEngineInstance::ScanInfo_SST >&
      sst_list() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::StorageEngineInstance::ScanInfo_SST >*
      mutable_sst_list();

  // string wal_data = 3;
  void clear_wal_data();
  const std::string& wal_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_wal_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_wal_data();
  PROTOBUF_NODISCARD std::string* release_wal_data();
  void set_allocated_wal_data(std::string* wal_data);
  private:
  const std::string& _internal_wal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_wal_data(const std::string& value);
  std::string* _internal_mutable_wal_data();
  public:

  // int32 table_block_count = 2;
  void clear_table_block_count();
  int32_t table_block_count() const;
  void set_table_block_count(int32_t value);
  private:
  int32_t _internal_table_block_count() const;
  void _internal_set_table_block_count(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:StorageEngineInstance.ScanInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      ScanInfo_SstListEntry_DoNotUse,
      std::string, ::StorageEngineInstance::ScanInfo_SST,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> sst_list_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr wal_data_;
  int32_t table_block_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_storage_5fengine_5finstance_2eproto;
};
// -------------------------------------------------------------------

class Snippet_Filter_FilterValue final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:StorageEngineInstance.Snippet.Filter.FilterValue) */ {
 public:
  inline Snippet_Filter_FilterValue() : Snippet_Filter_FilterValue(nullptr) {}
  ~Snippet_Filter_FilterValue() override;
  explicit constexpr Snippet_Filter_FilterValue(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Snippet_Filter_FilterValue(const Snippet_Filter_FilterValue& from);
  Snippet_Filter_FilterValue(Snippet_Filter_FilterValue&& from) noexcept
    : Snippet_Filter_FilterValue() {
    *this = ::std::move(from);
  }

  inline Snippet_Filter_FilterValue& operator=(const Snippet_Filter_FilterValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline Snippet_Filter_FilterValue& operator=(Snippet_Filter_FilterValue&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Snippet_Filter_FilterValue& default_instance() {
    return *internal_default_instance();
  }
  static inline const Snippet_Filter_FilterValue* internal_default_instance() {
    return reinterpret_cast<const Snippet_Filter_FilterValue*>(
               &_Snippet_Filter_FilterValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Snippet_Filter_FilterValue& a, Snippet_Filter_FilterValue& b) {
    a.Swap(&b);
  }
  inline void Swap(Snippet_Filter_FilterValue* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Snippet_Filter_FilterValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Snippet_Filter_FilterValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Snippet_Filter_FilterValue>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Snippet_Filter_FilterValue& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Snippet_Filter_FilterValue& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Snippet_Filter_FilterValue* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "StorageEngineInstance.Snippet.Filter.FilterValue";
  }
  protected:
  explicit Snippet_Filter_FilterValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // repeated .StorageEngineInstance.Snippet.ValueType type = 1;
  int type_size() const;
  private:
  int _internal_type_size() const;
  public:
  void clear_type();
  private:
  ::StorageEngineInstance::Snippet_ValueType _internal_type(int index) const;
  void _internal_add_type(::StorageEngineInstance::Snippet_ValueType value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_type();
  public:
  ::StorageEngineInstance::Snippet_ValueType type(int index) const;
  void set_type(int index, ::StorageEngineInstance::Snippet_ValueType value);
  void add_type(::StorageEngineInstance::Snippet_ValueType value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& type() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_type();

  // repeated string value = 2;
  int value_size() const;
  private:
  int _internal_value_size() const;
  public:
  void clear_value();
  const std::string& value(int index) const;
  std::string* mutable_value(int index);
  void set_value(int index, const std::string& value);
  void set_value(int index, std::string&& value);
  void set_value(int index, const char* value);
  void set_value(int index, const char* value, size_t size);
  std::string* add_value();
  void add_value(const std::string& value);
  void add_value(std::string&& value);
  void add_value(const char* value);
  void add_value(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& value() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_value();
  private:
  const std::string& _internal_value(int index) const;
  std::string* _internal_add_value();
  public:

  // @@protoc_insertion_point(class_scope:StorageEngineInstance.Snippet.Filter.FilterValue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> type_;
  mutable std::atomic<int> _type_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_storage_5fengine_5finstance_2eproto;
};
// -------------------------------------------------------------------

class Snippet_Filter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:StorageEngineInstance.Snippet.Filter) */ {
 public:
  inline Snippet_Filter() : Snippet_Filter(nullptr) {}
  ~Snippet_Filter() override;
  explicit constexpr Snippet_Filter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Snippet_Filter(const Snippet_Filter& from);
  Snippet_Filter(Snippet_Filter&& from) noexcept
    : Snippet_Filter() {
    *this = ::std::move(from);
  }

  inline Snippet_Filter& operator=(const Snippet_Filter& from) {
    CopyFrom(from);
    return *this;
  }
  inline Snippet_Filter& operator=(Snippet_Filter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Snippet_Filter& default_instance() {
    return *internal_default_instance();
  }
  static inline const Snippet_Filter* internal_default_instance() {
    return reinterpret_cast<const Snippet_Filter*>(
               &_Snippet_Filter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Snippet_Filter& a, Snippet_Filter& b) {
    a.Swap(&b);
  }
  inline void Swap(Snippet_Filter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Snippet_Filter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Snippet_Filter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Snippet_Filter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Snippet_Filter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Snippet_Filter& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Snippet_Filter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "StorageEngineInstance.Snippet.Filter";
  }
  protected:
  explicit Snippet_Filter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Snippet_Filter_FilterValue FilterValue;

  typedef Snippet_Filter_OperType OperType;
  static constexpr OperType KETI_DEFAULT =
    Snippet_Filter_OperType_KETI_DEFAULT;
  static constexpr OperType KETI_GE =
    Snippet_Filter_OperType_KETI_GE;
  static constexpr OperType KETI_LE =
    Snippet_Filter_OperType_KETI_LE;
  static constexpr OperType KETI_GT =
    Snippet_Filter_OperType_KETI_GT;
  static constexpr OperType KETI_LT =
    Snippet_Filter_OperType_KETI_LT;
  static constexpr OperType KETI_ET =
    Snippet_Filter_OperType_KETI_ET;
  static constexpr OperType KETI_NE =
    Snippet_Filter_OperType_KETI_NE;
  static constexpr OperType KETI_LIKE =
    Snippet_Filter_OperType_KETI_LIKE;
  static constexpr OperType KETI_BETWEEN =
    Snippet_Filter_OperType_KETI_BETWEEN;
  static constexpr OperType KETI_IN =
    Snippet_Filter_OperType_KETI_IN;
  static constexpr OperType KETI_IS =
    Snippet_Filter_OperType_KETI_IS;
  static constexpr OperType KETI_ISNOT =
    Snippet_Filter_OperType_KETI_ISNOT;
  static constexpr OperType KETI_NOT =
    Snippet_Filter_OperType_KETI_NOT;
  static constexpr OperType KETI_AND =
    Snippet_Filter_OperType_KETI_AND;
  static constexpr OperType KETI_OR =
    Snippet_Filter_OperType_KETI_OR;
  static constexpr OperType KETI_ALL =
    Snippet_Filter_OperType_KETI_ALL;
  static constexpr OperType KETI_SUBSTRING =
    Snippet_Filter_OperType_KETI_SUBSTRING;
  static inline bool OperType_IsValid(int value) {
    return Snippet_Filter_OperType_IsValid(value);
  }
  static constexpr OperType OperType_MIN =
    Snippet_Filter_OperType_OperType_MIN;
  static constexpr OperType OperType_MAX =
    Snippet_Filter_OperType_OperType_MAX;
  static constexpr int OperType_ARRAYSIZE =
    Snippet_Filter_OperType_OperType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  OperType_descriptor() {
    return Snippet_Filter_OperType_descriptor();
  }
  template<typename T>
  static inline const std::string& OperType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, OperType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function OperType_Name.");
    return Snippet_Filter_OperType_Name(enum_t_value);
  }
  static inline bool OperType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      OperType* value) {
    return Snippet_Filter_OperType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kLVFieldNumber = 1,
    kRVFieldNumber = 3,
    kOperatorFieldNumber = 2,
  };
  // .StorageEngineInstance.Snippet.Filter.FilterValue LV = 1;
  bool has_lv() const;
  private:
  bool _internal_has_lv() const;
  public:
  void clear_lv();
  const ::StorageEngineInstance::Snippet_Filter_FilterValue& lv() const;
  PROTOBUF_NODISCARD ::StorageEngineInstance::Snippet_Filter_FilterValue* release_lv();
  ::StorageEngineInstance::Snippet_Filter_FilterValue* mutable_lv();
  void set_allocated_lv(::StorageEngineInstance::Snippet_Filter_FilterValue* lv);
  private:
  const ::StorageEngineInstance::Snippet_Filter_FilterValue& _internal_lv() const;
  ::StorageEngineInstance::Snippet_Filter_FilterValue* _internal_mutable_lv();
  public:
  void unsafe_arena_set_allocated_lv(
      ::StorageEngineInstance::Snippet_Filter_FilterValue* lv);
  ::StorageEngineInstance::Snippet_Filter_FilterValue* unsafe_arena_release_lv();

  // .StorageEngineInstance.Snippet.Filter.FilterValue RV = 3;
  bool has_rv() const;
  private:
  bool _internal_has_rv() const;
  public:
  void clear_rv();
  const ::StorageEngineInstance::Snippet_Filter_FilterValue& rv() const;
  PROTOBUF_NODISCARD ::StorageEngineInstance::Snippet_Filter_FilterValue* release_rv();
  ::StorageEngineInstance::Snippet_Filter_FilterValue* mutable_rv();
  void set_allocated_rv(::StorageEngineInstance::Snippet_Filter_FilterValue* rv);
  private:
  const ::StorageEngineInstance::Snippet_Filter_FilterValue& _internal_rv() const;
  ::StorageEngineInstance::Snippet_Filter_FilterValue* _internal_mutable_rv();
  public:
  void unsafe_arena_set_allocated_rv(
      ::StorageEngineInstance::Snippet_Filter_FilterValue* rv);
  ::StorageEngineInstance::Snippet_Filter_FilterValue* unsafe_arena_release_rv();

  // .StorageEngineInstance.Snippet.Filter.OperType Operator = 2;
  void clear_operator_();
  ::StorageEngineInstance::Snippet_Filter_OperType operator_() const;
  void set_operator_(::StorageEngineInstance::Snippet_Filter_OperType value);
  private:
  ::StorageEngineInstance::Snippet_Filter_OperType _internal_operator_() const;
  void _internal_set_operator_(::StorageEngineInstance::Snippet_Filter_OperType value);
  public:

  // @@protoc_insertion_point(class_scope:StorageEngineInstance.Snippet.Filter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::StorageEngineInstance::Snippet_Filter_FilterValue* lv_;
  ::StorageEngineInstance::Snippet_Filter_FilterValue* rv_;
  int operator__;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_storage_5fengine_5finstance_2eproto;
};
// -------------------------------------------------------------------

class Snippet_Projection final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:StorageEngineInstance.Snippet.Projection) */ {
 public:
  inline Snippet_Projection() : Snippet_Projection(nullptr) {}
  ~Snippet_Projection() override;
  explicit constexpr Snippet_Projection(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Snippet_Projection(const Snippet_Projection& from);
  Snippet_Projection(Snippet_Projection&& from) noexcept
    : Snippet_Projection() {
    *this = ::std::move(from);
  }

  inline Snippet_Projection& operator=(const Snippet_Projection& from) {
    CopyFrom(from);
    return *this;
  }
  inline Snippet_Projection& operator=(Snippet_Projection&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Snippet_Projection& default_instance() {
    return *internal_default_instance();
  }
  static inline const Snippet_Projection* internal_default_instance() {
    return reinterpret_cast<const Snippet_Projection*>(
               &_Snippet_Projection_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Snippet_Projection& a, Snippet_Projection& b) {
    a.Swap(&b);
  }
  inline void Swap(Snippet_Projection* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Snippet_Projection* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Snippet_Projection* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Snippet_Projection>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Snippet_Projection& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Snippet_Projection& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Snippet_Projection* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "StorageEngineInstance.Snippet.Projection";
  }
  protected:
  explicit Snippet_Projection(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Snippet_Projection_SelectType SelectType;
  static constexpr SelectType COLUMNNAME =
    Snippet_Projection_SelectType_COLUMNNAME;
  static constexpr SelectType SUM =
    Snippet_Projection_SelectType_SUM;
  static constexpr SelectType AVG =
    Snippet_Projection_SelectType_AVG;
  static constexpr SelectType COUNT =
    Snippet_Projection_SelectType_COUNT;
  static constexpr SelectType COUNTSTAR =
    Snippet_Projection_SelectType_COUNTSTAR;
  static constexpr SelectType COUNTDISTINCT =
    Snippet_Projection_SelectType_COUNTDISTINCT;
  static constexpr SelectType TOP =
    Snippet_Projection_SelectType_TOP;
  static constexpr SelectType MIN =
    Snippet_Projection_SelectType_MIN;
  static constexpr SelectType MAX =
    Snippet_Projection_SelectType_MAX;
  static inline bool SelectType_IsValid(int value) {
    return Snippet_Projection_SelectType_IsValid(value);
  }
  static constexpr SelectType SelectType_MIN =
    Snippet_Projection_SelectType_SelectType_MIN;
  static constexpr SelectType SelectType_MAX =
    Snippet_Projection_SelectType_SelectType_MAX;
  static constexpr int SelectType_ARRAYSIZE =
    Snippet_Projection_SelectType_SelectType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  SelectType_descriptor() {
    return Snippet_Projection_SelectType_descriptor();
  }
  template<typename T>
  static inline const std::string& SelectType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, SelectType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function SelectType_Name.");
    return Snippet_Projection_SelectType_Name(enum_t_value);
  }
  static inline bool SelectType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      SelectType* value) {
    return Snippet_Projection_SelectType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 2,
    kValueTypeFieldNumber = 3,
    kSelectTypeFieldNumber = 1,
  };
  // repeated string value = 2;
  int value_size() const;
  private:
  int _internal_value_size() const;
  public:
  void clear_value();
  const std::string& value(int index) const;
  std::string* mutable_value(int index);
  void set_value(int index, const std::string& value);
  void set_value(int index, std::string&& value);
  void set_value(int index, const char* value);
  void set_value(int index, const char* value, size_t size);
  std::string* add_value();
  void add_value(const std::string& value);
  void add_value(std::string&& value);
  void add_value(const char* value);
  void add_value(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& value() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_value();
  private:
  const std::string& _internal_value(int index) const;
  std::string* _internal_add_value();
  public:

  // repeated .StorageEngineInstance.Snippet.ValueType value_type = 3;
  int value_type_size() const;
  private:
  int _internal_value_type_size() const;
  public:
  void clear_value_type();
  private:
  ::StorageEngineInstance::Snippet_ValueType _internal_value_type(int index) const;
  void _internal_add_value_type(::StorageEngineInstance::Snippet_ValueType value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_value_type();
  public:
  ::StorageEngineInstance::Snippet_ValueType value_type(int index) const;
  void set_value_type(int index, ::StorageEngineInstance::Snippet_ValueType value);
  void add_value_type(::StorageEngineInstance::Snippet_ValueType value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& value_type() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_value_type();

  // .StorageEngineInstance.Snippet.Projection.SelectType select_type = 1;
  void clear_select_type();
  ::StorageEngineInstance::Snippet_Projection_SelectType select_type() const;
  void set_select_type(::StorageEngineInstance::Snippet_Projection_SelectType value);
  private:
  ::StorageEngineInstance::Snippet_Projection_SelectType _internal_select_type() const;
  void _internal_set_select_type(::StorageEngineInstance::Snippet_Projection_SelectType value);
  public:

  // @@protoc_insertion_point(class_scope:StorageEngineInstance.Snippet.Projection)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> value_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> value_type_;
  mutable std::atomic<int> _value_type_cached_byte_size_;
  int select_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_storage_5fengine_5finstance_2eproto;
};
// -------------------------------------------------------------------

class Snippet_Order final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:StorageEngineInstance.Snippet.Order) */ {
 public:
  inline Snippet_Order() : Snippet_Order(nullptr) {}
  ~Snippet_Order() override;
  explicit constexpr Snippet_Order(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Snippet_Order(const Snippet_Order& from);
  Snippet_Order(Snippet_Order&& from) noexcept
    : Snippet_Order() {
    *this = ::std::move(from);
  }

  inline Snippet_Order& operator=(const Snippet_Order& from) {
    CopyFrom(from);
    return *this;
  }
  inline Snippet_Order& operator=(Snippet_Order&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Snippet_Order& default_instance() {
    return *internal_default_instance();
  }
  static inline const Snippet_Order* internal_default_instance() {
    return reinterpret_cast<const Snippet_Order*>(
               &_Snippet_Order_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Snippet_Order& a, Snippet_Order& b) {
    a.Swap(&b);
  }
  inline void Swap(Snippet_Order* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Snippet_Order* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Snippet_Order* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Snippet_Order>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Snippet_Order& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Snippet_Order& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Snippet_Order* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "StorageEngineInstance.Snippet.Order";
  }
  protected:
  explicit Snippet_Order(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Snippet_Order_OrderDirection OrderDirection;
  static constexpr OrderDirection ASC =
    Snippet_Order_OrderDirection_ASC;
  static constexpr OrderDirection DESC =
    Snippet_Order_OrderDirection_DESC;
  static inline bool OrderDirection_IsValid(int value) {
    return Snippet_Order_OrderDirection_IsValid(value);
  }
  static constexpr OrderDirection OrderDirection_MIN =
    Snippet_Order_OrderDirection_OrderDirection_MIN;
  static constexpr OrderDirection OrderDirection_MAX =
    Snippet_Order_OrderDirection_OrderDirection_MAX;
  static constexpr int OrderDirection_ARRAYSIZE =
    Snippet_Order_OrderDirection_OrderDirection_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  OrderDirection_descriptor() {
    return Snippet_Order_OrderDirection_descriptor();
  }
  template<typename T>
  static inline const std::string& OrderDirection_Name(T enum_t_value) {
    static_assert(::std::is_same<T, OrderDirection>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function OrderDirection_Name.");
    return Snippet_Order_OrderDirection_Name(enum_t_value);
  }
  static inline bool OrderDirection_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      OrderDirection* value) {
    return Snippet_Order_OrderDirection_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kAscendingFieldNumber = 1,
    kColumnNameFieldNumber = 2,
  };
  // repeated .StorageEngineInstance.Snippet.Order.OrderDirection ascending = 1;
  int ascending_size() const;
  private:
  int _internal_ascending_size() const;
  public:
  void clear_ascending();
  private:
  ::StorageEngineInstance::Snippet_Order_OrderDirection _internal_ascending(int index) const;
  void _internal_add_ascending(::StorageEngineInstance::Snippet_Order_OrderDirection value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_ascending();
  public:
  ::StorageEngineInstance::Snippet_Order_OrderDirection ascending(int index) const;
  void set_ascending(int index, ::StorageEngineInstance::Snippet_Order_OrderDirection value);
  void add_ascending(::StorageEngineInstance::Snippet_Order_OrderDirection value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& ascending() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_ascending();

  // repeated string column_name = 2;
  int column_name_size() const;
  private:
  int _internal_column_name_size() const;
  public:
  void clear_column_name();
  const std::string& column_name(int index) const;
  std::string* mutable_column_name(int index);
  void set_column_name(int index, const std::string& value);
  void set_column_name(int index, std::string&& value);
  void set_column_name(int index, const char* value);
  void set_column_name(int index, const char* value, size_t size);
  std::string* add_column_name();
  void add_column_name(const std::string& value);
  void add_column_name(std::string&& value);
  void add_column_name(const char* value);
  void add_column_name(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& column_name() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_column_name();
  private:
  const std::string& _internal_column_name(int index) const;
  std::string* _internal_add_column_name();
  public:

  // @@protoc_insertion_point(class_scope:StorageEngineInstance.Snippet.Order)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> ascending_;
  mutable std::atomic<int> _ascending_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> column_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_storage_5fengine_5finstance_2eproto;
};
// -------------------------------------------------------------------

class Snippet_Dependency final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:StorageEngineInstance.Snippet.Dependency) */ {
 public:
  inline Snippet_Dependency() : Snippet_Dependency(nullptr) {}
  ~Snippet_Dependency() override;
  explicit constexpr Snippet_Dependency(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Snippet_Dependency(const Snippet_Dependency& from);
  Snippet_Dependency(Snippet_Dependency&& from) noexcept
    : Snippet_Dependency() {
    *this = ::std::move(from);
  }

  inline Snippet_Dependency& operator=(const Snippet_Dependency& from) {
    CopyFrom(from);
    return *this;
  }
  inline Snippet_Dependency& operator=(Snippet_Dependency&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Snippet_Dependency& default_instance() {
    return *internal_default_instance();
  }
  static inline const Snippet_Dependency* internal_default_instance() {
    return reinterpret_cast<const Snippet_Dependency*>(
               &_Snippet_Dependency_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(Snippet_Dependency& a, Snippet_Dependency& b) {
    a.Swap(&b);
  }
  inline void Swap(Snippet_Dependency* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Snippet_Dependency* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Snippet_Dependency* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Snippet_Dependency>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Snippet_Dependency& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Snippet_Dependency& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Snippet_Dependency* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "StorageEngineInstance.Snippet.Dependency";
  }
  protected:
  explicit Snippet_Dependency(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDependencyProjectionFieldNumber = 1,
    kDependencyFilterFieldNumber = 2,
  };
  // repeated .StorageEngineInstance.Snippet.Projection dependency_projection = 1;
  int dependency_projection_size() const;
  private:
  int _internal_dependency_projection_size() const;
  public:
  void clear_dependency_projection();
  ::StorageEngineInstance::Snippet_Projection* mutable_dependency_projection(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::StorageEngineInstance::Snippet_Projection >*
      mutable_dependency_projection();
  private:
  const ::StorageEngineInstance::Snippet_Projection& _internal_dependency_projection(int index) const;
  ::StorageEngineInstance::Snippet_Projection* _internal_add_dependency_projection();
  public:
  const ::StorageEngineInstance::Snippet_Projection& dependency_projection(int index) const;
  ::StorageEngineInstance::Snippet_Projection* add_dependency_projection();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::StorageEngineInstance::Snippet_Projection >&
      dependency_projection() const;

  // repeated .StorageEngineInstance.Snippet.Filter dependency_filter = 2;
  int dependency_filter_size() const;
  private:
  int _internal_dependency_filter_size() const;
  public:
  void clear_dependency_filter();
  ::StorageEngineInstance::Snippet_Filter* mutable_dependency_filter(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::StorageEngineInstance::Snippet_Filter >*
      mutable_dependency_filter();
  private:
  const ::StorageEngineInstance::Snippet_Filter& _internal_dependency_filter(int index) const;
  ::StorageEngineInstance::Snippet_Filter* _internal_add_dependency_filter();
  public:
  const ::StorageEngineInstance::Snippet_Filter& dependency_filter(int index) const;
  ::StorageEngineInstance::Snippet_Filter* add_dependency_filter();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::StorageEngineInstance::Snippet_Filter >&
      dependency_filter() const;

  // @@protoc_insertion_point(class_scope:StorageEngineInstance.Snippet.Dependency)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::StorageEngineInstance::Snippet_Projection > dependency_projection_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::StorageEngineInstance::Snippet_Filter > dependency_filter_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_storage_5fengine_5finstance_2eproto;
};
// -------------------------------------------------------------------

class Snippet_Limit final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:StorageEngineInstance.Snippet.Limit) */ {
 public:
  inline Snippet_Limit() : Snippet_Limit(nullptr) {}
  ~Snippet_Limit() override;
  explicit constexpr Snippet_Limit(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Snippet_Limit(const Snippet_Limit& from);
  Snippet_Limit(Snippet_Limit&& from) noexcept
    : Snippet_Limit() {
    *this = ::std::move(from);
  }

  inline Snippet_Limit& operator=(const Snippet_Limit& from) {
    CopyFrom(from);
    return *this;
  }
  inline Snippet_Limit& operator=(Snippet_Limit&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Snippet_Limit& default_instance() {
    return *internal_default_instance();
  }
  static inline const Snippet_Limit* internal_default_instance() {
    return reinterpret_cast<const Snippet_Limit*>(
               &_Snippet_Limit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(Snippet_Limit& a, Snippet_Limit& b) {
    a.Swap(&b);
  }
  inline void Swap(Snippet_Limit* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Snippet_Limit* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Snippet_Limit* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Snippet_Limit>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Snippet_Limit& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Snippet_Limit& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Snippet_Limit* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "StorageEngineInstance.Snippet.Limit";
  }
  protected:
  explicit Snippet_Limit(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOffsetFieldNumber = 1,
    kLengthFieldNumber = 2,
  };
  // int32 offset = 1;
  void clear_offset();
  int32_t offset() const;
  void set_offset(int32_t value);
  private:
  int32_t _internal_offset() const;
  void _internal_set_offset(int32_t value);
  public:

  // int32 length = 2;
  void clear_length();
  int32_t length() const;
  void set_length(int32_t value);
  private:
  int32_t _internal_length() const;
  void _internal_set_length(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:StorageEngineInstance.Snippet.Limit)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t offset_;
  int32_t length_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_storage_5fengine_5finstance_2eproto;
};
// -------------------------------------------------------------------

class Snippet final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:StorageEngineInstance.Snippet) */ {
 public:
  inline Snippet() : Snippet(nullptr) {}
  ~Snippet() override;
  explicit constexpr Snippet(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Snippet(const Snippet& from);
  Snippet(Snippet&& from) noexcept
    : Snippet() {
    *this = ::std::move(from);
  }

  inline Snippet& operator=(const Snippet& from) {
    CopyFrom(from);
    return *this;
  }
  inline Snippet& operator=(Snippet&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Snippet& default_instance() {
    return *internal_default_instance();
  }
  static inline const Snippet* internal_default_instance() {
    return reinterpret_cast<const Snippet*>(
               &_Snippet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(Snippet& a, Snippet& b) {
    a.Swap(&b);
  }
  inline void Swap(Snippet* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Snippet* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Snippet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Snippet>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Snippet& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Snippet& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Snippet* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "StorageEngineInstance.Snippet";
  }
  protected:
  explicit Snippet(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Snippet_Filter Filter;
  typedef Snippet_Projection Projection;
  typedef Snippet_Order Order;
  typedef Snippet_Dependency Dependency;
  typedef Snippet_Limit Limit;

  typedef Snippet_ValueType ValueType;
  static constexpr ValueType INT8 =
    Snippet_ValueType_INT8;
  static constexpr ValueType INT16 =
    Snippet_ValueType_INT16;
  static constexpr ValueType INT32 =
    Snippet_ValueType_INT32;
  static constexpr ValueType INT64 =
    Snippet_ValueType_INT64;
  static constexpr ValueType FLOAT32 =
    Snippet_ValueType_FLOAT32;
  static constexpr ValueType FLOAT64 =
    Snippet_ValueType_FLOAT64;
  static constexpr ValueType NUMERIC =
    Snippet_ValueType_NUMERIC;
  static constexpr ValueType DATE =
    Snippet_ValueType_DATE;
  static constexpr ValueType TIMESTAMP =
    Snippet_ValueType_TIMESTAMP;
  static constexpr ValueType STRING =
    Snippet_ValueType_STRING;
  static constexpr ValueType COLUMN =
    Snippet_ValueType_COLUMN;
  static constexpr ValueType OPERATOR =
    Snippet_ValueType_OPERATOR;
  static inline bool ValueType_IsValid(int value) {
    return Snippet_ValueType_IsValid(value);
  }
  static constexpr ValueType ValueType_MIN =
    Snippet_ValueType_ValueType_MIN;
  static constexpr ValueType ValueType_MAX =
    Snippet_ValueType_ValueType_MAX;
  static constexpr int ValueType_ARRAYSIZE =
    Snippet_ValueType_ValueType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ValueType_descriptor() {
    return Snippet_ValueType_descriptor();
  }
  template<typename T>
  static inline const std::string& ValueType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ValueType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ValueType_Name.");
    return Snippet_ValueType_Name(enum_t_value);
  }
  static inline bool ValueType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ValueType* value) {
    return Snippet_ValueType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTableNameFieldNumber = 4,
    kTableColFieldNumber = 5,
    kTableFilterFieldNumber = 6,
    kTableOffsetFieldNumber = 8,
    kTableOfflenFieldNumber = 9,
    kTableDatatypeFieldNumber = 10,
    kColumnAliasFieldNumber = 12,
    kColumnProjectionFieldNumber = 13,
    kGroupByFieldNumber = 14,
    kHavingFieldNumber = 18,
    kDbNameFieldNumber = 1,
    kTableAliasFieldNumber = 11,
    kDependencyFieldNumber = 7,
    kOrderByFieldNumber = 15,
    kLimitFieldNumber = 16,
    kQueryIDFieldNumber = 2,
    kWorkIDFieldNumber = 3,
    kPkNumFieldNumber = 17,
  };
  // repeated string table_name = 4;
  int table_name_size() const;
  private:
  int _internal_table_name_size() const;
  public:
  void clear_table_name();
  const std::string& table_name(int index) const;
  std::string* mutable_table_name(int index);
  void set_table_name(int index, const std::string& value);
  void set_table_name(int index, std::string&& value);
  void set_table_name(int index, const char* value);
  void set_table_name(int index, const char* value, size_t size);
  std::string* add_table_name();
  void add_table_name(const std::string& value);
  void add_table_name(std::string&& value);
  void add_table_name(const char* value);
  void add_table_name(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& table_name() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_table_name();
  private:
  const std::string& _internal_table_name(int index) const;
  std::string* _internal_add_table_name();
  public:

  // repeated string table_col = 5;
  int table_col_size() const;
  private:
  int _internal_table_col_size() const;
  public:
  void clear_table_col();
  const std::string& table_col(int index) const;
  std::string* mutable_table_col(int index);
  void set_table_col(int index, const std::string& value);
  void set_table_col(int index, std::string&& value);
  void set_table_col(int index, const char* value);
  void set_table_col(int index, const char* value, size_t size);
  std::string* add_table_col();
  void add_table_col(const std::string& value);
  void add_table_col(std::string&& value);
  void add_table_col(const char* value);
  void add_table_col(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& table_col() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_table_col();
  private:
  const std::string& _internal_table_col(int index) const;
  std::string* _internal_add_table_col();
  public:

  // repeated .StorageEngineInstance.Snippet.Filter table_filter = 6;
  int table_filter_size() const;
  private:
  int _internal_table_filter_size() const;
  public:
  void clear_table_filter();
  ::StorageEngineInstance::Snippet_Filter* mutable_table_filter(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::StorageEngineInstance::Snippet_Filter >*
      mutable_table_filter();
  private:
  const ::StorageEngineInstance::Snippet_Filter& _internal_table_filter(int index) const;
  ::StorageEngineInstance::Snippet_Filter* _internal_add_table_filter();
  public:
  const ::StorageEngineInstance::Snippet_Filter& table_filter(int index) const;
  ::StorageEngineInstance::Snippet_Filter* add_table_filter();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::StorageEngineInstance::Snippet_Filter >&
      table_filter() const;

  // repeated int32 table_offset = 8;
  int table_offset_size() const;
  private:
  int _internal_table_offset_size() const;
  public:
  void clear_table_offset();
  private:
  int32_t _internal_table_offset(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_table_offset() const;
  void _internal_add_table_offset(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_table_offset();
  public:
  int32_t table_offset(int index) const;
  void set_table_offset(int index, int32_t value);
  void add_table_offset(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      table_offset() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_table_offset();

  // repeated int32 table_offlen = 9;
  int table_offlen_size() const;
  private:
  int _internal_table_offlen_size() const;
  public:
  void clear_table_offlen();
  private:
  int32_t _internal_table_offlen(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_table_offlen() const;
  void _internal_add_table_offlen(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_table_offlen();
  public:
  int32_t table_offlen(int index) const;
  void set_table_offlen(int index, int32_t value);
  void add_table_offlen(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      table_offlen() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_table_offlen();

  // repeated int32 table_datatype = 10;
  int table_datatype_size() const;
  private:
  int _internal_table_datatype_size() const;
  public:
  void clear_table_datatype();
  private:
  int32_t _internal_table_datatype(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_table_datatype() const;
  void _internal_add_table_datatype(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_table_datatype();
  public:
  int32_t table_datatype(int index) const;
  void set_table_datatype(int index, int32_t value);
  void add_table_datatype(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      table_datatype() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_table_datatype();

  // repeated string column_alias = 12;
  int column_alias_size() const;
  private:
  int _internal_column_alias_size() const;
  public:
  void clear_column_alias();
  const std::string& column_alias(int index) const;
  std::string* mutable_column_alias(int index);
  void set_column_alias(int index, const std::string& value);
  void set_column_alias(int index, std::string&& value);
  void set_column_alias(int index, const char* value);
  void set_column_alias(int index, const char* value, size_t size);
  std::string* add_column_alias();
  void add_column_alias(const std::string& value);
  void add_column_alias(std::string&& value);
  void add_column_alias(const char* value);
  void add_column_alias(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& column_alias() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_column_alias();
  private:
  const std::string& _internal_column_alias(int index) const;
  std::string* _internal_add_column_alias();
  public:

  // repeated .StorageEngineInstance.Snippet.Projection column_projection = 13;
  int column_projection_size() const;
  private:
  int _internal_column_projection_size() const;
  public:
  void clear_column_projection();
  ::StorageEngineInstance::Snippet_Projection* mutable_column_projection(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::StorageEngineInstance::Snippet_Projection >*
      mutable_column_projection();
  private:
  const ::StorageEngineInstance::Snippet_Projection& _internal_column_projection(int index) const;
  ::StorageEngineInstance::Snippet_Projection* _internal_add_column_projection();
  public:
  const ::StorageEngineInstance::Snippet_Projection& column_projection(int index) const;
  ::StorageEngineInstance::Snippet_Projection* add_column_projection();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::StorageEngineInstance::Snippet_Projection >&
      column_projection() const;

  // repeated string group_by = 14;
  int group_by_size() const;
  private:
  int _internal_group_by_size() const;
  public:
  void clear_group_by();
  const std::string& group_by(int index) const;
  std::string* mutable_group_by(int index);
  void set_group_by(int index, const std::string& value);
  void set_group_by(int index, std::string&& value);
  void set_group_by(int index, const char* value);
  void set_group_by(int index, const char* value, size_t size);
  std::string* add_group_by();
  void add_group_by(const std::string& value);
  void add_group_by(std::string&& value);
  void add_group_by(const char* value);
  void add_group_by(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& group_by() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_group_by();
  private:
  const std::string& _internal_group_by(int index) const;
  std::string* _internal_add_group_by();
  public:

  // repeated .StorageEngineInstance.Snippet.Filter having = 18;
  int having_size() const;
  private:
  int _internal_having_size() const;
  public:
  void clear_having();
  ::StorageEngineInstance::Snippet_Filter* mutable_having(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::StorageEngineInstance::Snippet_Filter >*
      mutable_having();
  private:
  const ::StorageEngineInstance::Snippet_Filter& _internal_having(int index) const;
  ::StorageEngineInstance::Snippet_Filter* _internal_add_having();
  public:
  const ::StorageEngineInstance::Snippet_Filter& having(int index) const;
  ::StorageEngineInstance::Snippet_Filter* add_having();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::StorageEngineInstance::Snippet_Filter >&
      having() const;

  // string db_name = 1;
  void clear_db_name();
  const std::string& db_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_db_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_db_name();
  PROTOBUF_NODISCARD std::string* release_db_name();
  void set_allocated_db_name(std::string* db_name);
  private:
  const std::string& _internal_db_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_db_name(const std::string& value);
  std::string* _internal_mutable_db_name();
  public:

  // string table_alias = 11;
  void clear_table_alias();
  const std::string& table_alias() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_table_alias(ArgT0&& arg0, ArgT... args);
  std::string* mutable_table_alias();
  PROTOBUF_NODISCARD std::string* release_table_alias();
  void set_allocated_table_alias(std::string* table_alias);
  private:
  const std::string& _internal_table_alias() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_table_alias(const std::string& value);
  std::string* _internal_mutable_table_alias();
  public:

  // .StorageEngineInstance.Snippet.Dependency dependency = 7;
  bool has_dependency() const;
  private:
  bool _internal_has_dependency() const;
  public:
  void clear_dependency();
  const ::StorageEngineInstance::Snippet_Dependency& dependency() const;
  PROTOBUF_NODISCARD ::StorageEngineInstance::Snippet_Dependency* release_dependency();
  ::StorageEngineInstance::Snippet_Dependency* mutable_dependency();
  void set_allocated_dependency(::StorageEngineInstance::Snippet_Dependency* dependency);
  private:
  const ::StorageEngineInstance::Snippet_Dependency& _internal_dependency() const;
  ::StorageEngineInstance::Snippet_Dependency* _internal_mutable_dependency();
  public:
  void unsafe_arena_set_allocated_dependency(
      ::StorageEngineInstance::Snippet_Dependency* dependency);
  ::StorageEngineInstance::Snippet_Dependency* unsafe_arena_release_dependency();

  // .StorageEngineInstance.Snippet.Order order_by = 15;
  bool has_order_by() const;
  private:
  bool _internal_has_order_by() const;
  public:
  void clear_order_by();
  const ::StorageEngineInstance::Snippet_Order& order_by() const;
  PROTOBUF_NODISCARD ::StorageEngineInstance::Snippet_Order* release_order_by();
  ::StorageEngineInstance::Snippet_Order* mutable_order_by();
  void set_allocated_order_by(::StorageEngineInstance::Snippet_Order* order_by);
  private:
  const ::StorageEngineInstance::Snippet_Order& _internal_order_by() const;
  ::StorageEngineInstance::Snippet_Order* _internal_mutable_order_by();
  public:
  void unsafe_arena_set_allocated_order_by(
      ::StorageEngineInstance::Snippet_Order* order_by);
  ::StorageEngineInstance::Snippet_Order* unsafe_arena_release_order_by();

  // .StorageEngineInstance.Snippet.Limit limit = 16;
  bool has_limit() const;
  private:
  bool _internal_has_limit() const;
  public:
  void clear_limit();
  const ::StorageEngineInstance::Snippet_Limit& limit() const;
  PROTOBUF_NODISCARD ::StorageEngineInstance::Snippet_Limit* release_limit();
  ::StorageEngineInstance::Snippet_Limit* mutable_limit();
  void set_allocated_limit(::StorageEngineInstance::Snippet_Limit* limit);
  private:
  const ::StorageEngineInstance::Snippet_Limit& _internal_limit() const;
  ::StorageEngineInstance::Snippet_Limit* _internal_mutable_limit();
  public:
  void unsafe_arena_set_allocated_limit(
      ::StorageEngineInstance::Snippet_Limit* limit);
  ::StorageEngineInstance::Snippet_Limit* unsafe_arena_release_limit();

  // int32 query_ID = 2;
  void clear_query_id();
  int32_t query_id() const;
  void set_query_id(int32_t value);
  private:
  int32_t _internal_query_id() const;
  void _internal_set_query_id(int32_t value);
  public:

  // int32 work_ID = 3;
  void clear_work_id();
  int32_t work_id() const;
  void set_work_id(int32_t value);
  private:
  int32_t _internal_work_id() const;
  void _internal_set_work_id(int32_t value);
  public:

  // int32 pk_num = 17;
  void clear_pk_num();
  int32_t pk_num() const;
  void set_pk_num(int32_t value);
  private:
  int32_t _internal_pk_num() const;
  void _internal_set_pk_num(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:StorageEngineInstance.Snippet)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> table_name_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> table_col_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::StorageEngineInstance::Snippet_Filter > table_filter_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > table_offset_;
  mutable std::atomic<int> _table_offset_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > table_offlen_;
  mutable std::atomic<int> _table_offlen_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > table_datatype_;
  mutable std::atomic<int> _table_datatype_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> column_alias_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::StorageEngineInstance::Snippet_Projection > column_projection_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> group_by_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::StorageEngineInstance::Snippet_Filter > having_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr db_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr table_alias_;
  ::StorageEngineInstance::Snippet_Dependency* dependency_;
  ::StorageEngineInstance::Snippet_Order* order_by_;
  ::StorageEngineInstance::Snippet_Limit* limit_;
  int32_t query_id_;
  int32_t work_id_;
  int32_t pk_num_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_storage_5fengine_5finstance_2eproto;
};
// -------------------------------------------------------------------

class GenericQuery final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:StorageEngineInstance.GenericQuery) */ {
 public:
  inline GenericQuery() : GenericQuery(nullptr) {}
  ~GenericQuery() override;
  explicit constexpr GenericQuery(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GenericQuery(const GenericQuery& from);
  GenericQuery(GenericQuery&& from) noexcept
    : GenericQuery() {
    *this = ::std::move(from);
  }

  inline GenericQuery& operator=(const GenericQuery& from) {
    CopyFrom(from);
    return *this;
  }
  inline GenericQuery& operator=(GenericQuery&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GenericQuery& default_instance() {
    return *internal_default_instance();
  }
  static inline const GenericQuery* internal_default_instance() {
    return reinterpret_cast<const GenericQuery*>(
               &_GenericQuery_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(GenericQuery& a, GenericQuery& b) {
    a.Swap(&b);
  }
  inline void Swap(GenericQuery* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GenericQuery* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GenericQuery* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GenericQuery>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GenericQuery& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GenericQuery& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GenericQuery* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "StorageEngineInstance.GenericQuery";
  }
  protected:
  explicit GenericQuery(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDbNameFieldNumber = 1,
    kQueryFieldNumber = 2,
  };
  // string db_name = 1;
  void clear_db_name();
  const std::string& db_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_db_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_db_name();
  PROTOBUF_NODISCARD std::string* release_db_name();
  void set_allocated_db_name(std::string* db_name);
  private:
  const std::string& _internal_db_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_db_name(const std::string& value);
  std::string* _internal_mutable_db_name();
  public:

  // string query = 2;
  void clear_query();
  const std::string& query() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_query(ArgT0&& arg0, ArgT... args);
  std::string* mutable_query();
  PROTOBUF_NODISCARD std::string* release_query();
  void set_allocated_query(std::string* query);
  private:
  const std::string& _internal_query() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_query(const std::string& value);
  std::string* _internal_mutable_query();
  public:

  // @@protoc_insertion_point(class_scope:StorageEngineInstance.GenericQuery)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr db_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr query_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_storage_5fengine_5finstance_2eproto;
};
// -------------------------------------------------------------------

class Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:StorageEngineInstance.Request) */ {
 public:
  inline Request() : Request(nullptr) {}
  ~Request() override;
  explicit constexpr Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Request(const Request& from);
  Request(Request&& from) noexcept
    : Request() {
    *this = ::std::move(from);
  }

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline Request& operator=(Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const Request* internal_default_instance() {
    return reinterpret_cast<const Request*>(
               &_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(Request& a, Request& b) {
    a.Swap(&b);
  }
  inline void Swap(Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "StorageEngineInstance.Request";
  }
  protected:
  explicit Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDbNameFieldNumber = 3,
    kTableNameFieldNumber = 4,
    kQueryIdFieldNumber = 1,
    kWorkIdFieldNumber = 2,
  };
  // string db_name = 3;
  void clear_db_name();
  const std::string& db_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_db_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_db_name();
  PROTOBUF_NODISCARD std::string* release_db_name();
  void set_allocated_db_name(std::string* db_name);
  private:
  const std::string& _internal_db_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_db_name(const std::string& value);
  std::string* _internal_mutable_db_name();
  public:

  // string table_name = 4;
  void clear_table_name();
  const std::string& table_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_table_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_table_name();
  PROTOBUF_NODISCARD std::string* release_table_name();
  void set_allocated_table_name(std::string* table_name);
  private:
  const std::string& _internal_table_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_table_name(const std::string& value);
  std::string* _internal_mutable_table_name();
  public:

  // int32 query_id = 1;
  void clear_query_id();
  int32_t query_id() const;
  void set_query_id(int32_t value);
  private:
  int32_t _internal_query_id() const;
  void _internal_set_query_id(int32_t value);
  public:

  // int32 work_id = 2;
  void clear_work_id();
  int32_t work_id() const;
  void set_work_id(int32_t value);
  private:
  int32_t _internal_work_id() const;
  void _internal_set_work_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:StorageEngineInstance.Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr db_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr table_name_;
  int32_t query_id_;
  int32_t work_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_storage_5fengine_5finstance_2eproto;
};
// -------------------------------------------------------------------

class Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:StorageEngineInstance.Response) */ {
 public:
  inline Response() : Response(nullptr) {}
  ~Response() override;
  explicit constexpr Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Response(const Response& from);
  Response(Response&& from) noexcept
    : Response() {
    *this = ::std::move(from);
  }

  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline Response& operator=(Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const Response* internal_default_instance() {
    return reinterpret_cast<const Response*>(
               &_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(Response& a, Response& b) {
    a.Swap(&b);
  }
  inline void Swap(Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "StorageEngineInstance.Response";
  }
  protected:
  explicit Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // string value = 1;
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:StorageEngineInstance.Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_storage_5fengine_5finstance_2eproto;
};
// -------------------------------------------------------------------

class QueryResult_Column final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:StorageEngineInstance.QueryResult.Column) */ {
 public:
  inline QueryResult_Column() : QueryResult_Column(nullptr) {}
  ~QueryResult_Column() override;
  explicit constexpr QueryResult_Column(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryResult_Column(const QueryResult_Column& from);
  QueryResult_Column(QueryResult_Column&& from) noexcept
    : QueryResult_Column() {
    *this = ::std::move(from);
  }

  inline QueryResult_Column& operator=(const QueryResult_Column& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryResult_Column& operator=(QueryResult_Column&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryResult_Column& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryResult_Column* internal_default_instance() {
    return reinterpret_cast<const QueryResult_Column*>(
               &_QueryResult_Column_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(QueryResult_Column& a, QueryResult_Column& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryResult_Column* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryResult_Column* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryResult_Column* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryResult_Column>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryResult_Column& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const QueryResult_Column& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryResult_Column* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "StorageEngineInstance.QueryResult.Column";
  }
  protected:
  explicit QueryResult_Column(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef QueryResult_Column_ColType ColType;
  static constexpr ColType TYPE_EMPTY =
    QueryResult_Column_ColType_TYPE_EMPTY;
  static constexpr ColType TYPE_STRING =
    QueryResult_Column_ColType_TYPE_STRING;
  static constexpr ColType TYPE_INT =
    QueryResult_Column_ColType_TYPE_INT;
  static constexpr ColType TYPE_FLOAT =
    QueryResult_Column_ColType_TYPE_FLOAT;
  static inline bool ColType_IsValid(int value) {
    return QueryResult_Column_ColType_IsValid(value);
  }
  static constexpr ColType ColType_MIN =
    QueryResult_Column_ColType_ColType_MIN;
  static constexpr ColType ColType_MAX =
    QueryResult_Column_ColType_ColType_MAX;
  static constexpr int ColType_ARRAYSIZE =
    QueryResult_Column_ColType_ColType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ColType_descriptor() {
    return QueryResult_Column_ColType_descriptor();
  }
  template<typename T>
  static inline const std::string& ColType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ColType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ColType_Name.");
    return QueryResult_Column_ColType_Name(enum_t_value);
  }
  static inline bool ColType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ColType* value) {
    return QueryResult_Column_ColType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kStringColFieldNumber = 3,
    kIntColFieldNumber = 4,
    kDoubleColFieldNumber = 5,
    kColTypeFieldNumber = 2,
  };
  // repeated string string_col = 3;
  int string_col_size() const;
  private:
  int _internal_string_col_size() const;
  public:
  void clear_string_col();
  const std::string& string_col(int index) const;
  std::string* mutable_string_col(int index);
  void set_string_col(int index, const std::string& value);
  void set_string_col(int index, std::string&& value);
  void set_string_col(int index, const char* value);
  void set_string_col(int index, const char* value, size_t size);
  std::string* add_string_col();
  void add_string_col(const std::string& value);
  void add_string_col(std::string&& value);
  void add_string_col(const char* value);
  void add_string_col(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& string_col() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_string_col();
  private:
  const std::string& _internal_string_col(int index) const;
  std::string* _internal_add_string_col();
  public:

  // repeated int32 int_col = 4;
  int int_col_size() const;
  private:
  int _internal_int_col_size() const;
  public:
  void clear_int_col();
  private:
  int32_t _internal_int_col(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_int_col() const;
  void _internal_add_int_col(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_int_col();
  public:
  int32_t int_col(int index) const;
  void set_int_col(int index, int32_t value);
  void add_int_col(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      int_col() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_int_col();

  // repeated double double_col = 5;
  int double_col_size() const;
  private:
  int _internal_double_col_size() const;
  public:
  void clear_double_col();
  private:
  double _internal_double_col(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_double_col() const;
  void _internal_add_double_col(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_double_col();
  public:
  double double_col(int index) const;
  void set_double_col(int index, double value);
  void add_double_col(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      double_col() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_double_col();

  // .StorageEngineInstance.QueryResult.Column.ColType col_type = 2;
  void clear_col_type();
  ::StorageEngineInstance::QueryResult_Column_ColType col_type() const;
  void set_col_type(::StorageEngineInstance::QueryResult_Column_ColType value);
  private:
  ::StorageEngineInstance::QueryResult_Column_ColType _internal_col_type() const;
  void _internal_set_col_type(::StorageEngineInstance::QueryResult_Column_ColType value);
  public:

  // @@protoc_insertion_point(class_scope:StorageEngineInstance.QueryResult.Column)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> string_col_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > int_col_;
  mutable std::atomic<int> _int_col_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > double_col_;
  int col_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_storage_5fengine_5finstance_2eproto;
};
// -------------------------------------------------------------------

class QueryResult_QueryResultEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<QueryResult_QueryResultEntry_DoNotUse, 
    std::string, ::StorageEngineInstance::QueryResult_Column,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<QueryResult_QueryResultEntry_DoNotUse, 
    std::string, ::StorageEngineInstance::QueryResult_Column,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  QueryResult_QueryResultEntry_DoNotUse();
  explicit constexpr QueryResult_QueryResultEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit QueryResult_QueryResultEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const QueryResult_QueryResultEntry_DoNotUse& other);
  static const QueryResult_QueryResultEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const QueryResult_QueryResultEntry_DoNotUse*>(&_QueryResult_QueryResultEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "StorageEngineInstance.QueryResult.QueryResultEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class QueryResult final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:StorageEngineInstance.QueryResult) */ {
 public:
  inline QueryResult() : QueryResult(nullptr) {}
  ~QueryResult() override;
  explicit constexpr QueryResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryResult(const QueryResult& from);
  QueryResult(QueryResult&& from) noexcept
    : QueryResult() {
    *this = ::std::move(from);
  }

  inline QueryResult& operator=(const QueryResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryResult& operator=(QueryResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryResult* internal_default_instance() {
    return reinterpret_cast<const QueryResult*>(
               &_QueryResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(QueryResult& a, QueryResult& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryResult* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryResult>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryResult& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const QueryResult& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryResult* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "StorageEngineInstance.QueryResult";
  }
  protected:
  explicit QueryResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef QueryResult_Column Column;

  // accessors -------------------------------------------------------

  enum : int {
    kQueryResultFieldNumber = 1,
    kRowCountFieldNumber = 2,
    kScannedRowCountFieldNumber = 3,
    kFilteredRowCountFieldNumber = 4,
  };
  // map<string, .StorageEngineInstance.QueryResult.Column> query_result = 1;
  int query_result_size() const;
  private:
  int _internal_query_result_size() const;
  public:
  void clear_query_result();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::StorageEngineInstance::QueryResult_Column >&
      _internal_query_result() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::StorageEngineInstance::QueryResult_Column >*
      _internal_mutable_query_result();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::StorageEngineInstance::QueryResult_Column >&
      query_result() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::StorageEngineInstance::QueryResult_Column >*
      mutable_query_result();

  // int32 row_count = 2;
  void clear_row_count();
  int32_t row_count() const;
  void set_row_count(int32_t value);
  private:
  int32_t _internal_row_count() const;
  void _internal_set_row_count(int32_t value);
  public:

  // int32 scanned_row_count = 3;
  void clear_scanned_row_count();
  int32_t scanned_row_count() const;
  void set_scanned_row_count(int32_t value);
  private:
  int32_t _internal_scanned_row_count() const;
  void _internal_set_scanned_row_count(int32_t value);
  public:

  // int32 filtered_row_count = 4;
  void clear_filtered_row_count();
  int32_t filtered_row_count() const;
  void set_filtered_row_count(int32_t value);
  private:
  int32_t _internal_filtered_row_count() const;
  void _internal_set_filtered_row_count(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:StorageEngineInstance.QueryResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      QueryResult_QueryResultEntry_DoNotUse,
      std::string, ::StorageEngineInstance::QueryResult_Column,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> query_result_;
  int32_t row_count_;
  int32_t scanned_row_count_;
  int32_t filtered_row_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_storage_5fengine_5finstance_2eproto;
};
// -------------------------------------------------------------------

class QueryStringResult final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:StorageEngineInstance.QueryStringResult) */ {
 public:
  inline QueryStringResult() : QueryStringResult(nullptr) {}
  ~QueryStringResult() override;
  explicit constexpr QueryStringResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryStringResult(const QueryStringResult& from);
  QueryStringResult(QueryStringResult&& from) noexcept
    : QueryStringResult() {
    *this = ::std::move(from);
  }

  inline QueryStringResult& operator=(const QueryStringResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryStringResult& operator=(QueryStringResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryStringResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryStringResult* internal_default_instance() {
    return reinterpret_cast<const QueryStringResult*>(
               &_QueryStringResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(QueryStringResult& a, QueryStringResult& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryStringResult* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryStringResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryStringResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryStringResult>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryStringResult& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const QueryStringResult& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryStringResult* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "StorageEngineInstance.QueryStringResult";
  }
  protected:
  explicit QueryStringResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQueryResultFieldNumber = 1,
    kScannedRowCountFieldNumber = 2,
    kFilteredRowCountFieldNumber = 3,
  };
  // string query_result = 1;
  void clear_query_result();
  const std::string& query_result() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_query_result(ArgT0&& arg0, ArgT... args);
  std::string* mutable_query_result();
  PROTOBUF_NODISCARD std::string* release_query_result();
  void set_allocated_query_result(std::string* query_result);
  private:
  const std::string& _internal_query_result() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_query_result(const std::string& value);
  std::string* _internal_mutable_query_result();
  public:

  // int32 scanned_row_count = 2;
  void clear_scanned_row_count();
  int32_t scanned_row_count() const;
  void set_scanned_row_count(int32_t value);
  private:
  int32_t _internal_scanned_row_count() const;
  void _internal_set_scanned_row_count(int32_t value);
  public:

  // int32 filtered_row_count = 3;
  void clear_filtered_row_count();
  int32_t filtered_row_count() const;
  void set_filtered_row_count(int32_t value);
  private:
  int32_t _internal_filtered_row_count() const;
  void _internal_set_filtered_row_count(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:StorageEngineInstance.QueryStringResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr query_result_;
  int32_t scanned_row_count_;
  int32_t filtered_row_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_storage_5fengine_5finstance_2eproto;
};
// -------------------------------------------------------------------

class MetaDataRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:StorageEngineInstance.MetaDataRequest) */ {
 public:
  inline MetaDataRequest() : MetaDataRequest(nullptr) {}
  ~MetaDataRequest() override;
  explicit constexpr MetaDataRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MetaDataRequest(const MetaDataRequest& from);
  MetaDataRequest(MetaDataRequest&& from) noexcept
    : MetaDataRequest() {
    *this = ::std::move(from);
  }

  inline MetaDataRequest& operator=(const MetaDataRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MetaDataRequest& operator=(MetaDataRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MetaDataRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const MetaDataRequest* internal_default_instance() {
    return reinterpret_cast<const MetaDataRequest*>(
               &_MetaDataRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(MetaDataRequest& a, MetaDataRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(MetaDataRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MetaDataRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MetaDataRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MetaDataRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MetaDataRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MetaDataRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MetaDataRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "StorageEngineInstance.MetaDataRequest";
  }
  protected:
  explicit MetaDataRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDbNameFieldNumber = 1,
    kTableNameFieldNumber = 2,
    kScanInfoFieldNumber = 3,
  };
  // string db_name = 1;
  void clear_db_name();
  const std::string& db_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_db_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_db_name();
  PROTOBUF_NODISCARD std::string* release_db_name();
  void set_allocated_db_name(std::string* db_name);
  private:
  const std::string& _internal_db_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_db_name(const std::string& value);
  std::string* _internal_mutable_db_name();
  public:

  // string table_name = 2;
  void clear_table_name();
  const std::string& table_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_table_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_table_name();
  PROTOBUF_NODISCARD std::string* release_table_name();
  void set_allocated_table_name(std::string* table_name);
  private:
  const std::string& _internal_table_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_table_name(const std::string& value);
  std::string* _internal_mutable_table_name();
  public:

  // .StorageEngineInstance.ScanInfo scan_info = 3;
  bool has_scan_info() const;
  private:
  bool _internal_has_scan_info() const;
  public:
  void clear_scan_info();
  const ::StorageEngineInstance::ScanInfo& scan_info() const;
  PROTOBUF_NODISCARD ::StorageEngineInstance::ScanInfo* release_scan_info();
  ::StorageEngineInstance::ScanInfo* mutable_scan_info();
  void set_allocated_scan_info(::StorageEngineInstance::ScanInfo* scan_info);
  private:
  const ::StorageEngineInstance::ScanInfo& _internal_scan_info() const;
  ::StorageEngineInstance::ScanInfo* _internal_mutable_scan_info();
  public:
  void unsafe_arena_set_allocated_scan_info(
      ::StorageEngineInstance::ScanInfo* scan_info);
  ::StorageEngineInstance::ScanInfo* unsafe_arena_release_scan_info();

  // @@protoc_insertion_point(class_scope:StorageEngineInstance.MetaDataRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr db_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr table_name_;
  ::StorageEngineInstance::ScanInfo* scan_info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_storage_5fengine_5finstance_2eproto;
};
// -------------------------------------------------------------------

class SnippetMetaData_PBAInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:StorageEngineInstance.SnippetMetaData.PBAInfo) */ {
 public:
  inline SnippetMetaData_PBAInfo() : SnippetMetaData_PBAInfo(nullptr) {}
  ~SnippetMetaData_PBAInfo() override;
  explicit constexpr SnippetMetaData_PBAInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SnippetMetaData_PBAInfo(const SnippetMetaData_PBAInfo& from);
  SnippetMetaData_PBAInfo(SnippetMetaData_PBAInfo&& from) noexcept
    : SnippetMetaData_PBAInfo() {
    *this = ::std::move(from);
  }

  inline SnippetMetaData_PBAInfo& operator=(const SnippetMetaData_PBAInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SnippetMetaData_PBAInfo& operator=(SnippetMetaData_PBAInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SnippetMetaData_PBAInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const SnippetMetaData_PBAInfo* internal_default_instance() {
    return reinterpret_cast<const SnippetMetaData_PBAInfo*>(
               &_SnippetMetaData_PBAInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(SnippetMetaData_PBAInfo& a, SnippetMetaData_PBAInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(SnippetMetaData_PBAInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SnippetMetaData_PBAInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SnippetMetaData_PBAInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SnippetMetaData_PBAInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SnippetMetaData_PBAInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SnippetMetaData_PBAInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SnippetMetaData_PBAInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "StorageEngineInstance.SnippetMetaData.PBAInfo";
  }
  protected:
  explicit SnippetMetaData_PBAInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPbaStringFieldNumber = 1,
    kBlockCountFieldNumber = 2,
  };
  // string pba_string = 1;
  void clear_pba_string();
  const std::string& pba_string() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pba_string(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pba_string();
  PROTOBUF_NODISCARD std::string* release_pba_string();
  void set_allocated_pba_string(std::string* pba_string);
  private:
  const std::string& _internal_pba_string() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pba_string(const std::string& value);
  std::string* _internal_mutable_pba_string();
  public:

  // int32 block_count = 2;
  void clear_block_count();
  int32_t block_count() const;
  void set_block_count(int32_t value);
  private:
  int32_t _internal_block_count() const;
  void _internal_set_block_count(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:StorageEngineInstance.SnippetMetaData.PBAInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pba_string_;
  int32_t block_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_storage_5fengine_5finstance_2eproto;
};
// -------------------------------------------------------------------

class SnippetMetaData_SstPbaMapEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<SnippetMetaData_SstPbaMapEntry_DoNotUse, 
    std::string, ::StorageEngineInstance::SnippetMetaData_PBAInfo,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<SnippetMetaData_SstPbaMapEntry_DoNotUse, 
    std::string, ::StorageEngineInstance::SnippetMetaData_PBAInfo,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  SnippetMetaData_SstPbaMapEntry_DoNotUse();
  explicit constexpr SnippetMetaData_SstPbaMapEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit SnippetMetaData_SstPbaMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const SnippetMetaData_SstPbaMapEntry_DoNotUse& other);
  static const SnippetMetaData_SstPbaMapEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const SnippetMetaData_SstPbaMapEntry_DoNotUse*>(&_SnippetMetaData_SstPbaMapEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "StorageEngineInstance.SnippetMetaData.SstPbaMapEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class SnippetMetaData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:StorageEngineInstance.SnippetMetaData) */ {
 public:
  inline SnippetMetaData() : SnippetMetaData(nullptr) {}
  ~SnippetMetaData() override;
  explicit constexpr SnippetMetaData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SnippetMetaData(const SnippetMetaData& from);
  SnippetMetaData(SnippetMetaData&& from) noexcept
    : SnippetMetaData() {
    *this = ::std::move(from);
  }

  inline SnippetMetaData& operator=(const SnippetMetaData& from) {
    CopyFrom(from);
    return *this;
  }
  inline SnippetMetaData& operator=(SnippetMetaData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SnippetMetaData& default_instance() {
    return *internal_default_instance();
  }
  static inline const SnippetMetaData* internal_default_instance() {
    return reinterpret_cast<const SnippetMetaData*>(
               &_SnippetMetaData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(SnippetMetaData& a, SnippetMetaData& b) {
    a.Swap(&b);
  }
  inline void Swap(SnippetMetaData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SnippetMetaData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SnippetMetaData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SnippetMetaData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SnippetMetaData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SnippetMetaData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SnippetMetaData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "StorageEngineInstance.SnippetMetaData";
  }
  protected:
  explicit SnippetMetaData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SnippetMetaData_PBAInfo PBAInfo;

  // accessors -------------------------------------------------------

  enum : int {
    kSstPbaMapFieldNumber = 1,
    kWalInsertedRowJsonFieldNumber = 4,
    kWalDeletedKeyJsonFieldNumber = 3,
    kTableTotalBlockCountFieldNumber = 2,
  };
  // map<string, .StorageEngineInstance.SnippetMetaData.PBAInfo> sst_pba_map = 1;
  int sst_pba_map_size() const;
  private:
  int _internal_sst_pba_map_size() const;
  public:
  void clear_sst_pba_map();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::StorageEngineInstance::SnippetMetaData_PBAInfo >&
      _internal_sst_pba_map() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::StorageEngineInstance::SnippetMetaData_PBAInfo >*
      _internal_mutable_sst_pba_map();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::StorageEngineInstance::SnippetMetaData_PBAInfo >&
      sst_pba_map() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::StorageEngineInstance::SnippetMetaData_PBAInfo >*
      mutable_sst_pba_map();

  // repeated string wal_inserted_row_json = 4;
  int wal_inserted_row_json_size() const;
  private:
  int _internal_wal_inserted_row_json_size() const;
  public:
  void clear_wal_inserted_row_json();
  const std::string& wal_inserted_row_json(int index) const;
  std::string* mutable_wal_inserted_row_json(int index);
  void set_wal_inserted_row_json(int index, const std::string& value);
  void set_wal_inserted_row_json(int index, std::string&& value);
  void set_wal_inserted_row_json(int index, const char* value);
  void set_wal_inserted_row_json(int index, const char* value, size_t size);
  std::string* add_wal_inserted_row_json();
  void add_wal_inserted_row_json(const std::string& value);
  void add_wal_inserted_row_json(std::string&& value);
  void add_wal_inserted_row_json(const char* value);
  void add_wal_inserted_row_json(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& wal_inserted_row_json() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_wal_inserted_row_json();
  private:
  const std::string& _internal_wal_inserted_row_json(int index) const;
  std::string* _internal_add_wal_inserted_row_json();
  public:

  // string wal_deleted_key_json = 3;
  void clear_wal_deleted_key_json();
  const std::string& wal_deleted_key_json() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_wal_deleted_key_json(ArgT0&& arg0, ArgT... args);
  std::string* mutable_wal_deleted_key_json();
  PROTOBUF_NODISCARD std::string* release_wal_deleted_key_json();
  void set_allocated_wal_deleted_key_json(std::string* wal_deleted_key_json);
  private:
  const std::string& _internal_wal_deleted_key_json() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_wal_deleted_key_json(const std::string& value);
  std::string* _internal_mutable_wal_deleted_key_json();
  public:

  // int32 table_total_block_count = 2;
  void clear_table_total_block_count();
  int32_t table_total_block_count() const;
  void set_table_total_block_count(int32_t value);
  private:
  int32_t _internal_table_total_block_count() const;
  void _internal_set_table_total_block_count(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:StorageEngineInstance.SnippetMetaData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      SnippetMetaData_SstPbaMapEntry_DoNotUse,
      std::string, ::StorageEngineInstance::SnippetMetaData_PBAInfo,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> sst_pba_map_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> wal_inserted_row_json_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr wal_deleted_key_json_;
  int32_t table_total_block_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_storage_5fengine_5finstance_2eproto;
};
// -------------------------------------------------------------------

class CSDMetricList_CSDMetric final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:StorageEngineInstance.CSDMetricList.CSDMetric) */ {
 public:
  inline CSDMetricList_CSDMetric() : CSDMetricList_CSDMetric(nullptr) {}
  ~CSDMetricList_CSDMetric() override;
  explicit constexpr CSDMetricList_CSDMetric(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSDMetricList_CSDMetric(const CSDMetricList_CSDMetric& from);
  CSDMetricList_CSDMetric(CSDMetricList_CSDMetric&& from) noexcept
    : CSDMetricList_CSDMetric() {
    *this = ::std::move(from);
  }

  inline CSDMetricList_CSDMetric& operator=(const CSDMetricList_CSDMetric& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSDMetricList_CSDMetric& operator=(CSDMetricList_CSDMetric&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSDMetricList_CSDMetric& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSDMetricList_CSDMetric* internal_default_instance() {
    return reinterpret_cast<const CSDMetricList_CSDMetric*>(
               &_CSDMetricList_CSDMetric_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(CSDMetricList_CSDMetric& a, CSDMetricList_CSDMetric& b) {
    a.Swap(&b);
  }
  inline void Swap(CSDMetricList_CSDMetric* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSDMetricList_CSDMetric* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSDMetricList_CSDMetric* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSDMetricList_CSDMetric>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSDMetricList_CSDMetric& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CSDMetricList_CSDMetric& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSDMetricList_CSDMetric* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "StorageEngineInstance.CSDMetricList.CSDMetric";
  }
  protected:
  explicit CSDMetricList_CSDMetric(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kIpFieldNumber = 2,
    kCpuUsageFieldNumber = 3,
    kMemoryUsageFieldNumber = 4,
    kDiskUsageFieldNumber = 5,
    kNetworkFieldNumber = 6,
    kWorkingBlockCountFieldNumber = 7,
    kScoreFieldNumber = 8,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string ip = 2;
  void clear_ip();
  const std::string& ip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ip();
  PROTOBUF_NODISCARD std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  private:
  const std::string& _internal_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // float cpu_usage = 3;
  void clear_cpu_usage();
  float cpu_usage() const;
  void set_cpu_usage(float value);
  private:
  float _internal_cpu_usage() const;
  void _internal_set_cpu_usage(float value);
  public:

  // float memory_usage = 4;
  void clear_memory_usage();
  float memory_usage() const;
  void set_memory_usage(float value);
  private:
  float _internal_memory_usage() const;
  void _internal_set_memory_usage(float value);
  public:

  // float disk_usage = 5;
  void clear_disk_usage();
  float disk_usage() const;
  void set_disk_usage(float value);
  private:
  float _internal_disk_usage() const;
  void _internal_set_disk_usage(float value);
  public:

  // float network = 6;
  void clear_network();
  float network() const;
  void set_network(float value);
  private:
  float _internal_network() const;
  void _internal_set_network(float value);
  public:

  // int32 working_block_count = 7;
  void clear_working_block_count();
  int32_t working_block_count() const;
  void set_working_block_count(int32_t value);
  private:
  int32_t _internal_working_block_count() const;
  void _internal_set_working_block_count(int32_t value);
  public:

  // float score = 8;
  void clear_score();
  float score() const;
  void set_score(float value);
  private:
  float _internal_score() const;
  void _internal_set_score(float value);
  public:

  // @@protoc_insertion_point(class_scope:StorageEngineInstance.CSDMetricList.CSDMetric)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  float cpu_usage_;
  float memory_usage_;
  float disk_usage_;
  float network_;
  int32_t working_block_count_;
  float score_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_storage_5fengine_5finstance_2eproto;
};
// -------------------------------------------------------------------

class CSDMetricList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:StorageEngineInstance.CSDMetricList) */ {
 public:
  inline CSDMetricList() : CSDMetricList(nullptr) {}
  ~CSDMetricList() override;
  explicit constexpr CSDMetricList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSDMetricList(const CSDMetricList& from);
  CSDMetricList(CSDMetricList&& from) noexcept
    : CSDMetricList() {
    *this = ::std::move(from);
  }

  inline CSDMetricList& operator=(const CSDMetricList& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSDMetricList& operator=(CSDMetricList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSDMetricList& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSDMetricList* internal_default_instance() {
    return reinterpret_cast<const CSDMetricList*>(
               &_CSDMetricList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(CSDMetricList& a, CSDMetricList& b) {
    a.Swap(&b);
  }
  inline void Swap(CSDMetricList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSDMetricList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSDMetricList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSDMetricList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSDMetricList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CSDMetricList& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSDMetricList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "StorageEngineInstance.CSDMetricList";
  }
  protected:
  explicit CSDMetricList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CSDMetricList_CSDMetric CSDMetric;

  // accessors -------------------------------------------------------

  enum : int {
    kCsdMetricListFieldNumber = 1,
  };
  // repeated .StorageEngineInstance.CSDMetricList.CSDMetric csd_metric_list = 1;
  int csd_metric_list_size() const;
  private:
  int _internal_csd_metric_list_size() const;
  public:
  void clear_csd_metric_list();
  ::StorageEngineInstance::CSDMetricList_CSDMetric* mutable_csd_metric_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::StorageEngineInstance::CSDMetricList_CSDMetric >*
      mutable_csd_metric_list();
  private:
  const ::StorageEngineInstance::CSDMetricList_CSDMetric& _internal_csd_metric_list(int index) const;
  ::StorageEngineInstance::CSDMetricList_CSDMetric* _internal_add_csd_metric_list();
  public:
  const ::StorageEngineInstance::CSDMetricList_CSDMetric& csd_metric_list(int index) const;
  ::StorageEngineInstance::CSDMetricList_CSDMetric* add_csd_metric_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::StorageEngineInstance::CSDMetricList_CSDMetric >&
      csd_metric_list() const;

  // @@protoc_insertion_point(class_scope:StorageEngineInstance.CSDMetricList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::StorageEngineInstance::CSDMetricList_CSDMetric > csd_metric_list_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_storage_5fengine_5finstance_2eproto;
};
// -------------------------------------------------------------------

class Chunk final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:StorageEngineInstance.Chunk) */ {
 public:
  inline Chunk() : Chunk(nullptr) {}
  ~Chunk() override;
  explicit constexpr Chunk(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Chunk(const Chunk& from);
  Chunk(Chunk&& from) noexcept
    : Chunk() {
    *this = ::std::move(from);
  }

  inline Chunk& operator=(const Chunk& from) {
    CopyFrom(from);
    return *this;
  }
  inline Chunk& operator=(Chunk&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Chunk& default_instance() {
    return *internal_default_instance();
  }
  static inline const Chunk* internal_default_instance() {
    return reinterpret_cast<const Chunk*>(
               &_Chunk_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(Chunk& a, Chunk& b) {
    a.Swap(&b);
  }
  inline void Swap(Chunk* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Chunk* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Chunk* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Chunk>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Chunk& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Chunk& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Chunk* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "StorageEngineInstance.Chunk";
  }
  protected:
  explicit Chunk(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOffsetFieldNumber = 1,
    kLengthFieldNumber = 2,
  };
  // int64 offset = 1;
  void clear_offset();
  int64_t offset() const;
  void set_offset(int64_t value);
  private:
  int64_t _internal_offset() const;
  void _internal_set_offset(int64_t value);
  public:

  // int32 length = 2;
  void clear_length();
  int32_t length() const;
  void set_length(int32_t value);
  private:
  int32_t _internal_length() const;
  void _internal_set_length(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:StorageEngineInstance.Chunk)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int64_t offset_;
  int32_t length_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_storage_5fengine_5finstance_2eproto;
};
// -------------------------------------------------------------------

class Chunks final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:StorageEngineInstance.Chunks) */ {
 public:
  inline Chunks() : Chunks(nullptr) {}
  ~Chunks() override;
  explicit constexpr Chunks(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Chunks(const Chunks& from);
  Chunks(Chunks&& from) noexcept
    : Chunks() {
    *this = ::std::move(from);
  }

  inline Chunks& operator=(const Chunks& from) {
    CopyFrom(from);
    return *this;
  }
  inline Chunks& operator=(Chunks&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Chunks& default_instance() {
    return *internal_default_instance();
  }
  static inline const Chunks* internal_default_instance() {
    return reinterpret_cast<const Chunks*>(
               &_Chunks_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(Chunks& a, Chunks& b) {
    a.Swap(&b);
  }
  inline void Swap(Chunks* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Chunks* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Chunks* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Chunks>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Chunks& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Chunks& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Chunks* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "StorageEngineInstance.Chunks";
  }
  protected:
  explicit Chunks(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChunksFieldNumber = 1,
  };
  // repeated .StorageEngineInstance.Chunk chunks = 1;
  int chunks_size() const;
  private:
  int _internal_chunks_size() const;
  public:
  void clear_chunks();
  ::StorageEngineInstance::Chunk* mutable_chunks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::StorageEngineInstance::Chunk >*
      mutable_chunks();
  private:
  const ::StorageEngineInstance::Chunk& _internal_chunks(int index) const;
  ::StorageEngineInstance::Chunk* _internal_add_chunks();
  public:
  const ::StorageEngineInstance::Chunk& chunks(int index) const;
  ::StorageEngineInstance::Chunk* add_chunks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::StorageEngineInstance::Chunk >&
      chunks() const;

  // @@protoc_insertion_point(class_scope:StorageEngineInstance.Chunks)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::StorageEngineInstance::Chunk > chunks_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_storage_5fengine_5finstance_2eproto;
};
// -------------------------------------------------------------------

class TableBlock_TableBlockChunksEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<TableBlock_TableBlockChunksEntry_DoNotUse, 
    int32_t, ::StorageEngineInstance::Chunks,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<TableBlock_TableBlockChunksEntry_DoNotUse, 
    int32_t, ::StorageEngineInstance::Chunks,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  TableBlock_TableBlockChunksEntry_DoNotUse();
  explicit constexpr TableBlock_TableBlockChunksEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit TableBlock_TableBlockChunksEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const TableBlock_TableBlockChunksEntry_DoNotUse& other);
  static const TableBlock_TableBlockChunksEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const TableBlock_TableBlockChunksEntry_DoNotUse*>(&_TableBlock_TableBlockChunksEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class TableBlock final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:StorageEngineInstance.TableBlock) */ {
 public:
  inline TableBlock() : TableBlock(nullptr) {}
  ~TableBlock() override;
  explicit constexpr TableBlock(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TableBlock(const TableBlock& from);
  TableBlock(TableBlock&& from) noexcept
    : TableBlock() {
    *this = ::std::move(from);
  }

  inline TableBlock& operator=(const TableBlock& from) {
    CopyFrom(from);
    return *this;
  }
  inline TableBlock& operator=(TableBlock&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TableBlock& default_instance() {
    return *internal_default_instance();
  }
  static inline const TableBlock* internal_default_instance() {
    return reinterpret_cast<const TableBlock*>(
               &_TableBlock_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(TableBlock& a, TableBlock& b) {
    a.Swap(&b);
  }
  inline void Swap(TableBlock* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TableBlock* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TableBlock* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TableBlock>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TableBlock& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TableBlock& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TableBlock* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "StorageEngineInstance.TableBlock";
  }
  protected:
  explicit TableBlock(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kTableBlockChunksFieldNumber = 1,
  };
  // map<int32, .StorageEngineInstance.Chunks> table_block_chunks = 1;
  int table_block_chunks_size() const;
  private:
  int _internal_table_block_chunks_size() const;
  public:
  void clear_table_block_chunks();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::StorageEngineInstance::Chunks >&
      _internal_table_block_chunks() const;
  ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::StorageEngineInstance::Chunks >*
      _internal_mutable_table_block_chunks();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::StorageEngineInstance::Chunks >&
      table_block_chunks() const;
  ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::StorageEngineInstance::Chunks >*
      mutable_table_block_chunks();

  // @@protoc_insertion_point(class_scope:StorageEngineInstance.TableBlock)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      TableBlock_TableBlockChunksEntry_DoNotUse,
      int32_t, ::StorageEngineInstance::Chunks,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> table_block_chunks_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_storage_5fengine_5finstance_2eproto;
};
// -------------------------------------------------------------------

class LBARequest_SST final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:StorageEngineInstance.LBARequest.SST) */ {
 public:
  inline LBARequest_SST() : LBARequest_SST(nullptr) {}
  ~LBARequest_SST() override;
  explicit constexpr LBARequest_SST(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LBARequest_SST(const LBARequest_SST& from);
  LBARequest_SST(LBARequest_SST&& from) noexcept
    : LBARequest_SST() {
    *this = ::std::move(from);
  }

  inline LBARequest_SST& operator=(const LBARequest_SST& from) {
    CopyFrom(from);
    return *this;
  }
  inline LBARequest_SST& operator=(LBARequest_SST&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LBARequest_SST& default_instance() {
    return *internal_default_instance();
  }
  static inline const LBARequest_SST* internal_default_instance() {
    return reinterpret_cast<const LBARequest_SST*>(
               &_LBARequest_SST_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(LBARequest_SST& a, LBARequest_SST& b) {
    a.Swap(&b);
  }
  inline void Swap(LBARequest_SST* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LBARequest_SST* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LBARequest_SST* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LBARequest_SST>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LBARequest_SST& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LBARequest_SST& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LBARequest_SST* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "StorageEngineInstance.LBARequest.SST";
  }
  protected:
  explicit LBARequest_SST(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCsdListFieldNumber = 1,
    kTableLbaBlockFieldNumber = 2,
  };
  // repeated string csd_list = 1;
  int csd_list_size() const;
  private:
  int _internal_csd_list_size() const;
  public:
  void clear_csd_list();
  const std::string& csd_list(int index) const;
  std::string* mutable_csd_list(int index);
  void set_csd_list(int index, const std::string& value);
  void set_csd_list(int index, std::string&& value);
  void set_csd_list(int index, const char* value);
  void set_csd_list(int index, const char* value, size_t size);
  std::string* add_csd_list();
  void add_csd_list(const std::string& value);
  void add_csd_list(std::string&& value);
  void add_csd_list(const char* value);
  void add_csd_list(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& csd_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_csd_list();
  private:
  const std::string& _internal_csd_list(int index) const;
  std::string* _internal_add_csd_list();
  public:

  // .StorageEngineInstance.TableBlock table_lba_block = 2;
  bool has_table_lba_block() const;
  private:
  bool _internal_has_table_lba_block() const;
  public:
  void clear_table_lba_block();
  const ::StorageEngineInstance::TableBlock& table_lba_block() const;
  PROTOBUF_NODISCARD ::StorageEngineInstance::TableBlock* release_table_lba_block();
  ::StorageEngineInstance::TableBlock* mutable_table_lba_block();
  void set_allocated_table_lba_block(::StorageEngineInstance::TableBlock* table_lba_block);
  private:
  const ::StorageEngineInstance::TableBlock& _internal_table_lba_block() const;
  ::StorageEngineInstance::TableBlock* _internal_mutable_table_lba_block();
  public:
  void unsafe_arena_set_allocated_table_lba_block(
      ::StorageEngineInstance::TableBlock* table_lba_block);
  ::StorageEngineInstance::TableBlock* unsafe_arena_release_table_lba_block();

  // @@protoc_insertion_point(class_scope:StorageEngineInstance.LBARequest.SST)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> csd_list_;
  ::StorageEngineInstance::TableBlock* table_lba_block_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_storage_5fengine_5finstance_2eproto;
};
// -------------------------------------------------------------------

class LBARequest_SstListEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<LBARequest_SstListEntry_DoNotUse, 
    std::string, ::StorageEngineInstance::LBARequest_SST,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<LBARequest_SstListEntry_DoNotUse, 
    std::string, ::StorageEngineInstance::LBARequest_SST,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  LBARequest_SstListEntry_DoNotUse();
  explicit constexpr LBARequest_SstListEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit LBARequest_SstListEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const LBARequest_SstListEntry_DoNotUse& other);
  static const LBARequest_SstListEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const LBARequest_SstListEntry_DoNotUse*>(&_LBARequest_SstListEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "StorageEngineInstance.LBARequest.SstListEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class LBARequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:StorageEngineInstance.LBARequest) */ {
 public:
  inline LBARequest() : LBARequest(nullptr) {}
  ~LBARequest() override;
  explicit constexpr LBARequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LBARequest(const LBARequest& from);
  LBARequest(LBARequest&& from) noexcept
    : LBARequest() {
    *this = ::std::move(from);
  }

  inline LBARequest& operator=(const LBARequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LBARequest& operator=(LBARequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LBARequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const LBARequest* internal_default_instance() {
    return reinterpret_cast<const LBARequest*>(
               &_LBARequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(LBARequest& a, LBARequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LBARequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LBARequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LBARequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LBARequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LBARequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LBARequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LBARequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "StorageEngineInstance.LBARequest";
  }
  protected:
  explicit LBARequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef LBARequest_SST SST;

  // accessors -------------------------------------------------------

  enum : int {
    kSstListFieldNumber = 1,
  };
  // map<string, .StorageEngineInstance.LBARequest.SST> sst_list = 1;
  int sst_list_size() const;
  private:
  int _internal_sst_list_size() const;
  public:
  void clear_sst_list();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::StorageEngineInstance::LBARequest_SST >&
      _internal_sst_list() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::StorageEngineInstance::LBARequest_SST >*
      _internal_mutable_sst_list();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::StorageEngineInstance::LBARequest_SST >&
      sst_list() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::StorageEngineInstance::LBARequest_SST >*
      mutable_sst_list();

  // @@protoc_insertion_point(class_scope:StorageEngineInstance.LBARequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      LBARequest_SstListEntry_DoNotUse,
      std::string, ::StorageEngineInstance::LBARequest_SST,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> sst_list_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_storage_5fengine_5finstance_2eproto;
};
// -------------------------------------------------------------------

class PBAResponse_SST_TablePbaBlockEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<PBAResponse_SST_TablePbaBlockEntry_DoNotUse, 
    std::string, ::StorageEngineInstance::TableBlock,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<PBAResponse_SST_TablePbaBlockEntry_DoNotUse, 
    std::string, ::StorageEngineInstance::TableBlock,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  PBAResponse_SST_TablePbaBlockEntry_DoNotUse();
  explicit constexpr PBAResponse_SST_TablePbaBlockEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit PBAResponse_SST_TablePbaBlockEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const PBAResponse_SST_TablePbaBlockEntry_DoNotUse& other);
  static const PBAResponse_SST_TablePbaBlockEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const PBAResponse_SST_TablePbaBlockEntry_DoNotUse*>(&_PBAResponse_SST_TablePbaBlockEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "StorageEngineInstance.PBAResponse.SST.TablePbaBlockEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class PBAResponse_SST final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:StorageEngineInstance.PBAResponse.SST) */ {
 public:
  inline PBAResponse_SST() : PBAResponse_SST(nullptr) {}
  ~PBAResponse_SST() override;
  explicit constexpr PBAResponse_SST(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PBAResponse_SST(const PBAResponse_SST& from);
  PBAResponse_SST(PBAResponse_SST&& from) noexcept
    : PBAResponse_SST() {
    *this = ::std::move(from);
  }

  inline PBAResponse_SST& operator=(const PBAResponse_SST& from) {
    CopyFrom(from);
    return *this;
  }
  inline PBAResponse_SST& operator=(PBAResponse_SST&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PBAResponse_SST& default_instance() {
    return *internal_default_instance();
  }
  static inline const PBAResponse_SST* internal_default_instance() {
    return reinterpret_cast<const PBAResponse_SST*>(
               &_PBAResponse_SST_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(PBAResponse_SST& a, PBAResponse_SST& b) {
    a.Swap(&b);
  }
  inline void Swap(PBAResponse_SST* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PBAResponse_SST* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PBAResponse_SST* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PBAResponse_SST>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PBAResponse_SST& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PBAResponse_SST& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PBAResponse_SST* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "StorageEngineInstance.PBAResponse.SST";
  }
  protected:
  explicit PBAResponse_SST(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kTablePbaBlockFieldNumber = 1,
  };
  // map<string, .StorageEngineInstance.TableBlock> table_pba_block = 1;
  int table_pba_block_size() const;
  private:
  int _internal_table_pba_block_size() const;
  public:
  void clear_table_pba_block();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::StorageEngineInstance::TableBlock >&
      _internal_table_pba_block() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::StorageEngineInstance::TableBlock >*
      _internal_mutable_table_pba_block();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::StorageEngineInstance::TableBlock >&
      table_pba_block() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::StorageEngineInstance::TableBlock >*
      mutable_table_pba_block();

  // @@protoc_insertion_point(class_scope:StorageEngineInstance.PBAResponse.SST)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      PBAResponse_SST_TablePbaBlockEntry_DoNotUse,
      std::string, ::StorageEngineInstance::TableBlock,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> table_pba_block_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_storage_5fengine_5finstance_2eproto;
};
// -------------------------------------------------------------------

class PBAResponse_SstListEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<PBAResponse_SstListEntry_DoNotUse, 
    std::string, ::StorageEngineInstance::PBAResponse_SST,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<PBAResponse_SstListEntry_DoNotUse, 
    std::string, ::StorageEngineInstance::PBAResponse_SST,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  PBAResponse_SstListEntry_DoNotUse();
  explicit constexpr PBAResponse_SstListEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit PBAResponse_SstListEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const PBAResponse_SstListEntry_DoNotUse& other);
  static const PBAResponse_SstListEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const PBAResponse_SstListEntry_DoNotUse*>(&_PBAResponse_SstListEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "StorageEngineInstance.PBAResponse.SstListEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class PBAResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:StorageEngineInstance.PBAResponse) */ {
 public:
  inline PBAResponse() : PBAResponse(nullptr) {}
  ~PBAResponse() override;
  explicit constexpr PBAResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PBAResponse(const PBAResponse& from);
  PBAResponse(PBAResponse&& from) noexcept
    : PBAResponse() {
    *this = ::std::move(from);
  }

  inline PBAResponse& operator=(const PBAResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PBAResponse& operator=(PBAResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PBAResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const PBAResponse* internal_default_instance() {
    return reinterpret_cast<const PBAResponse*>(
               &_PBAResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(PBAResponse& a, PBAResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PBAResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PBAResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PBAResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PBAResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PBAResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PBAResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PBAResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "StorageEngineInstance.PBAResponse";
  }
  protected:
  explicit PBAResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef PBAResponse_SST SST;

  // accessors -------------------------------------------------------

  enum : int {
    kSstListFieldNumber = 1,
  };
  // map<string, .StorageEngineInstance.PBAResponse.SST> sst_list = 1;
  int sst_list_size() const;
  private:
  int _internal_sst_list_size() const;
  public:
  void clear_sst_list();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::StorageEngineInstance::PBAResponse_SST >&
      _internal_sst_list() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::StorageEngineInstance::PBAResponse_SST >*
      _internal_mutable_sst_list();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::StorageEngineInstance::PBAResponse_SST >&
      sst_list() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::StorageEngineInstance::PBAResponse_SST >*
      mutable_sst_list();

  // @@protoc_insertion_point(class_scope:StorageEngineInstance.PBAResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      PBAResponse_SstListEntry_DoNotUse,
      std::string, ::StorageEngineInstance::PBAResponse_SST,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> sst_list_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_storage_5fengine_5finstance_2eproto;
};
// -------------------------------------------------------------------

class WALRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:StorageEngineInstance.WALRequest) */ {
 public:
  inline WALRequest() : WALRequest(nullptr) {}
  ~WALRequest() override;
  explicit constexpr WALRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WALRequest(const WALRequest& from);
  WALRequest(WALRequest&& from) noexcept
    : WALRequest() {
    *this = ::std::move(from);
  }

  inline WALRequest& operator=(const WALRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline WALRequest& operator=(WALRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WALRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const WALRequest* internal_default_instance() {
    return reinterpret_cast<const WALRequest*>(
               &_WALRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(WALRequest& a, WALRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(WALRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WALRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WALRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WALRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WALRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const WALRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WALRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "StorageEngineInstance.WALRequest";
  }
  protected:
  explicit WALRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDbNameFieldNumber = 1,
    kTableNameFieldNumber = 2,
  };
  // string db_name = 1;
  void clear_db_name();
  const std::string& db_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_db_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_db_name();
  PROTOBUF_NODISCARD std::string* release_db_name();
  void set_allocated_db_name(std::string* db_name);
  private:
  const std::string& _internal_db_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_db_name(const std::string& value);
  std::string* _internal_mutable_db_name();
  public:

  // string table_name = 2;
  void clear_table_name();
  const std::string& table_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_table_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_table_name();
  PROTOBUF_NODISCARD std::string* release_table_name();
  void set_allocated_table_name(std::string* table_name);
  private:
  const std::string& _internal_table_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_table_name(const std::string& value);
  std::string* _internal_mutable_table_name();
  public:

  // @@protoc_insertion_point(class_scope:StorageEngineInstance.WALRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr db_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr table_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_storage_5fengine_5finstance_2eproto;
};
// -------------------------------------------------------------------

class WALResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:StorageEngineInstance.WALResponse) */ {
 public:
  inline WALResponse() : WALResponse(nullptr) {}
  ~WALResponse() override;
  explicit constexpr WALResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WALResponse(const WALResponse& from);
  WALResponse(WALResponse&& from) noexcept
    : WALResponse() {
    *this = ::std::move(from);
  }

  inline WALResponse& operator=(const WALResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline WALResponse& operator=(WALResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WALResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const WALResponse* internal_default_instance() {
    return reinterpret_cast<const WALResponse*>(
               &_WALResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(WALResponse& a, WALResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(WALResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WALResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WALResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WALResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WALResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const WALResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WALResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "StorageEngineInstance.WALResponse";
  }
  protected:
  explicit WALResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeletedKeyFieldNumber = 1,
    kInsertedKeyFieldNumber = 2,
    kInsertedValueFieldNumber = 3,
  };
  // repeated string deleted_key = 1;
  int deleted_key_size() const;
  private:
  int _internal_deleted_key_size() const;
  public:
  void clear_deleted_key();
  const std::string& deleted_key(int index) const;
  std::string* mutable_deleted_key(int index);
  void set_deleted_key(int index, const std::string& value);
  void set_deleted_key(int index, std::string&& value);
  void set_deleted_key(int index, const char* value);
  void set_deleted_key(int index, const char* value, size_t size);
  std::string* add_deleted_key();
  void add_deleted_key(const std::string& value);
  void add_deleted_key(std::string&& value);
  void add_deleted_key(const char* value);
  void add_deleted_key(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& deleted_key() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_deleted_key();
  private:
  const std::string& _internal_deleted_key(int index) const;
  std::string* _internal_add_deleted_key();
  public:

  // repeated string inserted_key = 2;
  int inserted_key_size() const;
  private:
  int _internal_inserted_key_size() const;
  public:
  void clear_inserted_key();
  const std::string& inserted_key(int index) const;
  std::string* mutable_inserted_key(int index);
  void set_inserted_key(int index, const std::string& value);
  void set_inserted_key(int index, std::string&& value);
  void set_inserted_key(int index, const char* value);
  void set_inserted_key(int index, const char* value, size_t size);
  std::string* add_inserted_key();
  void add_inserted_key(const std::string& value);
  void add_inserted_key(std::string&& value);
  void add_inserted_key(const char* value);
  void add_inserted_key(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& inserted_key() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_inserted_key();
  private:
  const std::string& _internal_inserted_key(int index) const;
  std::string* _internal_add_inserted_key();
  public:

  // repeated string inserted_value = 3;
  int inserted_value_size() const;
  private:
  int _internal_inserted_value_size() const;
  public:
  void clear_inserted_value();
  const std::string& inserted_value(int index) const;
  std::string* mutable_inserted_value(int index);
  void set_inserted_value(int index, const std::string& value);
  void set_inserted_value(int index, std::string&& value);
  void set_inserted_value(int index, const char* value);
  void set_inserted_value(int index, const char* value, size_t size);
  std::string* add_inserted_value();
  void add_inserted_value(const std::string& value);
  void add_inserted_value(std::string&& value);
  void add_inserted_value(const char* value);
  void add_inserted_value(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& inserted_value() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_inserted_value();
  private:
  const std::string& _internal_inserted_value(int index) const;
  std::string* _internal_add_inserted_value();
  public:

  // @@protoc_insertion_point(class_scope:StorageEngineInstance.WALResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> deleted_key_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> inserted_key_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> inserted_value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_storage_5fengine_5finstance_2eproto;
};
// -------------------------------------------------------------------

class VolumeRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:StorageEngineInstance.VolumeRequest) */ {
 public:
  inline VolumeRequest() : VolumeRequest(nullptr) {}
  ~VolumeRequest() override;
  explicit constexpr VolumeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VolumeRequest(const VolumeRequest& from);
  VolumeRequest(VolumeRequest&& from) noexcept
    : VolumeRequest() {
    *this = ::std::move(from);
  }

  inline VolumeRequest& operator=(const VolumeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline VolumeRequest& operator=(VolumeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VolumeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const VolumeRequest* internal_default_instance() {
    return reinterpret_cast<const VolumeRequest*>(
               &_VolumeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(VolumeRequest& a, VolumeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(VolumeRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VolumeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VolumeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VolumeRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VolumeRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const VolumeRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VolumeRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "StorageEngineInstance.VolumeRequest";
  }
  protected:
  explicit VolumeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCapacityFieldNumber = 1,
    kUsingCsdFieldNumber = 2,
  };
  // float capacity = 1;
  void clear_capacity();
  float capacity() const;
  void set_capacity(float value);
  private:
  float _internal_capacity() const;
  void _internal_set_capacity(float value);
  public:

  // int32 using_csd = 2;
  void clear_using_csd();
  int32_t using_csd() const;
  void set_using_csd(int32_t value);
  private:
  int32_t _internal_using_csd() const;
  void _internal_set_using_csd(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:StorageEngineInstance.VolumeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float capacity_;
  int32_t using_csd_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_storage_5fengine_5finstance_2eproto;
};
// -------------------------------------------------------------------

class AllocatedVolumeInfo_Allocation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:StorageEngineInstance.AllocatedVolumeInfo.Allocation) */ {
 public:
  inline AllocatedVolumeInfo_Allocation() : AllocatedVolumeInfo_Allocation(nullptr) {}
  ~AllocatedVolumeInfo_Allocation() override;
  explicit constexpr AllocatedVolumeInfo_Allocation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AllocatedVolumeInfo_Allocation(const AllocatedVolumeInfo_Allocation& from);
  AllocatedVolumeInfo_Allocation(AllocatedVolumeInfo_Allocation&& from) noexcept
    : AllocatedVolumeInfo_Allocation() {
    *this = ::std::move(from);
  }

  inline AllocatedVolumeInfo_Allocation& operator=(const AllocatedVolumeInfo_Allocation& from) {
    CopyFrom(from);
    return *this;
  }
  inline AllocatedVolumeInfo_Allocation& operator=(AllocatedVolumeInfo_Allocation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AllocatedVolumeInfo_Allocation& default_instance() {
    return *internal_default_instance();
  }
  static inline const AllocatedVolumeInfo_Allocation* internal_default_instance() {
    return reinterpret_cast<const AllocatedVolumeInfo_Allocation*>(
               &_AllocatedVolumeInfo_Allocation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(AllocatedVolumeInfo_Allocation& a, AllocatedVolumeInfo_Allocation& b) {
    a.Swap(&b);
  }
  inline void Swap(AllocatedVolumeInfo_Allocation* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AllocatedVolumeInfo_Allocation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AllocatedVolumeInfo_Allocation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AllocatedVolumeInfo_Allocation>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AllocatedVolumeInfo_Allocation& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AllocatedVolumeInfo_Allocation& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AllocatedVolumeInfo_Allocation* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "StorageEngineInstance.AllocatedVolumeInfo.Allocation";
  }
  protected:
  explicit AllocatedVolumeInfo_Allocation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCsdIdFieldNumber = 1,
    kCapacityFieldNumber = 2,
    kPartitionNameFieldNumber = 3,
  };
  // string csd_id = 1;
  void clear_csd_id();
  const std::string& csd_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_csd_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_csd_id();
  PROTOBUF_NODISCARD std::string* release_csd_id();
  void set_allocated_csd_id(std::string* csd_id);
  private:
  const std::string& _internal_csd_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_csd_id(const std::string& value);
  std::string* _internal_mutable_csd_id();
  public:

  // string capacity = 2;
  void clear_capacity();
  const std::string& capacity() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_capacity(ArgT0&& arg0, ArgT... args);
  std::string* mutable_capacity();
  PROTOBUF_NODISCARD std::string* release_capacity();
  void set_allocated_capacity(std::string* capacity);
  private:
  const std::string& _internal_capacity() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_capacity(const std::string& value);
  std::string* _internal_mutable_capacity();
  public:

  // string partition_name = 3;
  void clear_partition_name();
  const std::string& partition_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_partition_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_partition_name();
  PROTOBUF_NODISCARD std::string* release_partition_name();
  void set_allocated_partition_name(std::string* partition_name);
  private:
  const std::string& _internal_partition_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_partition_name(const std::string& value);
  std::string* _internal_mutable_partition_name();
  public:

  // @@protoc_insertion_point(class_scope:StorageEngineInstance.AllocatedVolumeInfo.Allocation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr csd_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr capacity_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr partition_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_storage_5fengine_5finstance_2eproto;
};
// -------------------------------------------------------------------

class AllocatedVolumeInfo_CsdAllocationMapEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<AllocatedVolumeInfo_CsdAllocationMapEntry_DoNotUse, 
    std::string, ::StorageEngineInstance::AllocatedVolumeInfo_Allocation,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<AllocatedVolumeInfo_CsdAllocationMapEntry_DoNotUse, 
    std::string, ::StorageEngineInstance::AllocatedVolumeInfo_Allocation,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  AllocatedVolumeInfo_CsdAllocationMapEntry_DoNotUse();
  explicit constexpr AllocatedVolumeInfo_CsdAllocationMapEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit AllocatedVolumeInfo_CsdAllocationMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const AllocatedVolumeInfo_CsdAllocationMapEntry_DoNotUse& other);
  static const AllocatedVolumeInfo_CsdAllocationMapEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const AllocatedVolumeInfo_CsdAllocationMapEntry_DoNotUse*>(&_AllocatedVolumeInfo_CsdAllocationMapEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "StorageEngineInstance.AllocatedVolumeInfo.CsdAllocationMapEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class AllocatedVolumeInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:StorageEngineInstance.AllocatedVolumeInfo) */ {
 public:
  inline AllocatedVolumeInfo() : AllocatedVolumeInfo(nullptr) {}
  ~AllocatedVolumeInfo() override;
  explicit constexpr AllocatedVolumeInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AllocatedVolumeInfo(const AllocatedVolumeInfo& from);
  AllocatedVolumeInfo(AllocatedVolumeInfo&& from) noexcept
    : AllocatedVolumeInfo() {
    *this = ::std::move(from);
  }

  inline AllocatedVolumeInfo& operator=(const AllocatedVolumeInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline AllocatedVolumeInfo& operator=(AllocatedVolumeInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AllocatedVolumeInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const AllocatedVolumeInfo* internal_default_instance() {
    return reinterpret_cast<const AllocatedVolumeInfo*>(
               &_AllocatedVolumeInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(AllocatedVolumeInfo& a, AllocatedVolumeInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(AllocatedVolumeInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AllocatedVolumeInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AllocatedVolumeInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AllocatedVolumeInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AllocatedVolumeInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AllocatedVolumeInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AllocatedVolumeInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "StorageEngineInstance.AllocatedVolumeInfo";
  }
  protected:
  explicit AllocatedVolumeInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef AllocatedVolumeInfo_Allocation Allocation;

  // accessors -------------------------------------------------------

  enum : int {
    kCsdAllocationMapFieldNumber = 1,
  };
  // map<string, .StorageEngineInstance.AllocatedVolumeInfo.Allocation> csd_allocation_map = 1;
  int csd_allocation_map_size() const;
  private:
  int _internal_csd_allocation_map_size() const;
  public:
  void clear_csd_allocation_map();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::StorageEngineInstance::AllocatedVolumeInfo_Allocation >&
      _internal_csd_allocation_map() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::StorageEngineInstance::AllocatedVolumeInfo_Allocation >*
      _internal_mutable_csd_allocation_map();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::StorageEngineInstance::AllocatedVolumeInfo_Allocation >&
      csd_allocation_map() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::StorageEngineInstance::AllocatedVolumeInfo_Allocation >*
      mutable_csd_allocation_map();

  // @@protoc_insertion_point(class_scope:StorageEngineInstance.AllocatedVolumeInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      AllocatedVolumeInfo_CsdAllocationMapEntry_DoNotUse,
      std::string, ::StorageEngineInstance::AllocatedVolumeInfo_Allocation,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> csd_allocation_map_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_storage_5fengine_5finstance_2eproto;
};
// -------------------------------------------------------------------

class TmaxRequest_Chunk final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:StorageEngineInstance.TmaxRequest.Chunk) */ {
 public:
  inline TmaxRequest_Chunk() : TmaxRequest_Chunk(nullptr) {}
  ~TmaxRequest_Chunk() override;
  explicit constexpr TmaxRequest_Chunk(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TmaxRequest_Chunk(const TmaxRequest_Chunk& from);
  TmaxRequest_Chunk(TmaxRequest_Chunk&& from) noexcept
    : TmaxRequest_Chunk() {
    *this = ::std::move(from);
  }

  inline TmaxRequest_Chunk& operator=(const TmaxRequest_Chunk& from) {
    CopyFrom(from);
    return *this;
  }
  inline TmaxRequest_Chunk& operator=(TmaxRequest_Chunk&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TmaxRequest_Chunk& default_instance() {
    return *internal_default_instance();
  }
  static inline const TmaxRequest_Chunk* internal_default_instance() {
    return reinterpret_cast<const TmaxRequest_Chunk*>(
               &_TmaxRequest_Chunk_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(TmaxRequest_Chunk& a, TmaxRequest_Chunk& b) {
    a.Swap(&b);
  }
  inline void Swap(TmaxRequest_Chunk* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TmaxRequest_Chunk* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TmaxRequest_Chunk* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TmaxRequest_Chunk>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TmaxRequest_Chunk& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TmaxRequest_Chunk& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TmaxRequest_Chunk* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "StorageEngineInstance.TmaxRequest.Chunk";
  }
  protected:
  explicit TmaxRequest_Chunk(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOffsetFieldNumber = 1,
    kLengthFieldNumber = 2,
  };
  // int64 offset = 1;
  void clear_offset();
  int64_t offset() const;
  void set_offset(int64_t value);
  private:
  int64_t _internal_offset() const;
  void _internal_set_offset(int64_t value);
  public:

  // int32 length = 2;
  void clear_length();
  int32_t length() const;
  void set_length(int32_t value);
  private:
  int32_t _internal_length() const;
  void _internal_set_length(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:StorageEngineInstance.TmaxRequest.Chunk)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int64_t offset_;
  int32_t length_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_storage_5fengine_5finstance_2eproto;
};
// -------------------------------------------------------------------

class TmaxRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:StorageEngineInstance.TmaxRequest) */ {
 public:
  inline TmaxRequest() : TmaxRequest(nullptr) {}
  ~TmaxRequest() override;
  explicit constexpr TmaxRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TmaxRequest(const TmaxRequest& from);
  TmaxRequest(TmaxRequest&& from) noexcept
    : TmaxRequest() {
    *this = ::std::move(from);
  }

  inline TmaxRequest& operator=(const TmaxRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TmaxRequest& operator=(TmaxRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TmaxRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const TmaxRequest* internal_default_instance() {
    return reinterpret_cast<const TmaxRequest*>(
               &_TmaxRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(TmaxRequest& a, TmaxRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(TmaxRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TmaxRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TmaxRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TmaxRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TmaxRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TmaxRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TmaxRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "StorageEngineInstance.TmaxRequest";
  }
  protected:
  explicit TmaxRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TmaxRequest_Chunk Chunk;

  // accessors -------------------------------------------------------

  enum : int {
    kChunksFieldNumber = 3,
    kFileNameFieldNumber = 4,
    kCsdNameFieldNumber = 5,
    kTableFilterFieldNumber = 6,
    kColumnProjectionFieldNumber = 7,
    kQueryIdFieldNumber = 1,
    kWorkIdFieldNumber = 2,
  };
  // repeated .StorageEngineInstance.TmaxRequest.Chunk chunks = 3;
  int chunks_size() const;
  private:
  int _internal_chunks_size() const;
  public:
  void clear_chunks();
  ::StorageEngineInstance::TmaxRequest_Chunk* mutable_chunks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::StorageEngineInstance::TmaxRequest_Chunk >*
      mutable_chunks();
  private:
  const ::StorageEngineInstance::TmaxRequest_Chunk& _internal_chunks(int index) const;
  ::StorageEngineInstance::TmaxRequest_Chunk* _internal_add_chunks();
  public:
  const ::StorageEngineInstance::TmaxRequest_Chunk& chunks(int index) const;
  ::StorageEngineInstance::TmaxRequest_Chunk* add_chunks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::StorageEngineInstance::TmaxRequest_Chunk >&
      chunks() const;

  // string file_name = 4;
  void clear_file_name();
  const std::string& file_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_file_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_file_name();
  PROTOBUF_NODISCARD std::string* release_file_name();
  void set_allocated_file_name(std::string* file_name);
  private:
  const std::string& _internal_file_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file_name(const std::string& value);
  std::string* _internal_mutable_file_name();
  public:

  // string csd_name = 5;
  void clear_csd_name();
  const std::string& csd_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_csd_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_csd_name();
  PROTOBUF_NODISCARD std::string* release_csd_name();
  void set_allocated_csd_name(std::string* csd_name);
  private:
  const std::string& _internal_csd_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_csd_name(const std::string& value);
  std::string* _internal_mutable_csd_name();
  public:

  // string table_filter = 6;
  void clear_table_filter();
  const std::string& table_filter() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_table_filter(ArgT0&& arg0, ArgT... args);
  std::string* mutable_table_filter();
  PROTOBUF_NODISCARD std::string* release_table_filter();
  void set_allocated_table_filter(std::string* table_filter);
  private:
  const std::string& _internal_table_filter() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_table_filter(const std::string& value);
  std::string* _internal_mutable_table_filter();
  public:

  // string column_projection = 7;
  void clear_column_projection();
  const std::string& column_projection() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_column_projection(ArgT0&& arg0, ArgT... args);
  std::string* mutable_column_projection();
  PROTOBUF_NODISCARD std::string* release_column_projection();
  void set_allocated_column_projection(std::string* column_projection);
  private:
  const std::string& _internal_column_projection() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_column_projection(const std::string& value);
  std::string* _internal_mutable_column_projection();
  public:

  // int32 query_id = 1;
  void clear_query_id();
  int32_t query_id() const;
  void set_query_id(int32_t value);
  private:
  int32_t _internal_query_id() const;
  void _internal_set_query_id(int32_t value);
  public:

  // int32 work_id = 2;
  void clear_work_id();
  int32_t work_id() const;
  void set_work_id(int32_t value);
  private:
  int32_t _internal_work_id() const;
  void _internal_set_work_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:StorageEngineInstance.TmaxRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::StorageEngineInstance::TmaxRequest_Chunk > chunks_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr csd_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr table_filter_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr column_projection_;
  int32_t query_id_;
  int32_t work_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_storage_5fengine_5finstance_2eproto;
};
// -------------------------------------------------------------------

class TmaxResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:StorageEngineInstance.TmaxResponse) */ {
 public:
  inline TmaxResponse() : TmaxResponse(nullptr) {}
  ~TmaxResponse() override;
  explicit constexpr TmaxResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TmaxResponse(const TmaxResponse& from);
  TmaxResponse(TmaxResponse&& from) noexcept
    : TmaxResponse() {
    *this = ::std::move(from);
  }

  inline TmaxResponse& operator=(const TmaxResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline TmaxResponse& operator=(TmaxResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TmaxResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const TmaxResponse* internal_default_instance() {
    return reinterpret_cast<const TmaxResponse*>(
               &_TmaxResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(TmaxResponse& a, TmaxResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(TmaxResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TmaxResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TmaxResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TmaxResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TmaxResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TmaxResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TmaxResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "StorageEngineInstance.TmaxResponse";
  }
  protected:
  explicit TmaxResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // string result = 1;
  void clear_result();
  const std::string& result() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_result(ArgT0&& arg0, ArgT... args);
  std::string* mutable_result();
  PROTOBUF_NODISCARD std::string* release_result();
  void set_allocated_result(std::string* result);
  private:
  const std::string& _internal_result() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_result(const std::string& value);
  std::string* _internal_mutable_result();
  public:

  // @@protoc_insertion_point(class_scope:StorageEngineInstance.TmaxResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_storage_5fengine_5finstance_2eproto;
};
// -------------------------------------------------------------------

class Empty final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:StorageEngineInstance.Empty) */ {
 public:
  inline Empty() : Empty(nullptr) {}
  explicit constexpr Empty(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Empty(const Empty& from);
  Empty(Empty&& from) noexcept
    : Empty() {
    *this = ::std::move(from);
  }

  inline Empty& operator=(const Empty& from) {
    CopyFrom(from);
    return *this;
  }
  inline Empty& operator=(Empty&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Empty& default_instance() {
    return *internal_default_instance();
  }
  static inline const Empty* internal_default_instance() {
    return reinterpret_cast<const Empty*>(
               &_Empty_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(Empty& a, Empty& b) {
    a.Swap(&b);
  }
  inline void Swap(Empty* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Empty* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Empty* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Empty>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const Empty& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const Empty& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "StorageEngineInstance.Empty";
  }
  protected:
  explicit Empty(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:StorageEngineInstance.Empty)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_storage_5fengine_5finstance_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SnippetRequest

// .StorageEngineInstance.SnippetRequest.SnippetType type = 1;
inline void SnippetRequest::clear_type() {
  type_ = 0;
}
inline ::StorageEngineInstance::SnippetRequest_SnippetType SnippetRequest::_internal_type() const {
  return static_cast< ::StorageEngineInstance::SnippetRequest_SnippetType >(type_);
}
inline ::StorageEngineInstance::SnippetRequest_SnippetType SnippetRequest::type() const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.SnippetRequest.type)
  return _internal_type();
}
inline void SnippetRequest::_internal_set_type(::StorageEngineInstance::SnippetRequest_SnippetType value) {
  
  type_ = value;
}
inline void SnippetRequest::set_type(::StorageEngineInstance::SnippetRequest_SnippetType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:StorageEngineInstance.SnippetRequest.type)
}

// .StorageEngineInstance.Snippet snippet = 2;
inline bool SnippetRequest::_internal_has_snippet() const {
  return this != internal_default_instance() && snippet_ != nullptr;
}
inline bool SnippetRequest::has_snippet() const {
  return _internal_has_snippet();
}
inline void SnippetRequest::clear_snippet() {
  if (GetArenaForAllocation() == nullptr && snippet_ != nullptr) {
    delete snippet_;
  }
  snippet_ = nullptr;
}
inline const ::StorageEngineInstance::Snippet& SnippetRequest::_internal_snippet() const {
  const ::StorageEngineInstance::Snippet* p = snippet_;
  return p != nullptr ? *p : reinterpret_cast<const ::StorageEngineInstance::Snippet&>(
      ::StorageEngineInstance::_Snippet_default_instance_);
}
inline const ::StorageEngineInstance::Snippet& SnippetRequest::snippet() const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.SnippetRequest.snippet)
  return _internal_snippet();
}
inline void SnippetRequest::unsafe_arena_set_allocated_snippet(
    ::StorageEngineInstance::Snippet* snippet) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(snippet_);
  }
  snippet_ = snippet;
  if (snippet) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:StorageEngineInstance.SnippetRequest.snippet)
}
inline ::StorageEngineInstance::Snippet* SnippetRequest::release_snippet() {
  
  ::StorageEngineInstance::Snippet* temp = snippet_;
  snippet_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::StorageEngineInstance::Snippet* SnippetRequest::unsafe_arena_release_snippet() {
  // @@protoc_insertion_point(field_release:StorageEngineInstance.SnippetRequest.snippet)
  
  ::StorageEngineInstance::Snippet* temp = snippet_;
  snippet_ = nullptr;
  return temp;
}
inline ::StorageEngineInstance::Snippet* SnippetRequest::_internal_mutable_snippet() {
  
  if (snippet_ == nullptr) {
    auto* p = CreateMaybeMessage<::StorageEngineInstance::Snippet>(GetArenaForAllocation());
    snippet_ = p;
  }
  return snippet_;
}
inline ::StorageEngineInstance::Snippet* SnippetRequest::mutable_snippet() {
  ::StorageEngineInstance::Snippet* _msg = _internal_mutable_snippet();
  // @@protoc_insertion_point(field_mutable:StorageEngineInstance.SnippetRequest.snippet)
  return _msg;
}
inline void SnippetRequest::set_allocated_snippet(::StorageEngineInstance::Snippet* snippet) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete snippet_;
  }
  if (snippet) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::StorageEngineInstance::Snippet>::GetOwningArena(snippet);
    if (message_arena != submessage_arena) {
      snippet = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, snippet, submessage_arena);
    }
    
  } else {
    
  }
  snippet_ = snippet;
  // @@protoc_insertion_point(field_set_allocated:StorageEngineInstance.SnippetRequest.snippet)
}

// .StorageEngineInstance.ScanInfo scan_info = 3;
inline bool SnippetRequest::_internal_has_scan_info() const {
  return this != internal_default_instance() && scan_info_ != nullptr;
}
inline bool SnippetRequest::has_scan_info() const {
  return _internal_has_scan_info();
}
inline void SnippetRequest::clear_scan_info() {
  if (GetArenaForAllocation() == nullptr && scan_info_ != nullptr) {
    delete scan_info_;
  }
  scan_info_ = nullptr;
}
inline const ::StorageEngineInstance::ScanInfo& SnippetRequest::_internal_scan_info() const {
  const ::StorageEngineInstance::ScanInfo* p = scan_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::StorageEngineInstance::ScanInfo&>(
      ::StorageEngineInstance::_ScanInfo_default_instance_);
}
inline const ::StorageEngineInstance::ScanInfo& SnippetRequest::scan_info() const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.SnippetRequest.scan_info)
  return _internal_scan_info();
}
inline void SnippetRequest::unsafe_arena_set_allocated_scan_info(
    ::StorageEngineInstance::ScanInfo* scan_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(scan_info_);
  }
  scan_info_ = scan_info;
  if (scan_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:StorageEngineInstance.SnippetRequest.scan_info)
}
inline ::StorageEngineInstance::ScanInfo* SnippetRequest::release_scan_info() {
  
  ::StorageEngineInstance::ScanInfo* temp = scan_info_;
  scan_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::StorageEngineInstance::ScanInfo* SnippetRequest::unsafe_arena_release_scan_info() {
  // @@protoc_insertion_point(field_release:StorageEngineInstance.SnippetRequest.scan_info)
  
  ::StorageEngineInstance::ScanInfo* temp = scan_info_;
  scan_info_ = nullptr;
  return temp;
}
inline ::StorageEngineInstance::ScanInfo* SnippetRequest::_internal_mutable_scan_info() {
  
  if (scan_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::StorageEngineInstance::ScanInfo>(GetArenaForAllocation());
    scan_info_ = p;
  }
  return scan_info_;
}
inline ::StorageEngineInstance::ScanInfo* SnippetRequest::mutable_scan_info() {
  ::StorageEngineInstance::ScanInfo* _msg = _internal_mutable_scan_info();
  // @@protoc_insertion_point(field_mutable:StorageEngineInstance.SnippetRequest.scan_info)
  return _msg;
}
inline void SnippetRequest::set_allocated_scan_info(::StorageEngineInstance::ScanInfo* scan_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete scan_info_;
  }
  if (scan_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::StorageEngineInstance::ScanInfo>::GetOwningArena(scan_info);
    if (message_arena != submessage_arena) {
      scan_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scan_info, submessage_arena);
    }
    
  } else {
    
  }
  scan_info_ = scan_info;
  // @@protoc_insertion_point(field_set_allocated:StorageEngineInstance.SnippetRequest.scan_info)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// ScanInfo_SST

// map<string, string> csd_pba_map = 1;
inline int ScanInfo_SST::_internal_csd_pba_map_size() const {
  return csd_pba_map_.size();
}
inline int ScanInfo_SST::csd_pba_map_size() const {
  return _internal_csd_pba_map_size();
}
inline void ScanInfo_SST::clear_csd_pba_map() {
  csd_pba_map_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
ScanInfo_SST::_internal_csd_pba_map() const {
  return csd_pba_map_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
ScanInfo_SST::csd_pba_map() const {
  // @@protoc_insertion_point(field_map:StorageEngineInstance.ScanInfo.SST.csd_pba_map)
  return _internal_csd_pba_map();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
ScanInfo_SST::_internal_mutable_csd_pba_map() {
  return csd_pba_map_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
ScanInfo_SST::mutable_csd_pba_map() {
  // @@protoc_insertion_point(field_mutable_map:StorageEngineInstance.ScanInfo.SST.csd_pba_map)
  return _internal_mutable_csd_pba_map();
}

// int32 sst_block_count = 2;
inline void ScanInfo_SST::clear_sst_block_count() {
  sst_block_count_ = 0;
}
inline int32_t ScanInfo_SST::_internal_sst_block_count() const {
  return sst_block_count_;
}
inline int32_t ScanInfo_SST::sst_block_count() const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.ScanInfo.SST.sst_block_count)
  return _internal_sst_block_count();
}
inline void ScanInfo_SST::_internal_set_sst_block_count(int32_t value) {
  
  sst_block_count_ = value;
}
inline void ScanInfo_SST::set_sst_block_count(int32_t value) {
  _internal_set_sst_block_count(value);
  // @@protoc_insertion_point(field_set:StorageEngineInstance.ScanInfo.SST.sst_block_count)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// ScanInfo

// map<string, .StorageEngineInstance.ScanInfo.SST> sst_list = 1;
inline int ScanInfo::_internal_sst_list_size() const {
  return sst_list_.size();
}
inline int ScanInfo::sst_list_size() const {
  return _internal_sst_list_size();
}
inline void ScanInfo::clear_sst_list() {
  sst_list_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::StorageEngineInstance::ScanInfo_SST >&
ScanInfo::_internal_sst_list() const {
  return sst_list_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::StorageEngineInstance::ScanInfo_SST >&
ScanInfo::sst_list() const {
  // @@protoc_insertion_point(field_map:StorageEngineInstance.ScanInfo.sst_list)
  return _internal_sst_list();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::StorageEngineInstance::ScanInfo_SST >*
ScanInfo::_internal_mutable_sst_list() {
  return sst_list_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::StorageEngineInstance::ScanInfo_SST >*
ScanInfo::mutable_sst_list() {
  // @@protoc_insertion_point(field_mutable_map:StorageEngineInstance.ScanInfo.sst_list)
  return _internal_mutable_sst_list();
}

// int32 table_block_count = 2;
inline void ScanInfo::clear_table_block_count() {
  table_block_count_ = 0;
}
inline int32_t ScanInfo::_internal_table_block_count() const {
  return table_block_count_;
}
inline int32_t ScanInfo::table_block_count() const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.ScanInfo.table_block_count)
  return _internal_table_block_count();
}
inline void ScanInfo::_internal_set_table_block_count(int32_t value) {
  
  table_block_count_ = value;
}
inline void ScanInfo::set_table_block_count(int32_t value) {
  _internal_set_table_block_count(value);
  // @@protoc_insertion_point(field_set:StorageEngineInstance.ScanInfo.table_block_count)
}

// string wal_data = 3;
inline void ScanInfo::clear_wal_data() {
  wal_data_.ClearToEmpty();
}
inline const std::string& ScanInfo::wal_data() const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.ScanInfo.wal_data)
  return _internal_wal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ScanInfo::set_wal_data(ArgT0&& arg0, ArgT... args) {
 
 wal_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:StorageEngineInstance.ScanInfo.wal_data)
}
inline std::string* ScanInfo::mutable_wal_data() {
  std::string* _s = _internal_mutable_wal_data();
  // @@protoc_insertion_point(field_mutable:StorageEngineInstance.ScanInfo.wal_data)
  return _s;
}
inline const std::string& ScanInfo::_internal_wal_data() const {
  return wal_data_.Get();
}
inline void ScanInfo::_internal_set_wal_data(const std::string& value) {
  
  wal_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ScanInfo::_internal_mutable_wal_data() {
  
  return wal_data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ScanInfo::release_wal_data() {
  // @@protoc_insertion_point(field_release:StorageEngineInstance.ScanInfo.wal_data)
  return wal_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ScanInfo::set_allocated_wal_data(std::string* wal_data) {
  if (wal_data != nullptr) {
    
  } else {
    
  }
  wal_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), wal_data,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (wal_data_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    wal_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:StorageEngineInstance.ScanInfo.wal_data)
}

// -------------------------------------------------------------------

// Snippet_Filter_FilterValue

// repeated .StorageEngineInstance.Snippet.ValueType type = 1;
inline int Snippet_Filter_FilterValue::_internal_type_size() const {
  return type_.size();
}
inline int Snippet_Filter_FilterValue::type_size() const {
  return _internal_type_size();
}
inline void Snippet_Filter_FilterValue::clear_type() {
  type_.Clear();
}
inline ::StorageEngineInstance::Snippet_ValueType Snippet_Filter_FilterValue::_internal_type(int index) const {
  return static_cast< ::StorageEngineInstance::Snippet_ValueType >(type_.Get(index));
}
inline ::StorageEngineInstance::Snippet_ValueType Snippet_Filter_FilterValue::type(int index) const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.Snippet.Filter.FilterValue.type)
  return _internal_type(index);
}
inline void Snippet_Filter_FilterValue::set_type(int index, ::StorageEngineInstance::Snippet_ValueType value) {
  type_.Set(index, value);
  // @@protoc_insertion_point(field_set:StorageEngineInstance.Snippet.Filter.FilterValue.type)
}
inline void Snippet_Filter_FilterValue::_internal_add_type(::StorageEngineInstance::Snippet_ValueType value) {
  type_.Add(value);
}
inline void Snippet_Filter_FilterValue::add_type(::StorageEngineInstance::Snippet_ValueType value) {
  _internal_add_type(value);
  // @@protoc_insertion_point(field_add:StorageEngineInstance.Snippet.Filter.FilterValue.type)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
Snippet_Filter_FilterValue::type() const {
  // @@protoc_insertion_point(field_list:StorageEngineInstance.Snippet.Filter.FilterValue.type)
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
Snippet_Filter_FilterValue::_internal_mutable_type() {
  return &type_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
Snippet_Filter_FilterValue::mutable_type() {
  // @@protoc_insertion_point(field_mutable_list:StorageEngineInstance.Snippet.Filter.FilterValue.type)
  return _internal_mutable_type();
}

// repeated string value = 2;
inline int Snippet_Filter_FilterValue::_internal_value_size() const {
  return value_.size();
}
inline int Snippet_Filter_FilterValue::value_size() const {
  return _internal_value_size();
}
inline void Snippet_Filter_FilterValue::clear_value() {
  value_.Clear();
}
inline std::string* Snippet_Filter_FilterValue::add_value() {
  std::string* _s = _internal_add_value();
  // @@protoc_insertion_point(field_add_mutable:StorageEngineInstance.Snippet.Filter.FilterValue.value)
  return _s;
}
inline const std::string& Snippet_Filter_FilterValue::_internal_value(int index) const {
  return value_.Get(index);
}
inline const std::string& Snippet_Filter_FilterValue::value(int index) const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.Snippet.Filter.FilterValue.value)
  return _internal_value(index);
}
inline std::string* Snippet_Filter_FilterValue::mutable_value(int index) {
  // @@protoc_insertion_point(field_mutable:StorageEngineInstance.Snippet.Filter.FilterValue.value)
  return value_.Mutable(index);
}
inline void Snippet_Filter_FilterValue::set_value(int index, const std::string& value) {
  value_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:StorageEngineInstance.Snippet.Filter.FilterValue.value)
}
inline void Snippet_Filter_FilterValue::set_value(int index, std::string&& value) {
  value_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:StorageEngineInstance.Snippet.Filter.FilterValue.value)
}
inline void Snippet_Filter_FilterValue::set_value(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  value_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:StorageEngineInstance.Snippet.Filter.FilterValue.value)
}
inline void Snippet_Filter_FilterValue::set_value(int index, const char* value, size_t size) {
  value_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:StorageEngineInstance.Snippet.Filter.FilterValue.value)
}
inline std::string* Snippet_Filter_FilterValue::_internal_add_value() {
  return value_.Add();
}
inline void Snippet_Filter_FilterValue::add_value(const std::string& value) {
  value_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:StorageEngineInstance.Snippet.Filter.FilterValue.value)
}
inline void Snippet_Filter_FilterValue::add_value(std::string&& value) {
  value_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:StorageEngineInstance.Snippet.Filter.FilterValue.value)
}
inline void Snippet_Filter_FilterValue::add_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  value_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:StorageEngineInstance.Snippet.Filter.FilterValue.value)
}
inline void Snippet_Filter_FilterValue::add_value(const char* value, size_t size) {
  value_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:StorageEngineInstance.Snippet.Filter.FilterValue.value)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Snippet_Filter_FilterValue::value() const {
  // @@protoc_insertion_point(field_list:StorageEngineInstance.Snippet.Filter.FilterValue.value)
  return value_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Snippet_Filter_FilterValue::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:StorageEngineInstance.Snippet.Filter.FilterValue.value)
  return &value_;
}

// -------------------------------------------------------------------

// Snippet_Filter

// .StorageEngineInstance.Snippet.Filter.FilterValue LV = 1;
inline bool Snippet_Filter::_internal_has_lv() const {
  return this != internal_default_instance() && lv_ != nullptr;
}
inline bool Snippet_Filter::has_lv() const {
  return _internal_has_lv();
}
inline void Snippet_Filter::clear_lv() {
  if (GetArenaForAllocation() == nullptr && lv_ != nullptr) {
    delete lv_;
  }
  lv_ = nullptr;
}
inline const ::StorageEngineInstance::Snippet_Filter_FilterValue& Snippet_Filter::_internal_lv() const {
  const ::StorageEngineInstance::Snippet_Filter_FilterValue* p = lv_;
  return p != nullptr ? *p : reinterpret_cast<const ::StorageEngineInstance::Snippet_Filter_FilterValue&>(
      ::StorageEngineInstance::_Snippet_Filter_FilterValue_default_instance_);
}
inline const ::StorageEngineInstance::Snippet_Filter_FilterValue& Snippet_Filter::lv() const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.Snippet.Filter.LV)
  return _internal_lv();
}
inline void Snippet_Filter::unsafe_arena_set_allocated_lv(
    ::StorageEngineInstance::Snippet_Filter_FilterValue* lv) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lv_);
  }
  lv_ = lv;
  if (lv) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:StorageEngineInstance.Snippet.Filter.LV)
}
inline ::StorageEngineInstance::Snippet_Filter_FilterValue* Snippet_Filter::release_lv() {
  
  ::StorageEngineInstance::Snippet_Filter_FilterValue* temp = lv_;
  lv_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::StorageEngineInstance::Snippet_Filter_FilterValue* Snippet_Filter::unsafe_arena_release_lv() {
  // @@protoc_insertion_point(field_release:StorageEngineInstance.Snippet.Filter.LV)
  
  ::StorageEngineInstance::Snippet_Filter_FilterValue* temp = lv_;
  lv_ = nullptr;
  return temp;
}
inline ::StorageEngineInstance::Snippet_Filter_FilterValue* Snippet_Filter::_internal_mutable_lv() {
  
  if (lv_ == nullptr) {
    auto* p = CreateMaybeMessage<::StorageEngineInstance::Snippet_Filter_FilterValue>(GetArenaForAllocation());
    lv_ = p;
  }
  return lv_;
}
inline ::StorageEngineInstance::Snippet_Filter_FilterValue* Snippet_Filter::mutable_lv() {
  ::StorageEngineInstance::Snippet_Filter_FilterValue* _msg = _internal_mutable_lv();
  // @@protoc_insertion_point(field_mutable:StorageEngineInstance.Snippet.Filter.LV)
  return _msg;
}
inline void Snippet_Filter::set_allocated_lv(::StorageEngineInstance::Snippet_Filter_FilterValue* lv) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete lv_;
  }
  if (lv) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::StorageEngineInstance::Snippet_Filter_FilterValue>::GetOwningArena(lv);
    if (message_arena != submessage_arena) {
      lv = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lv, submessage_arena);
    }
    
  } else {
    
  }
  lv_ = lv;
  // @@protoc_insertion_point(field_set_allocated:StorageEngineInstance.Snippet.Filter.LV)
}

// .StorageEngineInstance.Snippet.Filter.OperType Operator = 2;
inline void Snippet_Filter::clear_operator_() {
  operator__ = 0;
}
inline ::StorageEngineInstance::Snippet_Filter_OperType Snippet_Filter::_internal_operator_() const {
  return static_cast< ::StorageEngineInstance::Snippet_Filter_OperType >(operator__);
}
inline ::StorageEngineInstance::Snippet_Filter_OperType Snippet_Filter::operator_() const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.Snippet.Filter.Operator)
  return _internal_operator_();
}
inline void Snippet_Filter::_internal_set_operator_(::StorageEngineInstance::Snippet_Filter_OperType value) {
  
  operator__ = value;
}
inline void Snippet_Filter::set_operator_(::StorageEngineInstance::Snippet_Filter_OperType value) {
  _internal_set_operator_(value);
  // @@protoc_insertion_point(field_set:StorageEngineInstance.Snippet.Filter.Operator)
}

// .StorageEngineInstance.Snippet.Filter.FilterValue RV = 3;
inline bool Snippet_Filter::_internal_has_rv() const {
  return this != internal_default_instance() && rv_ != nullptr;
}
inline bool Snippet_Filter::has_rv() const {
  return _internal_has_rv();
}
inline void Snippet_Filter::clear_rv() {
  if (GetArenaForAllocation() == nullptr && rv_ != nullptr) {
    delete rv_;
  }
  rv_ = nullptr;
}
inline const ::StorageEngineInstance::Snippet_Filter_FilterValue& Snippet_Filter::_internal_rv() const {
  const ::StorageEngineInstance::Snippet_Filter_FilterValue* p = rv_;
  return p != nullptr ? *p : reinterpret_cast<const ::StorageEngineInstance::Snippet_Filter_FilterValue&>(
      ::StorageEngineInstance::_Snippet_Filter_FilterValue_default_instance_);
}
inline const ::StorageEngineInstance::Snippet_Filter_FilterValue& Snippet_Filter::rv() const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.Snippet.Filter.RV)
  return _internal_rv();
}
inline void Snippet_Filter::unsafe_arena_set_allocated_rv(
    ::StorageEngineInstance::Snippet_Filter_FilterValue* rv) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rv_);
  }
  rv_ = rv;
  if (rv) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:StorageEngineInstance.Snippet.Filter.RV)
}
inline ::StorageEngineInstance::Snippet_Filter_FilterValue* Snippet_Filter::release_rv() {
  
  ::StorageEngineInstance::Snippet_Filter_FilterValue* temp = rv_;
  rv_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::StorageEngineInstance::Snippet_Filter_FilterValue* Snippet_Filter::unsafe_arena_release_rv() {
  // @@protoc_insertion_point(field_release:StorageEngineInstance.Snippet.Filter.RV)
  
  ::StorageEngineInstance::Snippet_Filter_FilterValue* temp = rv_;
  rv_ = nullptr;
  return temp;
}
inline ::StorageEngineInstance::Snippet_Filter_FilterValue* Snippet_Filter::_internal_mutable_rv() {
  
  if (rv_ == nullptr) {
    auto* p = CreateMaybeMessage<::StorageEngineInstance::Snippet_Filter_FilterValue>(GetArenaForAllocation());
    rv_ = p;
  }
  return rv_;
}
inline ::StorageEngineInstance::Snippet_Filter_FilterValue* Snippet_Filter::mutable_rv() {
  ::StorageEngineInstance::Snippet_Filter_FilterValue* _msg = _internal_mutable_rv();
  // @@protoc_insertion_point(field_mutable:StorageEngineInstance.Snippet.Filter.RV)
  return _msg;
}
inline void Snippet_Filter::set_allocated_rv(::StorageEngineInstance::Snippet_Filter_FilterValue* rv) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete rv_;
  }
  if (rv) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::StorageEngineInstance::Snippet_Filter_FilterValue>::GetOwningArena(rv);
    if (message_arena != submessage_arena) {
      rv = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rv, submessage_arena);
    }
    
  } else {
    
  }
  rv_ = rv;
  // @@protoc_insertion_point(field_set_allocated:StorageEngineInstance.Snippet.Filter.RV)
}

// -------------------------------------------------------------------

// Snippet_Projection

// .StorageEngineInstance.Snippet.Projection.SelectType select_type = 1;
inline void Snippet_Projection::clear_select_type() {
  select_type_ = 0;
}
inline ::StorageEngineInstance::Snippet_Projection_SelectType Snippet_Projection::_internal_select_type() const {
  return static_cast< ::StorageEngineInstance::Snippet_Projection_SelectType >(select_type_);
}
inline ::StorageEngineInstance::Snippet_Projection_SelectType Snippet_Projection::select_type() const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.Snippet.Projection.select_type)
  return _internal_select_type();
}
inline void Snippet_Projection::_internal_set_select_type(::StorageEngineInstance::Snippet_Projection_SelectType value) {
  
  select_type_ = value;
}
inline void Snippet_Projection::set_select_type(::StorageEngineInstance::Snippet_Projection_SelectType value) {
  _internal_set_select_type(value);
  // @@protoc_insertion_point(field_set:StorageEngineInstance.Snippet.Projection.select_type)
}

// repeated string value = 2;
inline int Snippet_Projection::_internal_value_size() const {
  return value_.size();
}
inline int Snippet_Projection::value_size() const {
  return _internal_value_size();
}
inline void Snippet_Projection::clear_value() {
  value_.Clear();
}
inline std::string* Snippet_Projection::add_value() {
  std::string* _s = _internal_add_value();
  // @@protoc_insertion_point(field_add_mutable:StorageEngineInstance.Snippet.Projection.value)
  return _s;
}
inline const std::string& Snippet_Projection::_internal_value(int index) const {
  return value_.Get(index);
}
inline const std::string& Snippet_Projection::value(int index) const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.Snippet.Projection.value)
  return _internal_value(index);
}
inline std::string* Snippet_Projection::mutable_value(int index) {
  // @@protoc_insertion_point(field_mutable:StorageEngineInstance.Snippet.Projection.value)
  return value_.Mutable(index);
}
inline void Snippet_Projection::set_value(int index, const std::string& value) {
  value_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:StorageEngineInstance.Snippet.Projection.value)
}
inline void Snippet_Projection::set_value(int index, std::string&& value) {
  value_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:StorageEngineInstance.Snippet.Projection.value)
}
inline void Snippet_Projection::set_value(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  value_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:StorageEngineInstance.Snippet.Projection.value)
}
inline void Snippet_Projection::set_value(int index, const char* value, size_t size) {
  value_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:StorageEngineInstance.Snippet.Projection.value)
}
inline std::string* Snippet_Projection::_internal_add_value() {
  return value_.Add();
}
inline void Snippet_Projection::add_value(const std::string& value) {
  value_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:StorageEngineInstance.Snippet.Projection.value)
}
inline void Snippet_Projection::add_value(std::string&& value) {
  value_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:StorageEngineInstance.Snippet.Projection.value)
}
inline void Snippet_Projection::add_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  value_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:StorageEngineInstance.Snippet.Projection.value)
}
inline void Snippet_Projection::add_value(const char* value, size_t size) {
  value_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:StorageEngineInstance.Snippet.Projection.value)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Snippet_Projection::value() const {
  // @@protoc_insertion_point(field_list:StorageEngineInstance.Snippet.Projection.value)
  return value_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Snippet_Projection::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:StorageEngineInstance.Snippet.Projection.value)
  return &value_;
}

// repeated .StorageEngineInstance.Snippet.ValueType value_type = 3;
inline int Snippet_Projection::_internal_value_type_size() const {
  return value_type_.size();
}
inline int Snippet_Projection::value_type_size() const {
  return _internal_value_type_size();
}
inline void Snippet_Projection::clear_value_type() {
  value_type_.Clear();
}
inline ::StorageEngineInstance::Snippet_ValueType Snippet_Projection::_internal_value_type(int index) const {
  return static_cast< ::StorageEngineInstance::Snippet_ValueType >(value_type_.Get(index));
}
inline ::StorageEngineInstance::Snippet_ValueType Snippet_Projection::value_type(int index) const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.Snippet.Projection.value_type)
  return _internal_value_type(index);
}
inline void Snippet_Projection::set_value_type(int index, ::StorageEngineInstance::Snippet_ValueType value) {
  value_type_.Set(index, value);
  // @@protoc_insertion_point(field_set:StorageEngineInstance.Snippet.Projection.value_type)
}
inline void Snippet_Projection::_internal_add_value_type(::StorageEngineInstance::Snippet_ValueType value) {
  value_type_.Add(value);
}
inline void Snippet_Projection::add_value_type(::StorageEngineInstance::Snippet_ValueType value) {
  _internal_add_value_type(value);
  // @@protoc_insertion_point(field_add:StorageEngineInstance.Snippet.Projection.value_type)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
Snippet_Projection::value_type() const {
  // @@protoc_insertion_point(field_list:StorageEngineInstance.Snippet.Projection.value_type)
  return value_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
Snippet_Projection::_internal_mutable_value_type() {
  return &value_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
Snippet_Projection::mutable_value_type() {
  // @@protoc_insertion_point(field_mutable_list:StorageEngineInstance.Snippet.Projection.value_type)
  return _internal_mutable_value_type();
}

// -------------------------------------------------------------------

// Snippet_Order

// repeated .StorageEngineInstance.Snippet.Order.OrderDirection ascending = 1;
inline int Snippet_Order::_internal_ascending_size() const {
  return ascending_.size();
}
inline int Snippet_Order::ascending_size() const {
  return _internal_ascending_size();
}
inline void Snippet_Order::clear_ascending() {
  ascending_.Clear();
}
inline ::StorageEngineInstance::Snippet_Order_OrderDirection Snippet_Order::_internal_ascending(int index) const {
  return static_cast< ::StorageEngineInstance::Snippet_Order_OrderDirection >(ascending_.Get(index));
}
inline ::StorageEngineInstance::Snippet_Order_OrderDirection Snippet_Order::ascending(int index) const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.Snippet.Order.ascending)
  return _internal_ascending(index);
}
inline void Snippet_Order::set_ascending(int index, ::StorageEngineInstance::Snippet_Order_OrderDirection value) {
  ascending_.Set(index, value);
  // @@protoc_insertion_point(field_set:StorageEngineInstance.Snippet.Order.ascending)
}
inline void Snippet_Order::_internal_add_ascending(::StorageEngineInstance::Snippet_Order_OrderDirection value) {
  ascending_.Add(value);
}
inline void Snippet_Order::add_ascending(::StorageEngineInstance::Snippet_Order_OrderDirection value) {
  _internal_add_ascending(value);
  // @@protoc_insertion_point(field_add:StorageEngineInstance.Snippet.Order.ascending)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
Snippet_Order::ascending() const {
  // @@protoc_insertion_point(field_list:StorageEngineInstance.Snippet.Order.ascending)
  return ascending_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
Snippet_Order::_internal_mutable_ascending() {
  return &ascending_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
Snippet_Order::mutable_ascending() {
  // @@protoc_insertion_point(field_mutable_list:StorageEngineInstance.Snippet.Order.ascending)
  return _internal_mutable_ascending();
}

// repeated string column_name = 2;
inline int Snippet_Order::_internal_column_name_size() const {
  return column_name_.size();
}
inline int Snippet_Order::column_name_size() const {
  return _internal_column_name_size();
}
inline void Snippet_Order::clear_column_name() {
  column_name_.Clear();
}
inline std::string* Snippet_Order::add_column_name() {
  std::string* _s = _internal_add_column_name();
  // @@protoc_insertion_point(field_add_mutable:StorageEngineInstance.Snippet.Order.column_name)
  return _s;
}
inline const std::string& Snippet_Order::_internal_column_name(int index) const {
  return column_name_.Get(index);
}
inline const std::string& Snippet_Order::column_name(int index) const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.Snippet.Order.column_name)
  return _internal_column_name(index);
}
inline std::string* Snippet_Order::mutable_column_name(int index) {
  // @@protoc_insertion_point(field_mutable:StorageEngineInstance.Snippet.Order.column_name)
  return column_name_.Mutable(index);
}
inline void Snippet_Order::set_column_name(int index, const std::string& value) {
  column_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:StorageEngineInstance.Snippet.Order.column_name)
}
inline void Snippet_Order::set_column_name(int index, std::string&& value) {
  column_name_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:StorageEngineInstance.Snippet.Order.column_name)
}
inline void Snippet_Order::set_column_name(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  column_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:StorageEngineInstance.Snippet.Order.column_name)
}
inline void Snippet_Order::set_column_name(int index, const char* value, size_t size) {
  column_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:StorageEngineInstance.Snippet.Order.column_name)
}
inline std::string* Snippet_Order::_internal_add_column_name() {
  return column_name_.Add();
}
inline void Snippet_Order::add_column_name(const std::string& value) {
  column_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:StorageEngineInstance.Snippet.Order.column_name)
}
inline void Snippet_Order::add_column_name(std::string&& value) {
  column_name_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:StorageEngineInstance.Snippet.Order.column_name)
}
inline void Snippet_Order::add_column_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  column_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:StorageEngineInstance.Snippet.Order.column_name)
}
inline void Snippet_Order::add_column_name(const char* value, size_t size) {
  column_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:StorageEngineInstance.Snippet.Order.column_name)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Snippet_Order::column_name() const {
  // @@protoc_insertion_point(field_list:StorageEngineInstance.Snippet.Order.column_name)
  return column_name_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Snippet_Order::mutable_column_name() {
  // @@protoc_insertion_point(field_mutable_list:StorageEngineInstance.Snippet.Order.column_name)
  return &column_name_;
}

// -------------------------------------------------------------------

// Snippet_Dependency

// repeated .StorageEngineInstance.Snippet.Projection dependency_projection = 1;
inline int Snippet_Dependency::_internal_dependency_projection_size() const {
  return dependency_projection_.size();
}
inline int Snippet_Dependency::dependency_projection_size() const {
  return _internal_dependency_projection_size();
}
inline void Snippet_Dependency::clear_dependency_projection() {
  dependency_projection_.Clear();
}
inline ::StorageEngineInstance::Snippet_Projection* Snippet_Dependency::mutable_dependency_projection(int index) {
  // @@protoc_insertion_point(field_mutable:StorageEngineInstance.Snippet.Dependency.dependency_projection)
  return dependency_projection_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::StorageEngineInstance::Snippet_Projection >*
Snippet_Dependency::mutable_dependency_projection() {
  // @@protoc_insertion_point(field_mutable_list:StorageEngineInstance.Snippet.Dependency.dependency_projection)
  return &dependency_projection_;
}
inline const ::StorageEngineInstance::Snippet_Projection& Snippet_Dependency::_internal_dependency_projection(int index) const {
  return dependency_projection_.Get(index);
}
inline const ::StorageEngineInstance::Snippet_Projection& Snippet_Dependency::dependency_projection(int index) const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.Snippet.Dependency.dependency_projection)
  return _internal_dependency_projection(index);
}
inline ::StorageEngineInstance::Snippet_Projection* Snippet_Dependency::_internal_add_dependency_projection() {
  return dependency_projection_.Add();
}
inline ::StorageEngineInstance::Snippet_Projection* Snippet_Dependency::add_dependency_projection() {
  ::StorageEngineInstance::Snippet_Projection* _add = _internal_add_dependency_projection();
  // @@protoc_insertion_point(field_add:StorageEngineInstance.Snippet.Dependency.dependency_projection)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::StorageEngineInstance::Snippet_Projection >&
Snippet_Dependency::dependency_projection() const {
  // @@protoc_insertion_point(field_list:StorageEngineInstance.Snippet.Dependency.dependency_projection)
  return dependency_projection_;
}

// repeated .StorageEngineInstance.Snippet.Filter dependency_filter = 2;
inline int Snippet_Dependency::_internal_dependency_filter_size() const {
  return dependency_filter_.size();
}
inline int Snippet_Dependency::dependency_filter_size() const {
  return _internal_dependency_filter_size();
}
inline void Snippet_Dependency::clear_dependency_filter() {
  dependency_filter_.Clear();
}
inline ::StorageEngineInstance::Snippet_Filter* Snippet_Dependency::mutable_dependency_filter(int index) {
  // @@protoc_insertion_point(field_mutable:StorageEngineInstance.Snippet.Dependency.dependency_filter)
  return dependency_filter_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::StorageEngineInstance::Snippet_Filter >*
Snippet_Dependency::mutable_dependency_filter() {
  // @@protoc_insertion_point(field_mutable_list:StorageEngineInstance.Snippet.Dependency.dependency_filter)
  return &dependency_filter_;
}
inline const ::StorageEngineInstance::Snippet_Filter& Snippet_Dependency::_internal_dependency_filter(int index) const {
  return dependency_filter_.Get(index);
}
inline const ::StorageEngineInstance::Snippet_Filter& Snippet_Dependency::dependency_filter(int index) const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.Snippet.Dependency.dependency_filter)
  return _internal_dependency_filter(index);
}
inline ::StorageEngineInstance::Snippet_Filter* Snippet_Dependency::_internal_add_dependency_filter() {
  return dependency_filter_.Add();
}
inline ::StorageEngineInstance::Snippet_Filter* Snippet_Dependency::add_dependency_filter() {
  ::StorageEngineInstance::Snippet_Filter* _add = _internal_add_dependency_filter();
  // @@protoc_insertion_point(field_add:StorageEngineInstance.Snippet.Dependency.dependency_filter)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::StorageEngineInstance::Snippet_Filter >&
Snippet_Dependency::dependency_filter() const {
  // @@protoc_insertion_point(field_list:StorageEngineInstance.Snippet.Dependency.dependency_filter)
  return dependency_filter_;
}

// -------------------------------------------------------------------

// Snippet_Limit

// int32 offset = 1;
inline void Snippet_Limit::clear_offset() {
  offset_ = 0;
}
inline int32_t Snippet_Limit::_internal_offset() const {
  return offset_;
}
inline int32_t Snippet_Limit::offset() const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.Snippet.Limit.offset)
  return _internal_offset();
}
inline void Snippet_Limit::_internal_set_offset(int32_t value) {
  
  offset_ = value;
}
inline void Snippet_Limit::set_offset(int32_t value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:StorageEngineInstance.Snippet.Limit.offset)
}

// int32 length = 2;
inline void Snippet_Limit::clear_length() {
  length_ = 0;
}
inline int32_t Snippet_Limit::_internal_length() const {
  return length_;
}
inline int32_t Snippet_Limit::length() const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.Snippet.Limit.length)
  return _internal_length();
}
inline void Snippet_Limit::_internal_set_length(int32_t value) {
  
  length_ = value;
}
inline void Snippet_Limit::set_length(int32_t value) {
  _internal_set_length(value);
  // @@protoc_insertion_point(field_set:StorageEngineInstance.Snippet.Limit.length)
}

// -------------------------------------------------------------------

// Snippet

// string db_name = 1;
inline void Snippet::clear_db_name() {
  db_name_.ClearToEmpty();
}
inline const std::string& Snippet::db_name() const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.Snippet.db_name)
  return _internal_db_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Snippet::set_db_name(ArgT0&& arg0, ArgT... args) {
 
 db_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:StorageEngineInstance.Snippet.db_name)
}
inline std::string* Snippet::mutable_db_name() {
  std::string* _s = _internal_mutable_db_name();
  // @@protoc_insertion_point(field_mutable:StorageEngineInstance.Snippet.db_name)
  return _s;
}
inline const std::string& Snippet::_internal_db_name() const {
  return db_name_.Get();
}
inline void Snippet::_internal_set_db_name(const std::string& value) {
  
  db_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Snippet::_internal_mutable_db_name() {
  
  return db_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Snippet::release_db_name() {
  // @@protoc_insertion_point(field_release:StorageEngineInstance.Snippet.db_name)
  return db_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Snippet::set_allocated_db_name(std::string* db_name) {
  if (db_name != nullptr) {
    
  } else {
    
  }
  db_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), db_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (db_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    db_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:StorageEngineInstance.Snippet.db_name)
}

// int32 query_ID = 2;
inline void Snippet::clear_query_id() {
  query_id_ = 0;
}
inline int32_t Snippet::_internal_query_id() const {
  return query_id_;
}
inline int32_t Snippet::query_id() const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.Snippet.query_ID)
  return _internal_query_id();
}
inline void Snippet::_internal_set_query_id(int32_t value) {
  
  query_id_ = value;
}
inline void Snippet::set_query_id(int32_t value) {
  _internal_set_query_id(value);
  // @@protoc_insertion_point(field_set:StorageEngineInstance.Snippet.query_ID)
}

// int32 work_ID = 3;
inline void Snippet::clear_work_id() {
  work_id_ = 0;
}
inline int32_t Snippet::_internal_work_id() const {
  return work_id_;
}
inline int32_t Snippet::work_id() const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.Snippet.work_ID)
  return _internal_work_id();
}
inline void Snippet::_internal_set_work_id(int32_t value) {
  
  work_id_ = value;
}
inline void Snippet::set_work_id(int32_t value) {
  _internal_set_work_id(value);
  // @@protoc_insertion_point(field_set:StorageEngineInstance.Snippet.work_ID)
}

// repeated string table_name = 4;
inline int Snippet::_internal_table_name_size() const {
  return table_name_.size();
}
inline int Snippet::table_name_size() const {
  return _internal_table_name_size();
}
inline void Snippet::clear_table_name() {
  table_name_.Clear();
}
inline std::string* Snippet::add_table_name() {
  std::string* _s = _internal_add_table_name();
  // @@protoc_insertion_point(field_add_mutable:StorageEngineInstance.Snippet.table_name)
  return _s;
}
inline const std::string& Snippet::_internal_table_name(int index) const {
  return table_name_.Get(index);
}
inline const std::string& Snippet::table_name(int index) const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.Snippet.table_name)
  return _internal_table_name(index);
}
inline std::string* Snippet::mutable_table_name(int index) {
  // @@protoc_insertion_point(field_mutable:StorageEngineInstance.Snippet.table_name)
  return table_name_.Mutable(index);
}
inline void Snippet::set_table_name(int index, const std::string& value) {
  table_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:StorageEngineInstance.Snippet.table_name)
}
inline void Snippet::set_table_name(int index, std::string&& value) {
  table_name_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:StorageEngineInstance.Snippet.table_name)
}
inline void Snippet::set_table_name(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  table_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:StorageEngineInstance.Snippet.table_name)
}
inline void Snippet::set_table_name(int index, const char* value, size_t size) {
  table_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:StorageEngineInstance.Snippet.table_name)
}
inline std::string* Snippet::_internal_add_table_name() {
  return table_name_.Add();
}
inline void Snippet::add_table_name(const std::string& value) {
  table_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:StorageEngineInstance.Snippet.table_name)
}
inline void Snippet::add_table_name(std::string&& value) {
  table_name_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:StorageEngineInstance.Snippet.table_name)
}
inline void Snippet::add_table_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  table_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:StorageEngineInstance.Snippet.table_name)
}
inline void Snippet::add_table_name(const char* value, size_t size) {
  table_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:StorageEngineInstance.Snippet.table_name)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Snippet::table_name() const {
  // @@protoc_insertion_point(field_list:StorageEngineInstance.Snippet.table_name)
  return table_name_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Snippet::mutable_table_name() {
  // @@protoc_insertion_point(field_mutable_list:StorageEngineInstance.Snippet.table_name)
  return &table_name_;
}

// repeated string table_col = 5;
inline int Snippet::_internal_table_col_size() const {
  return table_col_.size();
}
inline int Snippet::table_col_size() const {
  return _internal_table_col_size();
}
inline void Snippet::clear_table_col() {
  table_col_.Clear();
}
inline std::string* Snippet::add_table_col() {
  std::string* _s = _internal_add_table_col();
  // @@protoc_insertion_point(field_add_mutable:StorageEngineInstance.Snippet.table_col)
  return _s;
}
inline const std::string& Snippet::_internal_table_col(int index) const {
  return table_col_.Get(index);
}
inline const std::string& Snippet::table_col(int index) const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.Snippet.table_col)
  return _internal_table_col(index);
}
inline std::string* Snippet::mutable_table_col(int index) {
  // @@protoc_insertion_point(field_mutable:StorageEngineInstance.Snippet.table_col)
  return table_col_.Mutable(index);
}
inline void Snippet::set_table_col(int index, const std::string& value) {
  table_col_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:StorageEngineInstance.Snippet.table_col)
}
inline void Snippet::set_table_col(int index, std::string&& value) {
  table_col_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:StorageEngineInstance.Snippet.table_col)
}
inline void Snippet::set_table_col(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  table_col_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:StorageEngineInstance.Snippet.table_col)
}
inline void Snippet::set_table_col(int index, const char* value, size_t size) {
  table_col_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:StorageEngineInstance.Snippet.table_col)
}
inline std::string* Snippet::_internal_add_table_col() {
  return table_col_.Add();
}
inline void Snippet::add_table_col(const std::string& value) {
  table_col_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:StorageEngineInstance.Snippet.table_col)
}
inline void Snippet::add_table_col(std::string&& value) {
  table_col_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:StorageEngineInstance.Snippet.table_col)
}
inline void Snippet::add_table_col(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  table_col_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:StorageEngineInstance.Snippet.table_col)
}
inline void Snippet::add_table_col(const char* value, size_t size) {
  table_col_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:StorageEngineInstance.Snippet.table_col)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Snippet::table_col() const {
  // @@protoc_insertion_point(field_list:StorageEngineInstance.Snippet.table_col)
  return table_col_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Snippet::mutable_table_col() {
  // @@protoc_insertion_point(field_mutable_list:StorageEngineInstance.Snippet.table_col)
  return &table_col_;
}

// repeated .StorageEngineInstance.Snippet.Filter table_filter = 6;
inline int Snippet::_internal_table_filter_size() const {
  return table_filter_.size();
}
inline int Snippet::table_filter_size() const {
  return _internal_table_filter_size();
}
inline void Snippet::clear_table_filter() {
  table_filter_.Clear();
}
inline ::StorageEngineInstance::Snippet_Filter* Snippet::mutable_table_filter(int index) {
  // @@protoc_insertion_point(field_mutable:StorageEngineInstance.Snippet.table_filter)
  return table_filter_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::StorageEngineInstance::Snippet_Filter >*
Snippet::mutable_table_filter() {
  // @@protoc_insertion_point(field_mutable_list:StorageEngineInstance.Snippet.table_filter)
  return &table_filter_;
}
inline const ::StorageEngineInstance::Snippet_Filter& Snippet::_internal_table_filter(int index) const {
  return table_filter_.Get(index);
}
inline const ::StorageEngineInstance::Snippet_Filter& Snippet::table_filter(int index) const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.Snippet.table_filter)
  return _internal_table_filter(index);
}
inline ::StorageEngineInstance::Snippet_Filter* Snippet::_internal_add_table_filter() {
  return table_filter_.Add();
}
inline ::StorageEngineInstance::Snippet_Filter* Snippet::add_table_filter() {
  ::StorageEngineInstance::Snippet_Filter* _add = _internal_add_table_filter();
  // @@protoc_insertion_point(field_add:StorageEngineInstance.Snippet.table_filter)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::StorageEngineInstance::Snippet_Filter >&
Snippet::table_filter() const {
  // @@protoc_insertion_point(field_list:StorageEngineInstance.Snippet.table_filter)
  return table_filter_;
}

// .StorageEngineInstance.Snippet.Dependency dependency = 7;
inline bool Snippet::_internal_has_dependency() const {
  return this != internal_default_instance() && dependency_ != nullptr;
}
inline bool Snippet::has_dependency() const {
  return _internal_has_dependency();
}
inline void Snippet::clear_dependency() {
  if (GetArenaForAllocation() == nullptr && dependency_ != nullptr) {
    delete dependency_;
  }
  dependency_ = nullptr;
}
inline const ::StorageEngineInstance::Snippet_Dependency& Snippet::_internal_dependency() const {
  const ::StorageEngineInstance::Snippet_Dependency* p = dependency_;
  return p != nullptr ? *p : reinterpret_cast<const ::StorageEngineInstance::Snippet_Dependency&>(
      ::StorageEngineInstance::_Snippet_Dependency_default_instance_);
}
inline const ::StorageEngineInstance::Snippet_Dependency& Snippet::dependency() const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.Snippet.dependency)
  return _internal_dependency();
}
inline void Snippet::unsafe_arena_set_allocated_dependency(
    ::StorageEngineInstance::Snippet_Dependency* dependency) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dependency_);
  }
  dependency_ = dependency;
  if (dependency) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:StorageEngineInstance.Snippet.dependency)
}
inline ::StorageEngineInstance::Snippet_Dependency* Snippet::release_dependency() {
  
  ::StorageEngineInstance::Snippet_Dependency* temp = dependency_;
  dependency_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::StorageEngineInstance::Snippet_Dependency* Snippet::unsafe_arena_release_dependency() {
  // @@protoc_insertion_point(field_release:StorageEngineInstance.Snippet.dependency)
  
  ::StorageEngineInstance::Snippet_Dependency* temp = dependency_;
  dependency_ = nullptr;
  return temp;
}
inline ::StorageEngineInstance::Snippet_Dependency* Snippet::_internal_mutable_dependency() {
  
  if (dependency_ == nullptr) {
    auto* p = CreateMaybeMessage<::StorageEngineInstance::Snippet_Dependency>(GetArenaForAllocation());
    dependency_ = p;
  }
  return dependency_;
}
inline ::StorageEngineInstance::Snippet_Dependency* Snippet::mutable_dependency() {
  ::StorageEngineInstance::Snippet_Dependency* _msg = _internal_mutable_dependency();
  // @@protoc_insertion_point(field_mutable:StorageEngineInstance.Snippet.dependency)
  return _msg;
}
inline void Snippet::set_allocated_dependency(::StorageEngineInstance::Snippet_Dependency* dependency) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete dependency_;
  }
  if (dependency) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::StorageEngineInstance::Snippet_Dependency>::GetOwningArena(dependency);
    if (message_arena != submessage_arena) {
      dependency = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dependency, submessage_arena);
    }
    
  } else {
    
  }
  dependency_ = dependency;
  // @@protoc_insertion_point(field_set_allocated:StorageEngineInstance.Snippet.dependency)
}

// repeated int32 table_offset = 8;
inline int Snippet::_internal_table_offset_size() const {
  return table_offset_.size();
}
inline int Snippet::table_offset_size() const {
  return _internal_table_offset_size();
}
inline void Snippet::clear_table_offset() {
  table_offset_.Clear();
}
inline int32_t Snippet::_internal_table_offset(int index) const {
  return table_offset_.Get(index);
}
inline int32_t Snippet::table_offset(int index) const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.Snippet.table_offset)
  return _internal_table_offset(index);
}
inline void Snippet::set_table_offset(int index, int32_t value) {
  table_offset_.Set(index, value);
  // @@protoc_insertion_point(field_set:StorageEngineInstance.Snippet.table_offset)
}
inline void Snippet::_internal_add_table_offset(int32_t value) {
  table_offset_.Add(value);
}
inline void Snippet::add_table_offset(int32_t value) {
  _internal_add_table_offset(value);
  // @@protoc_insertion_point(field_add:StorageEngineInstance.Snippet.table_offset)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
Snippet::_internal_table_offset() const {
  return table_offset_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
Snippet::table_offset() const {
  // @@protoc_insertion_point(field_list:StorageEngineInstance.Snippet.table_offset)
  return _internal_table_offset();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
Snippet::_internal_mutable_table_offset() {
  return &table_offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
Snippet::mutable_table_offset() {
  // @@protoc_insertion_point(field_mutable_list:StorageEngineInstance.Snippet.table_offset)
  return _internal_mutable_table_offset();
}

// repeated int32 table_offlen = 9;
inline int Snippet::_internal_table_offlen_size() const {
  return table_offlen_.size();
}
inline int Snippet::table_offlen_size() const {
  return _internal_table_offlen_size();
}
inline void Snippet::clear_table_offlen() {
  table_offlen_.Clear();
}
inline int32_t Snippet::_internal_table_offlen(int index) const {
  return table_offlen_.Get(index);
}
inline int32_t Snippet::table_offlen(int index) const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.Snippet.table_offlen)
  return _internal_table_offlen(index);
}
inline void Snippet::set_table_offlen(int index, int32_t value) {
  table_offlen_.Set(index, value);
  // @@protoc_insertion_point(field_set:StorageEngineInstance.Snippet.table_offlen)
}
inline void Snippet::_internal_add_table_offlen(int32_t value) {
  table_offlen_.Add(value);
}
inline void Snippet::add_table_offlen(int32_t value) {
  _internal_add_table_offlen(value);
  // @@protoc_insertion_point(field_add:StorageEngineInstance.Snippet.table_offlen)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
Snippet::_internal_table_offlen() const {
  return table_offlen_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
Snippet::table_offlen() const {
  // @@protoc_insertion_point(field_list:StorageEngineInstance.Snippet.table_offlen)
  return _internal_table_offlen();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
Snippet::_internal_mutable_table_offlen() {
  return &table_offlen_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
Snippet::mutable_table_offlen() {
  // @@protoc_insertion_point(field_mutable_list:StorageEngineInstance.Snippet.table_offlen)
  return _internal_mutable_table_offlen();
}

// repeated int32 table_datatype = 10;
inline int Snippet::_internal_table_datatype_size() const {
  return table_datatype_.size();
}
inline int Snippet::table_datatype_size() const {
  return _internal_table_datatype_size();
}
inline void Snippet::clear_table_datatype() {
  table_datatype_.Clear();
}
inline int32_t Snippet::_internal_table_datatype(int index) const {
  return table_datatype_.Get(index);
}
inline int32_t Snippet::table_datatype(int index) const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.Snippet.table_datatype)
  return _internal_table_datatype(index);
}
inline void Snippet::set_table_datatype(int index, int32_t value) {
  table_datatype_.Set(index, value);
  // @@protoc_insertion_point(field_set:StorageEngineInstance.Snippet.table_datatype)
}
inline void Snippet::_internal_add_table_datatype(int32_t value) {
  table_datatype_.Add(value);
}
inline void Snippet::add_table_datatype(int32_t value) {
  _internal_add_table_datatype(value);
  // @@protoc_insertion_point(field_add:StorageEngineInstance.Snippet.table_datatype)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
Snippet::_internal_table_datatype() const {
  return table_datatype_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
Snippet::table_datatype() const {
  // @@protoc_insertion_point(field_list:StorageEngineInstance.Snippet.table_datatype)
  return _internal_table_datatype();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
Snippet::_internal_mutable_table_datatype() {
  return &table_datatype_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
Snippet::mutable_table_datatype() {
  // @@protoc_insertion_point(field_mutable_list:StorageEngineInstance.Snippet.table_datatype)
  return _internal_mutable_table_datatype();
}

// string table_alias = 11;
inline void Snippet::clear_table_alias() {
  table_alias_.ClearToEmpty();
}
inline const std::string& Snippet::table_alias() const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.Snippet.table_alias)
  return _internal_table_alias();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Snippet::set_table_alias(ArgT0&& arg0, ArgT... args) {
 
 table_alias_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:StorageEngineInstance.Snippet.table_alias)
}
inline std::string* Snippet::mutable_table_alias() {
  std::string* _s = _internal_mutable_table_alias();
  // @@protoc_insertion_point(field_mutable:StorageEngineInstance.Snippet.table_alias)
  return _s;
}
inline const std::string& Snippet::_internal_table_alias() const {
  return table_alias_.Get();
}
inline void Snippet::_internal_set_table_alias(const std::string& value) {
  
  table_alias_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Snippet::_internal_mutable_table_alias() {
  
  return table_alias_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Snippet::release_table_alias() {
  // @@protoc_insertion_point(field_release:StorageEngineInstance.Snippet.table_alias)
  return table_alias_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Snippet::set_allocated_table_alias(std::string* table_alias) {
  if (table_alias != nullptr) {
    
  } else {
    
  }
  table_alias_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), table_alias,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (table_alias_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    table_alias_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:StorageEngineInstance.Snippet.table_alias)
}

// repeated string column_alias = 12;
inline int Snippet::_internal_column_alias_size() const {
  return column_alias_.size();
}
inline int Snippet::column_alias_size() const {
  return _internal_column_alias_size();
}
inline void Snippet::clear_column_alias() {
  column_alias_.Clear();
}
inline std::string* Snippet::add_column_alias() {
  std::string* _s = _internal_add_column_alias();
  // @@protoc_insertion_point(field_add_mutable:StorageEngineInstance.Snippet.column_alias)
  return _s;
}
inline const std::string& Snippet::_internal_column_alias(int index) const {
  return column_alias_.Get(index);
}
inline const std::string& Snippet::column_alias(int index) const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.Snippet.column_alias)
  return _internal_column_alias(index);
}
inline std::string* Snippet::mutable_column_alias(int index) {
  // @@protoc_insertion_point(field_mutable:StorageEngineInstance.Snippet.column_alias)
  return column_alias_.Mutable(index);
}
inline void Snippet::set_column_alias(int index, const std::string& value) {
  column_alias_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:StorageEngineInstance.Snippet.column_alias)
}
inline void Snippet::set_column_alias(int index, std::string&& value) {
  column_alias_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:StorageEngineInstance.Snippet.column_alias)
}
inline void Snippet::set_column_alias(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  column_alias_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:StorageEngineInstance.Snippet.column_alias)
}
inline void Snippet::set_column_alias(int index, const char* value, size_t size) {
  column_alias_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:StorageEngineInstance.Snippet.column_alias)
}
inline std::string* Snippet::_internal_add_column_alias() {
  return column_alias_.Add();
}
inline void Snippet::add_column_alias(const std::string& value) {
  column_alias_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:StorageEngineInstance.Snippet.column_alias)
}
inline void Snippet::add_column_alias(std::string&& value) {
  column_alias_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:StorageEngineInstance.Snippet.column_alias)
}
inline void Snippet::add_column_alias(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  column_alias_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:StorageEngineInstance.Snippet.column_alias)
}
inline void Snippet::add_column_alias(const char* value, size_t size) {
  column_alias_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:StorageEngineInstance.Snippet.column_alias)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Snippet::column_alias() const {
  // @@protoc_insertion_point(field_list:StorageEngineInstance.Snippet.column_alias)
  return column_alias_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Snippet::mutable_column_alias() {
  // @@protoc_insertion_point(field_mutable_list:StorageEngineInstance.Snippet.column_alias)
  return &column_alias_;
}

// repeated .StorageEngineInstance.Snippet.Projection column_projection = 13;
inline int Snippet::_internal_column_projection_size() const {
  return column_projection_.size();
}
inline int Snippet::column_projection_size() const {
  return _internal_column_projection_size();
}
inline void Snippet::clear_column_projection() {
  column_projection_.Clear();
}
inline ::StorageEngineInstance::Snippet_Projection* Snippet::mutable_column_projection(int index) {
  // @@protoc_insertion_point(field_mutable:StorageEngineInstance.Snippet.column_projection)
  return column_projection_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::StorageEngineInstance::Snippet_Projection >*
Snippet::mutable_column_projection() {
  // @@protoc_insertion_point(field_mutable_list:StorageEngineInstance.Snippet.column_projection)
  return &column_projection_;
}
inline const ::StorageEngineInstance::Snippet_Projection& Snippet::_internal_column_projection(int index) const {
  return column_projection_.Get(index);
}
inline const ::StorageEngineInstance::Snippet_Projection& Snippet::column_projection(int index) const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.Snippet.column_projection)
  return _internal_column_projection(index);
}
inline ::StorageEngineInstance::Snippet_Projection* Snippet::_internal_add_column_projection() {
  return column_projection_.Add();
}
inline ::StorageEngineInstance::Snippet_Projection* Snippet::add_column_projection() {
  ::StorageEngineInstance::Snippet_Projection* _add = _internal_add_column_projection();
  // @@protoc_insertion_point(field_add:StorageEngineInstance.Snippet.column_projection)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::StorageEngineInstance::Snippet_Projection >&
Snippet::column_projection() const {
  // @@protoc_insertion_point(field_list:StorageEngineInstance.Snippet.column_projection)
  return column_projection_;
}

// repeated string group_by = 14;
inline int Snippet::_internal_group_by_size() const {
  return group_by_.size();
}
inline int Snippet::group_by_size() const {
  return _internal_group_by_size();
}
inline void Snippet::clear_group_by() {
  group_by_.Clear();
}
inline std::string* Snippet::add_group_by() {
  std::string* _s = _internal_add_group_by();
  // @@protoc_insertion_point(field_add_mutable:StorageEngineInstance.Snippet.group_by)
  return _s;
}
inline const std::string& Snippet::_internal_group_by(int index) const {
  return group_by_.Get(index);
}
inline const std::string& Snippet::group_by(int index) const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.Snippet.group_by)
  return _internal_group_by(index);
}
inline std::string* Snippet::mutable_group_by(int index) {
  // @@protoc_insertion_point(field_mutable:StorageEngineInstance.Snippet.group_by)
  return group_by_.Mutable(index);
}
inline void Snippet::set_group_by(int index, const std::string& value) {
  group_by_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:StorageEngineInstance.Snippet.group_by)
}
inline void Snippet::set_group_by(int index, std::string&& value) {
  group_by_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:StorageEngineInstance.Snippet.group_by)
}
inline void Snippet::set_group_by(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  group_by_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:StorageEngineInstance.Snippet.group_by)
}
inline void Snippet::set_group_by(int index, const char* value, size_t size) {
  group_by_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:StorageEngineInstance.Snippet.group_by)
}
inline std::string* Snippet::_internal_add_group_by() {
  return group_by_.Add();
}
inline void Snippet::add_group_by(const std::string& value) {
  group_by_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:StorageEngineInstance.Snippet.group_by)
}
inline void Snippet::add_group_by(std::string&& value) {
  group_by_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:StorageEngineInstance.Snippet.group_by)
}
inline void Snippet::add_group_by(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  group_by_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:StorageEngineInstance.Snippet.group_by)
}
inline void Snippet::add_group_by(const char* value, size_t size) {
  group_by_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:StorageEngineInstance.Snippet.group_by)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Snippet::group_by() const {
  // @@protoc_insertion_point(field_list:StorageEngineInstance.Snippet.group_by)
  return group_by_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Snippet::mutable_group_by() {
  // @@protoc_insertion_point(field_mutable_list:StorageEngineInstance.Snippet.group_by)
  return &group_by_;
}

// .StorageEngineInstance.Snippet.Order order_by = 15;
inline bool Snippet::_internal_has_order_by() const {
  return this != internal_default_instance() && order_by_ != nullptr;
}
inline bool Snippet::has_order_by() const {
  return _internal_has_order_by();
}
inline void Snippet::clear_order_by() {
  if (GetArenaForAllocation() == nullptr && order_by_ != nullptr) {
    delete order_by_;
  }
  order_by_ = nullptr;
}
inline const ::StorageEngineInstance::Snippet_Order& Snippet::_internal_order_by() const {
  const ::StorageEngineInstance::Snippet_Order* p = order_by_;
  return p != nullptr ? *p : reinterpret_cast<const ::StorageEngineInstance::Snippet_Order&>(
      ::StorageEngineInstance::_Snippet_Order_default_instance_);
}
inline const ::StorageEngineInstance::Snippet_Order& Snippet::order_by() const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.Snippet.order_by)
  return _internal_order_by();
}
inline void Snippet::unsafe_arena_set_allocated_order_by(
    ::StorageEngineInstance::Snippet_Order* order_by) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(order_by_);
  }
  order_by_ = order_by;
  if (order_by) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:StorageEngineInstance.Snippet.order_by)
}
inline ::StorageEngineInstance::Snippet_Order* Snippet::release_order_by() {
  
  ::StorageEngineInstance::Snippet_Order* temp = order_by_;
  order_by_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::StorageEngineInstance::Snippet_Order* Snippet::unsafe_arena_release_order_by() {
  // @@protoc_insertion_point(field_release:StorageEngineInstance.Snippet.order_by)
  
  ::StorageEngineInstance::Snippet_Order* temp = order_by_;
  order_by_ = nullptr;
  return temp;
}
inline ::StorageEngineInstance::Snippet_Order* Snippet::_internal_mutable_order_by() {
  
  if (order_by_ == nullptr) {
    auto* p = CreateMaybeMessage<::StorageEngineInstance::Snippet_Order>(GetArenaForAllocation());
    order_by_ = p;
  }
  return order_by_;
}
inline ::StorageEngineInstance::Snippet_Order* Snippet::mutable_order_by() {
  ::StorageEngineInstance::Snippet_Order* _msg = _internal_mutable_order_by();
  // @@protoc_insertion_point(field_mutable:StorageEngineInstance.Snippet.order_by)
  return _msg;
}
inline void Snippet::set_allocated_order_by(::StorageEngineInstance::Snippet_Order* order_by) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete order_by_;
  }
  if (order_by) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::StorageEngineInstance::Snippet_Order>::GetOwningArena(order_by);
    if (message_arena != submessage_arena) {
      order_by = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, order_by, submessage_arena);
    }
    
  } else {
    
  }
  order_by_ = order_by;
  // @@protoc_insertion_point(field_set_allocated:StorageEngineInstance.Snippet.order_by)
}

// .StorageEngineInstance.Snippet.Limit limit = 16;
inline bool Snippet::_internal_has_limit() const {
  return this != internal_default_instance() && limit_ != nullptr;
}
inline bool Snippet::has_limit() const {
  return _internal_has_limit();
}
inline void Snippet::clear_limit() {
  if (GetArenaForAllocation() == nullptr && limit_ != nullptr) {
    delete limit_;
  }
  limit_ = nullptr;
}
inline const ::StorageEngineInstance::Snippet_Limit& Snippet::_internal_limit() const {
  const ::StorageEngineInstance::Snippet_Limit* p = limit_;
  return p != nullptr ? *p : reinterpret_cast<const ::StorageEngineInstance::Snippet_Limit&>(
      ::StorageEngineInstance::_Snippet_Limit_default_instance_);
}
inline const ::StorageEngineInstance::Snippet_Limit& Snippet::limit() const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.Snippet.limit)
  return _internal_limit();
}
inline void Snippet::unsafe_arena_set_allocated_limit(
    ::StorageEngineInstance::Snippet_Limit* limit) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(limit_);
  }
  limit_ = limit;
  if (limit) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:StorageEngineInstance.Snippet.limit)
}
inline ::StorageEngineInstance::Snippet_Limit* Snippet::release_limit() {
  
  ::StorageEngineInstance::Snippet_Limit* temp = limit_;
  limit_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::StorageEngineInstance::Snippet_Limit* Snippet::unsafe_arena_release_limit() {
  // @@protoc_insertion_point(field_release:StorageEngineInstance.Snippet.limit)
  
  ::StorageEngineInstance::Snippet_Limit* temp = limit_;
  limit_ = nullptr;
  return temp;
}
inline ::StorageEngineInstance::Snippet_Limit* Snippet::_internal_mutable_limit() {
  
  if (limit_ == nullptr) {
    auto* p = CreateMaybeMessage<::StorageEngineInstance::Snippet_Limit>(GetArenaForAllocation());
    limit_ = p;
  }
  return limit_;
}
inline ::StorageEngineInstance::Snippet_Limit* Snippet::mutable_limit() {
  ::StorageEngineInstance::Snippet_Limit* _msg = _internal_mutable_limit();
  // @@protoc_insertion_point(field_mutable:StorageEngineInstance.Snippet.limit)
  return _msg;
}
inline void Snippet::set_allocated_limit(::StorageEngineInstance::Snippet_Limit* limit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete limit_;
  }
  if (limit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::StorageEngineInstance::Snippet_Limit>::GetOwningArena(limit);
    if (message_arena != submessage_arena) {
      limit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, limit, submessage_arena);
    }
    
  } else {
    
  }
  limit_ = limit;
  // @@protoc_insertion_point(field_set_allocated:StorageEngineInstance.Snippet.limit)
}

// int32 pk_num = 17;
inline void Snippet::clear_pk_num() {
  pk_num_ = 0;
}
inline int32_t Snippet::_internal_pk_num() const {
  return pk_num_;
}
inline int32_t Snippet::pk_num() const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.Snippet.pk_num)
  return _internal_pk_num();
}
inline void Snippet::_internal_set_pk_num(int32_t value) {
  
  pk_num_ = value;
}
inline void Snippet::set_pk_num(int32_t value) {
  _internal_set_pk_num(value);
  // @@protoc_insertion_point(field_set:StorageEngineInstance.Snippet.pk_num)
}

// repeated .StorageEngineInstance.Snippet.Filter having = 18;
inline int Snippet::_internal_having_size() const {
  return having_.size();
}
inline int Snippet::having_size() const {
  return _internal_having_size();
}
inline void Snippet::clear_having() {
  having_.Clear();
}
inline ::StorageEngineInstance::Snippet_Filter* Snippet::mutable_having(int index) {
  // @@protoc_insertion_point(field_mutable:StorageEngineInstance.Snippet.having)
  return having_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::StorageEngineInstance::Snippet_Filter >*
Snippet::mutable_having() {
  // @@protoc_insertion_point(field_mutable_list:StorageEngineInstance.Snippet.having)
  return &having_;
}
inline const ::StorageEngineInstance::Snippet_Filter& Snippet::_internal_having(int index) const {
  return having_.Get(index);
}
inline const ::StorageEngineInstance::Snippet_Filter& Snippet::having(int index) const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.Snippet.having)
  return _internal_having(index);
}
inline ::StorageEngineInstance::Snippet_Filter* Snippet::_internal_add_having() {
  return having_.Add();
}
inline ::StorageEngineInstance::Snippet_Filter* Snippet::add_having() {
  ::StorageEngineInstance::Snippet_Filter* _add = _internal_add_having();
  // @@protoc_insertion_point(field_add:StorageEngineInstance.Snippet.having)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::StorageEngineInstance::Snippet_Filter >&
Snippet::having() const {
  // @@protoc_insertion_point(field_list:StorageEngineInstance.Snippet.having)
  return having_;
}

// -------------------------------------------------------------------

// GenericQuery

// string db_name = 1;
inline void GenericQuery::clear_db_name() {
  db_name_.ClearToEmpty();
}
inline const std::string& GenericQuery::db_name() const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.GenericQuery.db_name)
  return _internal_db_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GenericQuery::set_db_name(ArgT0&& arg0, ArgT... args) {
 
 db_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:StorageEngineInstance.GenericQuery.db_name)
}
inline std::string* GenericQuery::mutable_db_name() {
  std::string* _s = _internal_mutable_db_name();
  // @@protoc_insertion_point(field_mutable:StorageEngineInstance.GenericQuery.db_name)
  return _s;
}
inline const std::string& GenericQuery::_internal_db_name() const {
  return db_name_.Get();
}
inline void GenericQuery::_internal_set_db_name(const std::string& value) {
  
  db_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GenericQuery::_internal_mutable_db_name() {
  
  return db_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GenericQuery::release_db_name() {
  // @@protoc_insertion_point(field_release:StorageEngineInstance.GenericQuery.db_name)
  return db_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GenericQuery::set_allocated_db_name(std::string* db_name) {
  if (db_name != nullptr) {
    
  } else {
    
  }
  db_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), db_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (db_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    db_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:StorageEngineInstance.GenericQuery.db_name)
}

// string query = 2;
inline void GenericQuery::clear_query() {
  query_.ClearToEmpty();
}
inline const std::string& GenericQuery::query() const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.GenericQuery.query)
  return _internal_query();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GenericQuery::set_query(ArgT0&& arg0, ArgT... args) {
 
 query_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:StorageEngineInstance.GenericQuery.query)
}
inline std::string* GenericQuery::mutable_query() {
  std::string* _s = _internal_mutable_query();
  // @@protoc_insertion_point(field_mutable:StorageEngineInstance.GenericQuery.query)
  return _s;
}
inline const std::string& GenericQuery::_internal_query() const {
  return query_.Get();
}
inline void GenericQuery::_internal_set_query(const std::string& value) {
  
  query_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GenericQuery::_internal_mutable_query() {
  
  return query_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GenericQuery::release_query() {
  // @@protoc_insertion_point(field_release:StorageEngineInstance.GenericQuery.query)
  return query_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GenericQuery::set_allocated_query(std::string* query) {
  if (query != nullptr) {
    
  } else {
    
  }
  query_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), query,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (query_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    query_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:StorageEngineInstance.GenericQuery.query)
}

// -------------------------------------------------------------------

// Request

// int32 query_id = 1;
inline void Request::clear_query_id() {
  query_id_ = 0;
}
inline int32_t Request::_internal_query_id() const {
  return query_id_;
}
inline int32_t Request::query_id() const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.Request.query_id)
  return _internal_query_id();
}
inline void Request::_internal_set_query_id(int32_t value) {
  
  query_id_ = value;
}
inline void Request::set_query_id(int32_t value) {
  _internal_set_query_id(value);
  // @@protoc_insertion_point(field_set:StorageEngineInstance.Request.query_id)
}

// int32 work_id = 2;
inline void Request::clear_work_id() {
  work_id_ = 0;
}
inline int32_t Request::_internal_work_id() const {
  return work_id_;
}
inline int32_t Request::work_id() const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.Request.work_id)
  return _internal_work_id();
}
inline void Request::_internal_set_work_id(int32_t value) {
  
  work_id_ = value;
}
inline void Request::set_work_id(int32_t value) {
  _internal_set_work_id(value);
  // @@protoc_insertion_point(field_set:StorageEngineInstance.Request.work_id)
}

// string db_name = 3;
inline void Request::clear_db_name() {
  db_name_.ClearToEmpty();
}
inline const std::string& Request::db_name() const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.Request.db_name)
  return _internal_db_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Request::set_db_name(ArgT0&& arg0, ArgT... args) {
 
 db_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:StorageEngineInstance.Request.db_name)
}
inline std::string* Request::mutable_db_name() {
  std::string* _s = _internal_mutable_db_name();
  // @@protoc_insertion_point(field_mutable:StorageEngineInstance.Request.db_name)
  return _s;
}
inline const std::string& Request::_internal_db_name() const {
  return db_name_.Get();
}
inline void Request::_internal_set_db_name(const std::string& value) {
  
  db_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Request::_internal_mutable_db_name() {
  
  return db_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Request::release_db_name() {
  // @@protoc_insertion_point(field_release:StorageEngineInstance.Request.db_name)
  return db_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Request::set_allocated_db_name(std::string* db_name) {
  if (db_name != nullptr) {
    
  } else {
    
  }
  db_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), db_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (db_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    db_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:StorageEngineInstance.Request.db_name)
}

// string table_name = 4;
inline void Request::clear_table_name() {
  table_name_.ClearToEmpty();
}
inline const std::string& Request::table_name() const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.Request.table_name)
  return _internal_table_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Request::set_table_name(ArgT0&& arg0, ArgT... args) {
 
 table_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:StorageEngineInstance.Request.table_name)
}
inline std::string* Request::mutable_table_name() {
  std::string* _s = _internal_mutable_table_name();
  // @@protoc_insertion_point(field_mutable:StorageEngineInstance.Request.table_name)
  return _s;
}
inline const std::string& Request::_internal_table_name() const {
  return table_name_.Get();
}
inline void Request::_internal_set_table_name(const std::string& value) {
  
  table_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Request::_internal_mutable_table_name() {
  
  return table_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Request::release_table_name() {
  // @@protoc_insertion_point(field_release:StorageEngineInstance.Request.table_name)
  return table_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Request::set_allocated_table_name(std::string* table_name) {
  if (table_name != nullptr) {
    
  } else {
    
  }
  table_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), table_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (table_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    table_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:StorageEngineInstance.Request.table_name)
}

// -------------------------------------------------------------------

// Response

// string value = 1;
inline void Response::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& Response::value() const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.Response.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Response::set_value(ArgT0&& arg0, ArgT... args) {
 
 value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:StorageEngineInstance.Response.value)
}
inline std::string* Response::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:StorageEngineInstance.Response.value)
  return _s;
}
inline const std::string& Response::_internal_value() const {
  return value_.Get();
}
inline void Response::_internal_set_value(const std::string& value) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Response::_internal_mutable_value() {
  
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Response::release_value() {
  // @@protoc_insertion_point(field_release:StorageEngineInstance.Response.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Response::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (value_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:StorageEngineInstance.Response.value)
}

// -------------------------------------------------------------------

// QueryResult_Column

// .StorageEngineInstance.QueryResult.Column.ColType col_type = 2;
inline void QueryResult_Column::clear_col_type() {
  col_type_ = 0;
}
inline ::StorageEngineInstance::QueryResult_Column_ColType QueryResult_Column::_internal_col_type() const {
  return static_cast< ::StorageEngineInstance::QueryResult_Column_ColType >(col_type_);
}
inline ::StorageEngineInstance::QueryResult_Column_ColType QueryResult_Column::col_type() const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.QueryResult.Column.col_type)
  return _internal_col_type();
}
inline void QueryResult_Column::_internal_set_col_type(::StorageEngineInstance::QueryResult_Column_ColType value) {
  
  col_type_ = value;
}
inline void QueryResult_Column::set_col_type(::StorageEngineInstance::QueryResult_Column_ColType value) {
  _internal_set_col_type(value);
  // @@protoc_insertion_point(field_set:StorageEngineInstance.QueryResult.Column.col_type)
}

// repeated string string_col = 3;
inline int QueryResult_Column::_internal_string_col_size() const {
  return string_col_.size();
}
inline int QueryResult_Column::string_col_size() const {
  return _internal_string_col_size();
}
inline void QueryResult_Column::clear_string_col() {
  string_col_.Clear();
}
inline std::string* QueryResult_Column::add_string_col() {
  std::string* _s = _internal_add_string_col();
  // @@protoc_insertion_point(field_add_mutable:StorageEngineInstance.QueryResult.Column.string_col)
  return _s;
}
inline const std::string& QueryResult_Column::_internal_string_col(int index) const {
  return string_col_.Get(index);
}
inline const std::string& QueryResult_Column::string_col(int index) const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.QueryResult.Column.string_col)
  return _internal_string_col(index);
}
inline std::string* QueryResult_Column::mutable_string_col(int index) {
  // @@protoc_insertion_point(field_mutable:StorageEngineInstance.QueryResult.Column.string_col)
  return string_col_.Mutable(index);
}
inline void QueryResult_Column::set_string_col(int index, const std::string& value) {
  string_col_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:StorageEngineInstance.QueryResult.Column.string_col)
}
inline void QueryResult_Column::set_string_col(int index, std::string&& value) {
  string_col_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:StorageEngineInstance.QueryResult.Column.string_col)
}
inline void QueryResult_Column::set_string_col(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  string_col_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:StorageEngineInstance.QueryResult.Column.string_col)
}
inline void QueryResult_Column::set_string_col(int index, const char* value, size_t size) {
  string_col_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:StorageEngineInstance.QueryResult.Column.string_col)
}
inline std::string* QueryResult_Column::_internal_add_string_col() {
  return string_col_.Add();
}
inline void QueryResult_Column::add_string_col(const std::string& value) {
  string_col_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:StorageEngineInstance.QueryResult.Column.string_col)
}
inline void QueryResult_Column::add_string_col(std::string&& value) {
  string_col_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:StorageEngineInstance.QueryResult.Column.string_col)
}
inline void QueryResult_Column::add_string_col(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  string_col_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:StorageEngineInstance.QueryResult.Column.string_col)
}
inline void QueryResult_Column::add_string_col(const char* value, size_t size) {
  string_col_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:StorageEngineInstance.QueryResult.Column.string_col)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
QueryResult_Column::string_col() const {
  // @@protoc_insertion_point(field_list:StorageEngineInstance.QueryResult.Column.string_col)
  return string_col_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
QueryResult_Column::mutable_string_col() {
  // @@protoc_insertion_point(field_mutable_list:StorageEngineInstance.QueryResult.Column.string_col)
  return &string_col_;
}

// repeated int32 int_col = 4;
inline int QueryResult_Column::_internal_int_col_size() const {
  return int_col_.size();
}
inline int QueryResult_Column::int_col_size() const {
  return _internal_int_col_size();
}
inline void QueryResult_Column::clear_int_col() {
  int_col_.Clear();
}
inline int32_t QueryResult_Column::_internal_int_col(int index) const {
  return int_col_.Get(index);
}
inline int32_t QueryResult_Column::int_col(int index) const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.QueryResult.Column.int_col)
  return _internal_int_col(index);
}
inline void QueryResult_Column::set_int_col(int index, int32_t value) {
  int_col_.Set(index, value);
  // @@protoc_insertion_point(field_set:StorageEngineInstance.QueryResult.Column.int_col)
}
inline void QueryResult_Column::_internal_add_int_col(int32_t value) {
  int_col_.Add(value);
}
inline void QueryResult_Column::add_int_col(int32_t value) {
  _internal_add_int_col(value);
  // @@protoc_insertion_point(field_add:StorageEngineInstance.QueryResult.Column.int_col)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
QueryResult_Column::_internal_int_col() const {
  return int_col_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
QueryResult_Column::int_col() const {
  // @@protoc_insertion_point(field_list:StorageEngineInstance.QueryResult.Column.int_col)
  return _internal_int_col();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
QueryResult_Column::_internal_mutable_int_col() {
  return &int_col_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
QueryResult_Column::mutable_int_col() {
  // @@protoc_insertion_point(field_mutable_list:StorageEngineInstance.QueryResult.Column.int_col)
  return _internal_mutable_int_col();
}

// repeated double double_col = 5;
inline int QueryResult_Column::_internal_double_col_size() const {
  return double_col_.size();
}
inline int QueryResult_Column::double_col_size() const {
  return _internal_double_col_size();
}
inline void QueryResult_Column::clear_double_col() {
  double_col_.Clear();
}
inline double QueryResult_Column::_internal_double_col(int index) const {
  return double_col_.Get(index);
}
inline double QueryResult_Column::double_col(int index) const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.QueryResult.Column.double_col)
  return _internal_double_col(index);
}
inline void QueryResult_Column::set_double_col(int index, double value) {
  double_col_.Set(index, value);
  // @@protoc_insertion_point(field_set:StorageEngineInstance.QueryResult.Column.double_col)
}
inline void QueryResult_Column::_internal_add_double_col(double value) {
  double_col_.Add(value);
}
inline void QueryResult_Column::add_double_col(double value) {
  _internal_add_double_col(value);
  // @@protoc_insertion_point(field_add:StorageEngineInstance.QueryResult.Column.double_col)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
QueryResult_Column::_internal_double_col() const {
  return double_col_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
QueryResult_Column::double_col() const {
  // @@protoc_insertion_point(field_list:StorageEngineInstance.QueryResult.Column.double_col)
  return _internal_double_col();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
QueryResult_Column::_internal_mutable_double_col() {
  return &double_col_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
QueryResult_Column::mutable_double_col() {
  // @@protoc_insertion_point(field_mutable_list:StorageEngineInstance.QueryResult.Column.double_col)
  return _internal_mutable_double_col();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// QueryResult

// map<string, .StorageEngineInstance.QueryResult.Column> query_result = 1;
inline int QueryResult::_internal_query_result_size() const {
  return query_result_.size();
}
inline int QueryResult::query_result_size() const {
  return _internal_query_result_size();
}
inline void QueryResult::clear_query_result() {
  query_result_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::StorageEngineInstance::QueryResult_Column >&
QueryResult::_internal_query_result() const {
  return query_result_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::StorageEngineInstance::QueryResult_Column >&
QueryResult::query_result() const {
  // @@protoc_insertion_point(field_map:StorageEngineInstance.QueryResult.query_result)
  return _internal_query_result();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::StorageEngineInstance::QueryResult_Column >*
QueryResult::_internal_mutable_query_result() {
  return query_result_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::StorageEngineInstance::QueryResult_Column >*
QueryResult::mutable_query_result() {
  // @@protoc_insertion_point(field_mutable_map:StorageEngineInstance.QueryResult.query_result)
  return _internal_mutable_query_result();
}

// int32 row_count = 2;
inline void QueryResult::clear_row_count() {
  row_count_ = 0;
}
inline int32_t QueryResult::_internal_row_count() const {
  return row_count_;
}
inline int32_t QueryResult::row_count() const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.QueryResult.row_count)
  return _internal_row_count();
}
inline void QueryResult::_internal_set_row_count(int32_t value) {
  
  row_count_ = value;
}
inline void QueryResult::set_row_count(int32_t value) {
  _internal_set_row_count(value);
  // @@protoc_insertion_point(field_set:StorageEngineInstance.QueryResult.row_count)
}

// int32 scanned_row_count = 3;
inline void QueryResult::clear_scanned_row_count() {
  scanned_row_count_ = 0;
}
inline int32_t QueryResult::_internal_scanned_row_count() const {
  return scanned_row_count_;
}
inline int32_t QueryResult::scanned_row_count() const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.QueryResult.scanned_row_count)
  return _internal_scanned_row_count();
}
inline void QueryResult::_internal_set_scanned_row_count(int32_t value) {
  
  scanned_row_count_ = value;
}
inline void QueryResult::set_scanned_row_count(int32_t value) {
  _internal_set_scanned_row_count(value);
  // @@protoc_insertion_point(field_set:StorageEngineInstance.QueryResult.scanned_row_count)
}

// int32 filtered_row_count = 4;
inline void QueryResult::clear_filtered_row_count() {
  filtered_row_count_ = 0;
}
inline int32_t QueryResult::_internal_filtered_row_count() const {
  return filtered_row_count_;
}
inline int32_t QueryResult::filtered_row_count() const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.QueryResult.filtered_row_count)
  return _internal_filtered_row_count();
}
inline void QueryResult::_internal_set_filtered_row_count(int32_t value) {
  
  filtered_row_count_ = value;
}
inline void QueryResult::set_filtered_row_count(int32_t value) {
  _internal_set_filtered_row_count(value);
  // @@protoc_insertion_point(field_set:StorageEngineInstance.QueryResult.filtered_row_count)
}

// -------------------------------------------------------------------

// QueryStringResult

// string query_result = 1;
inline void QueryStringResult::clear_query_result() {
  query_result_.ClearToEmpty();
}
inline const std::string& QueryStringResult::query_result() const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.QueryStringResult.query_result)
  return _internal_query_result();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void QueryStringResult::set_query_result(ArgT0&& arg0, ArgT... args) {
 
 query_result_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:StorageEngineInstance.QueryStringResult.query_result)
}
inline std::string* QueryStringResult::mutable_query_result() {
  std::string* _s = _internal_mutable_query_result();
  // @@protoc_insertion_point(field_mutable:StorageEngineInstance.QueryStringResult.query_result)
  return _s;
}
inline const std::string& QueryStringResult::_internal_query_result() const {
  return query_result_.Get();
}
inline void QueryStringResult::_internal_set_query_result(const std::string& value) {
  
  query_result_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* QueryStringResult::_internal_mutable_query_result() {
  
  return query_result_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* QueryStringResult::release_query_result() {
  // @@protoc_insertion_point(field_release:StorageEngineInstance.QueryStringResult.query_result)
  return query_result_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void QueryStringResult::set_allocated_query_result(std::string* query_result) {
  if (query_result != nullptr) {
    
  } else {
    
  }
  query_result_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), query_result,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (query_result_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    query_result_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:StorageEngineInstance.QueryStringResult.query_result)
}

// int32 scanned_row_count = 2;
inline void QueryStringResult::clear_scanned_row_count() {
  scanned_row_count_ = 0;
}
inline int32_t QueryStringResult::_internal_scanned_row_count() const {
  return scanned_row_count_;
}
inline int32_t QueryStringResult::scanned_row_count() const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.QueryStringResult.scanned_row_count)
  return _internal_scanned_row_count();
}
inline void QueryStringResult::_internal_set_scanned_row_count(int32_t value) {
  
  scanned_row_count_ = value;
}
inline void QueryStringResult::set_scanned_row_count(int32_t value) {
  _internal_set_scanned_row_count(value);
  // @@protoc_insertion_point(field_set:StorageEngineInstance.QueryStringResult.scanned_row_count)
}

// int32 filtered_row_count = 3;
inline void QueryStringResult::clear_filtered_row_count() {
  filtered_row_count_ = 0;
}
inline int32_t QueryStringResult::_internal_filtered_row_count() const {
  return filtered_row_count_;
}
inline int32_t QueryStringResult::filtered_row_count() const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.QueryStringResult.filtered_row_count)
  return _internal_filtered_row_count();
}
inline void QueryStringResult::_internal_set_filtered_row_count(int32_t value) {
  
  filtered_row_count_ = value;
}
inline void QueryStringResult::set_filtered_row_count(int32_t value) {
  _internal_set_filtered_row_count(value);
  // @@protoc_insertion_point(field_set:StorageEngineInstance.QueryStringResult.filtered_row_count)
}

// -------------------------------------------------------------------

// MetaDataRequest

// string db_name = 1;
inline void MetaDataRequest::clear_db_name() {
  db_name_.ClearToEmpty();
}
inline const std::string& MetaDataRequest::db_name() const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.MetaDataRequest.db_name)
  return _internal_db_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MetaDataRequest::set_db_name(ArgT0&& arg0, ArgT... args) {
 
 db_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:StorageEngineInstance.MetaDataRequest.db_name)
}
inline std::string* MetaDataRequest::mutable_db_name() {
  std::string* _s = _internal_mutable_db_name();
  // @@protoc_insertion_point(field_mutable:StorageEngineInstance.MetaDataRequest.db_name)
  return _s;
}
inline const std::string& MetaDataRequest::_internal_db_name() const {
  return db_name_.Get();
}
inline void MetaDataRequest::_internal_set_db_name(const std::string& value) {
  
  db_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* MetaDataRequest::_internal_mutable_db_name() {
  
  return db_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* MetaDataRequest::release_db_name() {
  // @@protoc_insertion_point(field_release:StorageEngineInstance.MetaDataRequest.db_name)
  return db_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void MetaDataRequest::set_allocated_db_name(std::string* db_name) {
  if (db_name != nullptr) {
    
  } else {
    
  }
  db_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), db_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (db_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    db_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:StorageEngineInstance.MetaDataRequest.db_name)
}

// string table_name = 2;
inline void MetaDataRequest::clear_table_name() {
  table_name_.ClearToEmpty();
}
inline const std::string& MetaDataRequest::table_name() const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.MetaDataRequest.table_name)
  return _internal_table_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MetaDataRequest::set_table_name(ArgT0&& arg0, ArgT... args) {
 
 table_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:StorageEngineInstance.MetaDataRequest.table_name)
}
inline std::string* MetaDataRequest::mutable_table_name() {
  std::string* _s = _internal_mutable_table_name();
  // @@protoc_insertion_point(field_mutable:StorageEngineInstance.MetaDataRequest.table_name)
  return _s;
}
inline const std::string& MetaDataRequest::_internal_table_name() const {
  return table_name_.Get();
}
inline void MetaDataRequest::_internal_set_table_name(const std::string& value) {
  
  table_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* MetaDataRequest::_internal_mutable_table_name() {
  
  return table_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* MetaDataRequest::release_table_name() {
  // @@protoc_insertion_point(field_release:StorageEngineInstance.MetaDataRequest.table_name)
  return table_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void MetaDataRequest::set_allocated_table_name(std::string* table_name) {
  if (table_name != nullptr) {
    
  } else {
    
  }
  table_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), table_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (table_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    table_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:StorageEngineInstance.MetaDataRequest.table_name)
}

// .StorageEngineInstance.ScanInfo scan_info = 3;
inline bool MetaDataRequest::_internal_has_scan_info() const {
  return this != internal_default_instance() && scan_info_ != nullptr;
}
inline bool MetaDataRequest::has_scan_info() const {
  return _internal_has_scan_info();
}
inline void MetaDataRequest::clear_scan_info() {
  if (GetArenaForAllocation() == nullptr && scan_info_ != nullptr) {
    delete scan_info_;
  }
  scan_info_ = nullptr;
}
inline const ::StorageEngineInstance::ScanInfo& MetaDataRequest::_internal_scan_info() const {
  const ::StorageEngineInstance::ScanInfo* p = scan_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::StorageEngineInstance::ScanInfo&>(
      ::StorageEngineInstance::_ScanInfo_default_instance_);
}
inline const ::StorageEngineInstance::ScanInfo& MetaDataRequest::scan_info() const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.MetaDataRequest.scan_info)
  return _internal_scan_info();
}
inline void MetaDataRequest::unsafe_arena_set_allocated_scan_info(
    ::StorageEngineInstance::ScanInfo* scan_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(scan_info_);
  }
  scan_info_ = scan_info;
  if (scan_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:StorageEngineInstance.MetaDataRequest.scan_info)
}
inline ::StorageEngineInstance::ScanInfo* MetaDataRequest::release_scan_info() {
  
  ::StorageEngineInstance::ScanInfo* temp = scan_info_;
  scan_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::StorageEngineInstance::ScanInfo* MetaDataRequest::unsafe_arena_release_scan_info() {
  // @@protoc_insertion_point(field_release:StorageEngineInstance.MetaDataRequest.scan_info)
  
  ::StorageEngineInstance::ScanInfo* temp = scan_info_;
  scan_info_ = nullptr;
  return temp;
}
inline ::StorageEngineInstance::ScanInfo* MetaDataRequest::_internal_mutable_scan_info() {
  
  if (scan_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::StorageEngineInstance::ScanInfo>(GetArenaForAllocation());
    scan_info_ = p;
  }
  return scan_info_;
}
inline ::StorageEngineInstance::ScanInfo* MetaDataRequest::mutable_scan_info() {
  ::StorageEngineInstance::ScanInfo* _msg = _internal_mutable_scan_info();
  // @@protoc_insertion_point(field_mutable:StorageEngineInstance.MetaDataRequest.scan_info)
  return _msg;
}
inline void MetaDataRequest::set_allocated_scan_info(::StorageEngineInstance::ScanInfo* scan_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete scan_info_;
  }
  if (scan_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::StorageEngineInstance::ScanInfo>::GetOwningArena(scan_info);
    if (message_arena != submessage_arena) {
      scan_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scan_info, submessage_arena);
    }
    
  } else {
    
  }
  scan_info_ = scan_info;
  // @@protoc_insertion_point(field_set_allocated:StorageEngineInstance.MetaDataRequest.scan_info)
}

// -------------------------------------------------------------------

// SnippetMetaData_PBAInfo

// string pba_string = 1;
inline void SnippetMetaData_PBAInfo::clear_pba_string() {
  pba_string_.ClearToEmpty();
}
inline const std::string& SnippetMetaData_PBAInfo::pba_string() const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.SnippetMetaData.PBAInfo.pba_string)
  return _internal_pba_string();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SnippetMetaData_PBAInfo::set_pba_string(ArgT0&& arg0, ArgT... args) {
 
 pba_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:StorageEngineInstance.SnippetMetaData.PBAInfo.pba_string)
}
inline std::string* SnippetMetaData_PBAInfo::mutable_pba_string() {
  std::string* _s = _internal_mutable_pba_string();
  // @@protoc_insertion_point(field_mutable:StorageEngineInstance.SnippetMetaData.PBAInfo.pba_string)
  return _s;
}
inline const std::string& SnippetMetaData_PBAInfo::_internal_pba_string() const {
  return pba_string_.Get();
}
inline void SnippetMetaData_PBAInfo::_internal_set_pba_string(const std::string& value) {
  
  pba_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SnippetMetaData_PBAInfo::_internal_mutable_pba_string() {
  
  return pba_string_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SnippetMetaData_PBAInfo::release_pba_string() {
  // @@protoc_insertion_point(field_release:StorageEngineInstance.SnippetMetaData.PBAInfo.pba_string)
  return pba_string_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SnippetMetaData_PBAInfo::set_allocated_pba_string(std::string* pba_string) {
  if (pba_string != nullptr) {
    
  } else {
    
  }
  pba_string_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pba_string,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (pba_string_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    pba_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:StorageEngineInstance.SnippetMetaData.PBAInfo.pba_string)
}

// int32 block_count = 2;
inline void SnippetMetaData_PBAInfo::clear_block_count() {
  block_count_ = 0;
}
inline int32_t SnippetMetaData_PBAInfo::_internal_block_count() const {
  return block_count_;
}
inline int32_t SnippetMetaData_PBAInfo::block_count() const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.SnippetMetaData.PBAInfo.block_count)
  return _internal_block_count();
}
inline void SnippetMetaData_PBAInfo::_internal_set_block_count(int32_t value) {
  
  block_count_ = value;
}
inline void SnippetMetaData_PBAInfo::set_block_count(int32_t value) {
  _internal_set_block_count(value);
  // @@protoc_insertion_point(field_set:StorageEngineInstance.SnippetMetaData.PBAInfo.block_count)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// SnippetMetaData

// map<string, .StorageEngineInstance.SnippetMetaData.PBAInfo> sst_pba_map = 1;
inline int SnippetMetaData::_internal_sst_pba_map_size() const {
  return sst_pba_map_.size();
}
inline int SnippetMetaData::sst_pba_map_size() const {
  return _internal_sst_pba_map_size();
}
inline void SnippetMetaData::clear_sst_pba_map() {
  sst_pba_map_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::StorageEngineInstance::SnippetMetaData_PBAInfo >&
SnippetMetaData::_internal_sst_pba_map() const {
  return sst_pba_map_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::StorageEngineInstance::SnippetMetaData_PBAInfo >&
SnippetMetaData::sst_pba_map() const {
  // @@protoc_insertion_point(field_map:StorageEngineInstance.SnippetMetaData.sst_pba_map)
  return _internal_sst_pba_map();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::StorageEngineInstance::SnippetMetaData_PBAInfo >*
SnippetMetaData::_internal_mutable_sst_pba_map() {
  return sst_pba_map_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::StorageEngineInstance::SnippetMetaData_PBAInfo >*
SnippetMetaData::mutable_sst_pba_map() {
  // @@protoc_insertion_point(field_mutable_map:StorageEngineInstance.SnippetMetaData.sst_pba_map)
  return _internal_mutable_sst_pba_map();
}

// int32 table_total_block_count = 2;
inline void SnippetMetaData::clear_table_total_block_count() {
  table_total_block_count_ = 0;
}
inline int32_t SnippetMetaData::_internal_table_total_block_count() const {
  return table_total_block_count_;
}
inline int32_t SnippetMetaData::table_total_block_count() const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.SnippetMetaData.table_total_block_count)
  return _internal_table_total_block_count();
}
inline void SnippetMetaData::_internal_set_table_total_block_count(int32_t value) {
  
  table_total_block_count_ = value;
}
inline void SnippetMetaData::set_table_total_block_count(int32_t value) {
  _internal_set_table_total_block_count(value);
  // @@protoc_insertion_point(field_set:StorageEngineInstance.SnippetMetaData.table_total_block_count)
}

// string wal_deleted_key_json = 3;
inline void SnippetMetaData::clear_wal_deleted_key_json() {
  wal_deleted_key_json_.ClearToEmpty();
}
inline const std::string& SnippetMetaData::wal_deleted_key_json() const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.SnippetMetaData.wal_deleted_key_json)
  return _internal_wal_deleted_key_json();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SnippetMetaData::set_wal_deleted_key_json(ArgT0&& arg0, ArgT... args) {
 
 wal_deleted_key_json_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:StorageEngineInstance.SnippetMetaData.wal_deleted_key_json)
}
inline std::string* SnippetMetaData::mutable_wal_deleted_key_json() {
  std::string* _s = _internal_mutable_wal_deleted_key_json();
  // @@protoc_insertion_point(field_mutable:StorageEngineInstance.SnippetMetaData.wal_deleted_key_json)
  return _s;
}
inline const std::string& SnippetMetaData::_internal_wal_deleted_key_json() const {
  return wal_deleted_key_json_.Get();
}
inline void SnippetMetaData::_internal_set_wal_deleted_key_json(const std::string& value) {
  
  wal_deleted_key_json_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SnippetMetaData::_internal_mutable_wal_deleted_key_json() {
  
  return wal_deleted_key_json_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SnippetMetaData::release_wal_deleted_key_json() {
  // @@protoc_insertion_point(field_release:StorageEngineInstance.SnippetMetaData.wal_deleted_key_json)
  return wal_deleted_key_json_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SnippetMetaData::set_allocated_wal_deleted_key_json(std::string* wal_deleted_key_json) {
  if (wal_deleted_key_json != nullptr) {
    
  } else {
    
  }
  wal_deleted_key_json_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), wal_deleted_key_json,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (wal_deleted_key_json_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    wal_deleted_key_json_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:StorageEngineInstance.SnippetMetaData.wal_deleted_key_json)
}

// repeated string wal_inserted_row_json = 4;
inline int SnippetMetaData::_internal_wal_inserted_row_json_size() const {
  return wal_inserted_row_json_.size();
}
inline int SnippetMetaData::wal_inserted_row_json_size() const {
  return _internal_wal_inserted_row_json_size();
}
inline void SnippetMetaData::clear_wal_inserted_row_json() {
  wal_inserted_row_json_.Clear();
}
inline std::string* SnippetMetaData::add_wal_inserted_row_json() {
  std::string* _s = _internal_add_wal_inserted_row_json();
  // @@protoc_insertion_point(field_add_mutable:StorageEngineInstance.SnippetMetaData.wal_inserted_row_json)
  return _s;
}
inline const std::string& SnippetMetaData::_internal_wal_inserted_row_json(int index) const {
  return wal_inserted_row_json_.Get(index);
}
inline const std::string& SnippetMetaData::wal_inserted_row_json(int index) const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.SnippetMetaData.wal_inserted_row_json)
  return _internal_wal_inserted_row_json(index);
}
inline std::string* SnippetMetaData::mutable_wal_inserted_row_json(int index) {
  // @@protoc_insertion_point(field_mutable:StorageEngineInstance.SnippetMetaData.wal_inserted_row_json)
  return wal_inserted_row_json_.Mutable(index);
}
inline void SnippetMetaData::set_wal_inserted_row_json(int index, const std::string& value) {
  wal_inserted_row_json_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:StorageEngineInstance.SnippetMetaData.wal_inserted_row_json)
}
inline void SnippetMetaData::set_wal_inserted_row_json(int index, std::string&& value) {
  wal_inserted_row_json_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:StorageEngineInstance.SnippetMetaData.wal_inserted_row_json)
}
inline void SnippetMetaData::set_wal_inserted_row_json(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  wal_inserted_row_json_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:StorageEngineInstance.SnippetMetaData.wal_inserted_row_json)
}
inline void SnippetMetaData::set_wal_inserted_row_json(int index, const char* value, size_t size) {
  wal_inserted_row_json_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:StorageEngineInstance.SnippetMetaData.wal_inserted_row_json)
}
inline std::string* SnippetMetaData::_internal_add_wal_inserted_row_json() {
  return wal_inserted_row_json_.Add();
}
inline void SnippetMetaData::add_wal_inserted_row_json(const std::string& value) {
  wal_inserted_row_json_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:StorageEngineInstance.SnippetMetaData.wal_inserted_row_json)
}
inline void SnippetMetaData::add_wal_inserted_row_json(std::string&& value) {
  wal_inserted_row_json_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:StorageEngineInstance.SnippetMetaData.wal_inserted_row_json)
}
inline void SnippetMetaData::add_wal_inserted_row_json(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  wal_inserted_row_json_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:StorageEngineInstance.SnippetMetaData.wal_inserted_row_json)
}
inline void SnippetMetaData::add_wal_inserted_row_json(const char* value, size_t size) {
  wal_inserted_row_json_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:StorageEngineInstance.SnippetMetaData.wal_inserted_row_json)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SnippetMetaData::wal_inserted_row_json() const {
  // @@protoc_insertion_point(field_list:StorageEngineInstance.SnippetMetaData.wal_inserted_row_json)
  return wal_inserted_row_json_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SnippetMetaData::mutable_wal_inserted_row_json() {
  // @@protoc_insertion_point(field_mutable_list:StorageEngineInstance.SnippetMetaData.wal_inserted_row_json)
  return &wal_inserted_row_json_;
}

// -------------------------------------------------------------------

// CSDMetricList_CSDMetric

// string id = 1;
inline void CSDMetricList_CSDMetric::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& CSDMetricList_CSDMetric::id() const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.CSDMetricList.CSDMetric.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSDMetricList_CSDMetric::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:StorageEngineInstance.CSDMetricList.CSDMetric.id)
}
inline std::string* CSDMetricList_CSDMetric::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:StorageEngineInstance.CSDMetricList.CSDMetric.id)
  return _s;
}
inline const std::string& CSDMetricList_CSDMetric::_internal_id() const {
  return id_.Get();
}
inline void CSDMetricList_CSDMetric::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CSDMetricList_CSDMetric::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CSDMetricList_CSDMetric::release_id() {
  // @@protoc_insertion_point(field_release:StorageEngineInstance.CSDMetricList.CSDMetric.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CSDMetricList_CSDMetric::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:StorageEngineInstance.CSDMetricList.CSDMetric.id)
}

// string ip = 2;
inline void CSDMetricList_CSDMetric::clear_ip() {
  ip_.ClearToEmpty();
}
inline const std::string& CSDMetricList_CSDMetric::ip() const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.CSDMetricList.CSDMetric.ip)
  return _internal_ip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSDMetricList_CSDMetric::set_ip(ArgT0&& arg0, ArgT... args) {
 
 ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:StorageEngineInstance.CSDMetricList.CSDMetric.ip)
}
inline std::string* CSDMetricList_CSDMetric::mutable_ip() {
  std::string* _s = _internal_mutable_ip();
  // @@protoc_insertion_point(field_mutable:StorageEngineInstance.CSDMetricList.CSDMetric.ip)
  return _s;
}
inline const std::string& CSDMetricList_CSDMetric::_internal_ip() const {
  return ip_.Get();
}
inline void CSDMetricList_CSDMetric::_internal_set_ip(const std::string& value) {
  
  ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CSDMetricList_CSDMetric::_internal_mutable_ip() {
  
  return ip_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CSDMetricList_CSDMetric::release_ip() {
  // @@protoc_insertion_point(field_release:StorageEngineInstance.CSDMetricList.CSDMetric.ip)
  return ip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CSDMetricList_CSDMetric::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (ip_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:StorageEngineInstance.CSDMetricList.CSDMetric.ip)
}

// float cpu_usage = 3;
inline void CSDMetricList_CSDMetric::clear_cpu_usage() {
  cpu_usage_ = 0;
}
inline float CSDMetricList_CSDMetric::_internal_cpu_usage() const {
  return cpu_usage_;
}
inline float CSDMetricList_CSDMetric::cpu_usage() const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.CSDMetricList.CSDMetric.cpu_usage)
  return _internal_cpu_usage();
}
inline void CSDMetricList_CSDMetric::_internal_set_cpu_usage(float value) {
  
  cpu_usage_ = value;
}
inline void CSDMetricList_CSDMetric::set_cpu_usage(float value) {
  _internal_set_cpu_usage(value);
  // @@protoc_insertion_point(field_set:StorageEngineInstance.CSDMetricList.CSDMetric.cpu_usage)
}

// float memory_usage = 4;
inline void CSDMetricList_CSDMetric::clear_memory_usage() {
  memory_usage_ = 0;
}
inline float CSDMetricList_CSDMetric::_internal_memory_usage() const {
  return memory_usage_;
}
inline float CSDMetricList_CSDMetric::memory_usage() const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.CSDMetricList.CSDMetric.memory_usage)
  return _internal_memory_usage();
}
inline void CSDMetricList_CSDMetric::_internal_set_memory_usage(float value) {
  
  memory_usage_ = value;
}
inline void CSDMetricList_CSDMetric::set_memory_usage(float value) {
  _internal_set_memory_usage(value);
  // @@protoc_insertion_point(field_set:StorageEngineInstance.CSDMetricList.CSDMetric.memory_usage)
}

// float disk_usage = 5;
inline void CSDMetricList_CSDMetric::clear_disk_usage() {
  disk_usage_ = 0;
}
inline float CSDMetricList_CSDMetric::_internal_disk_usage() const {
  return disk_usage_;
}
inline float CSDMetricList_CSDMetric::disk_usage() const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.CSDMetricList.CSDMetric.disk_usage)
  return _internal_disk_usage();
}
inline void CSDMetricList_CSDMetric::_internal_set_disk_usage(float value) {
  
  disk_usage_ = value;
}
inline void CSDMetricList_CSDMetric::set_disk_usage(float value) {
  _internal_set_disk_usage(value);
  // @@protoc_insertion_point(field_set:StorageEngineInstance.CSDMetricList.CSDMetric.disk_usage)
}

// float network = 6;
inline void CSDMetricList_CSDMetric::clear_network() {
  network_ = 0;
}
inline float CSDMetricList_CSDMetric::_internal_network() const {
  return network_;
}
inline float CSDMetricList_CSDMetric::network() const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.CSDMetricList.CSDMetric.network)
  return _internal_network();
}
inline void CSDMetricList_CSDMetric::_internal_set_network(float value) {
  
  network_ = value;
}
inline void CSDMetricList_CSDMetric::set_network(float value) {
  _internal_set_network(value);
  // @@protoc_insertion_point(field_set:StorageEngineInstance.CSDMetricList.CSDMetric.network)
}

// int32 working_block_count = 7;
inline void CSDMetricList_CSDMetric::clear_working_block_count() {
  working_block_count_ = 0;
}
inline int32_t CSDMetricList_CSDMetric::_internal_working_block_count() const {
  return working_block_count_;
}
inline int32_t CSDMetricList_CSDMetric::working_block_count() const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.CSDMetricList.CSDMetric.working_block_count)
  return _internal_working_block_count();
}
inline void CSDMetricList_CSDMetric::_internal_set_working_block_count(int32_t value) {
  
  working_block_count_ = value;
}
inline void CSDMetricList_CSDMetric::set_working_block_count(int32_t value) {
  _internal_set_working_block_count(value);
  // @@protoc_insertion_point(field_set:StorageEngineInstance.CSDMetricList.CSDMetric.working_block_count)
}

// float score = 8;
inline void CSDMetricList_CSDMetric::clear_score() {
  score_ = 0;
}
inline float CSDMetricList_CSDMetric::_internal_score() const {
  return score_;
}
inline float CSDMetricList_CSDMetric::score() const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.CSDMetricList.CSDMetric.score)
  return _internal_score();
}
inline void CSDMetricList_CSDMetric::_internal_set_score(float value) {
  
  score_ = value;
}
inline void CSDMetricList_CSDMetric::set_score(float value) {
  _internal_set_score(value);
  // @@protoc_insertion_point(field_set:StorageEngineInstance.CSDMetricList.CSDMetric.score)
}

// -------------------------------------------------------------------

// CSDMetricList

// repeated .StorageEngineInstance.CSDMetricList.CSDMetric csd_metric_list = 1;
inline int CSDMetricList::_internal_csd_metric_list_size() const {
  return csd_metric_list_.size();
}
inline int CSDMetricList::csd_metric_list_size() const {
  return _internal_csd_metric_list_size();
}
inline void CSDMetricList::clear_csd_metric_list() {
  csd_metric_list_.Clear();
}
inline ::StorageEngineInstance::CSDMetricList_CSDMetric* CSDMetricList::mutable_csd_metric_list(int index) {
  // @@protoc_insertion_point(field_mutable:StorageEngineInstance.CSDMetricList.csd_metric_list)
  return csd_metric_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::StorageEngineInstance::CSDMetricList_CSDMetric >*
CSDMetricList::mutable_csd_metric_list() {
  // @@protoc_insertion_point(field_mutable_list:StorageEngineInstance.CSDMetricList.csd_metric_list)
  return &csd_metric_list_;
}
inline const ::StorageEngineInstance::CSDMetricList_CSDMetric& CSDMetricList::_internal_csd_metric_list(int index) const {
  return csd_metric_list_.Get(index);
}
inline const ::StorageEngineInstance::CSDMetricList_CSDMetric& CSDMetricList::csd_metric_list(int index) const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.CSDMetricList.csd_metric_list)
  return _internal_csd_metric_list(index);
}
inline ::StorageEngineInstance::CSDMetricList_CSDMetric* CSDMetricList::_internal_add_csd_metric_list() {
  return csd_metric_list_.Add();
}
inline ::StorageEngineInstance::CSDMetricList_CSDMetric* CSDMetricList::add_csd_metric_list() {
  ::StorageEngineInstance::CSDMetricList_CSDMetric* _add = _internal_add_csd_metric_list();
  // @@protoc_insertion_point(field_add:StorageEngineInstance.CSDMetricList.csd_metric_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::StorageEngineInstance::CSDMetricList_CSDMetric >&
CSDMetricList::csd_metric_list() const {
  // @@protoc_insertion_point(field_list:StorageEngineInstance.CSDMetricList.csd_metric_list)
  return csd_metric_list_;
}

// -------------------------------------------------------------------

// Chunk

// int64 offset = 1;
inline void Chunk::clear_offset() {
  offset_ = int64_t{0};
}
inline int64_t Chunk::_internal_offset() const {
  return offset_;
}
inline int64_t Chunk::offset() const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.Chunk.offset)
  return _internal_offset();
}
inline void Chunk::_internal_set_offset(int64_t value) {
  
  offset_ = value;
}
inline void Chunk::set_offset(int64_t value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:StorageEngineInstance.Chunk.offset)
}

// int32 length = 2;
inline void Chunk::clear_length() {
  length_ = 0;
}
inline int32_t Chunk::_internal_length() const {
  return length_;
}
inline int32_t Chunk::length() const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.Chunk.length)
  return _internal_length();
}
inline void Chunk::_internal_set_length(int32_t value) {
  
  length_ = value;
}
inline void Chunk::set_length(int32_t value) {
  _internal_set_length(value);
  // @@protoc_insertion_point(field_set:StorageEngineInstance.Chunk.length)
}

// -------------------------------------------------------------------

// Chunks

// repeated .StorageEngineInstance.Chunk chunks = 1;
inline int Chunks::_internal_chunks_size() const {
  return chunks_.size();
}
inline int Chunks::chunks_size() const {
  return _internal_chunks_size();
}
inline void Chunks::clear_chunks() {
  chunks_.Clear();
}
inline ::StorageEngineInstance::Chunk* Chunks::mutable_chunks(int index) {
  // @@protoc_insertion_point(field_mutable:StorageEngineInstance.Chunks.chunks)
  return chunks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::StorageEngineInstance::Chunk >*
Chunks::mutable_chunks() {
  // @@protoc_insertion_point(field_mutable_list:StorageEngineInstance.Chunks.chunks)
  return &chunks_;
}
inline const ::StorageEngineInstance::Chunk& Chunks::_internal_chunks(int index) const {
  return chunks_.Get(index);
}
inline const ::StorageEngineInstance::Chunk& Chunks::chunks(int index) const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.Chunks.chunks)
  return _internal_chunks(index);
}
inline ::StorageEngineInstance::Chunk* Chunks::_internal_add_chunks() {
  return chunks_.Add();
}
inline ::StorageEngineInstance::Chunk* Chunks::add_chunks() {
  ::StorageEngineInstance::Chunk* _add = _internal_add_chunks();
  // @@protoc_insertion_point(field_add:StorageEngineInstance.Chunks.chunks)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::StorageEngineInstance::Chunk >&
Chunks::chunks() const {
  // @@protoc_insertion_point(field_list:StorageEngineInstance.Chunks.chunks)
  return chunks_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// TableBlock

// map<int32, .StorageEngineInstance.Chunks> table_block_chunks = 1;
inline int TableBlock::_internal_table_block_chunks_size() const {
  return table_block_chunks_.size();
}
inline int TableBlock::table_block_chunks_size() const {
  return _internal_table_block_chunks_size();
}
inline void TableBlock::clear_table_block_chunks() {
  table_block_chunks_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::StorageEngineInstance::Chunks >&
TableBlock::_internal_table_block_chunks() const {
  return table_block_chunks_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::StorageEngineInstance::Chunks >&
TableBlock::table_block_chunks() const {
  // @@protoc_insertion_point(field_map:StorageEngineInstance.TableBlock.table_block_chunks)
  return _internal_table_block_chunks();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::StorageEngineInstance::Chunks >*
TableBlock::_internal_mutable_table_block_chunks() {
  return table_block_chunks_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::StorageEngineInstance::Chunks >*
TableBlock::mutable_table_block_chunks() {
  // @@protoc_insertion_point(field_mutable_map:StorageEngineInstance.TableBlock.table_block_chunks)
  return _internal_mutable_table_block_chunks();
}

// -------------------------------------------------------------------

// LBARequest_SST

// repeated string csd_list = 1;
inline int LBARequest_SST::_internal_csd_list_size() const {
  return csd_list_.size();
}
inline int LBARequest_SST::csd_list_size() const {
  return _internal_csd_list_size();
}
inline void LBARequest_SST::clear_csd_list() {
  csd_list_.Clear();
}
inline std::string* LBARequest_SST::add_csd_list() {
  std::string* _s = _internal_add_csd_list();
  // @@protoc_insertion_point(field_add_mutable:StorageEngineInstance.LBARequest.SST.csd_list)
  return _s;
}
inline const std::string& LBARequest_SST::_internal_csd_list(int index) const {
  return csd_list_.Get(index);
}
inline const std::string& LBARequest_SST::csd_list(int index) const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.LBARequest.SST.csd_list)
  return _internal_csd_list(index);
}
inline std::string* LBARequest_SST::mutable_csd_list(int index) {
  // @@protoc_insertion_point(field_mutable:StorageEngineInstance.LBARequest.SST.csd_list)
  return csd_list_.Mutable(index);
}
inline void LBARequest_SST::set_csd_list(int index, const std::string& value) {
  csd_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:StorageEngineInstance.LBARequest.SST.csd_list)
}
inline void LBARequest_SST::set_csd_list(int index, std::string&& value) {
  csd_list_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:StorageEngineInstance.LBARequest.SST.csd_list)
}
inline void LBARequest_SST::set_csd_list(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  csd_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:StorageEngineInstance.LBARequest.SST.csd_list)
}
inline void LBARequest_SST::set_csd_list(int index, const char* value, size_t size) {
  csd_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:StorageEngineInstance.LBARequest.SST.csd_list)
}
inline std::string* LBARequest_SST::_internal_add_csd_list() {
  return csd_list_.Add();
}
inline void LBARequest_SST::add_csd_list(const std::string& value) {
  csd_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:StorageEngineInstance.LBARequest.SST.csd_list)
}
inline void LBARequest_SST::add_csd_list(std::string&& value) {
  csd_list_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:StorageEngineInstance.LBARequest.SST.csd_list)
}
inline void LBARequest_SST::add_csd_list(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  csd_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:StorageEngineInstance.LBARequest.SST.csd_list)
}
inline void LBARequest_SST::add_csd_list(const char* value, size_t size) {
  csd_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:StorageEngineInstance.LBARequest.SST.csd_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
LBARequest_SST::csd_list() const {
  // @@protoc_insertion_point(field_list:StorageEngineInstance.LBARequest.SST.csd_list)
  return csd_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
LBARequest_SST::mutable_csd_list() {
  // @@protoc_insertion_point(field_mutable_list:StorageEngineInstance.LBARequest.SST.csd_list)
  return &csd_list_;
}

// .StorageEngineInstance.TableBlock table_lba_block = 2;
inline bool LBARequest_SST::_internal_has_table_lba_block() const {
  return this != internal_default_instance() && table_lba_block_ != nullptr;
}
inline bool LBARequest_SST::has_table_lba_block() const {
  return _internal_has_table_lba_block();
}
inline void LBARequest_SST::clear_table_lba_block() {
  if (GetArenaForAllocation() == nullptr && table_lba_block_ != nullptr) {
    delete table_lba_block_;
  }
  table_lba_block_ = nullptr;
}
inline const ::StorageEngineInstance::TableBlock& LBARequest_SST::_internal_table_lba_block() const {
  const ::StorageEngineInstance::TableBlock* p = table_lba_block_;
  return p != nullptr ? *p : reinterpret_cast<const ::StorageEngineInstance::TableBlock&>(
      ::StorageEngineInstance::_TableBlock_default_instance_);
}
inline const ::StorageEngineInstance::TableBlock& LBARequest_SST::table_lba_block() const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.LBARequest.SST.table_lba_block)
  return _internal_table_lba_block();
}
inline void LBARequest_SST::unsafe_arena_set_allocated_table_lba_block(
    ::StorageEngineInstance::TableBlock* table_lba_block) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_lba_block_);
  }
  table_lba_block_ = table_lba_block;
  if (table_lba_block) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:StorageEngineInstance.LBARequest.SST.table_lba_block)
}
inline ::StorageEngineInstance::TableBlock* LBARequest_SST::release_table_lba_block() {
  
  ::StorageEngineInstance::TableBlock* temp = table_lba_block_;
  table_lba_block_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::StorageEngineInstance::TableBlock* LBARequest_SST::unsafe_arena_release_table_lba_block() {
  // @@protoc_insertion_point(field_release:StorageEngineInstance.LBARequest.SST.table_lba_block)
  
  ::StorageEngineInstance::TableBlock* temp = table_lba_block_;
  table_lba_block_ = nullptr;
  return temp;
}
inline ::StorageEngineInstance::TableBlock* LBARequest_SST::_internal_mutable_table_lba_block() {
  
  if (table_lba_block_ == nullptr) {
    auto* p = CreateMaybeMessage<::StorageEngineInstance::TableBlock>(GetArenaForAllocation());
    table_lba_block_ = p;
  }
  return table_lba_block_;
}
inline ::StorageEngineInstance::TableBlock* LBARequest_SST::mutable_table_lba_block() {
  ::StorageEngineInstance::TableBlock* _msg = _internal_mutable_table_lba_block();
  // @@protoc_insertion_point(field_mutable:StorageEngineInstance.LBARequest.SST.table_lba_block)
  return _msg;
}
inline void LBARequest_SST::set_allocated_table_lba_block(::StorageEngineInstance::TableBlock* table_lba_block) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete table_lba_block_;
  }
  if (table_lba_block) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::StorageEngineInstance::TableBlock>::GetOwningArena(table_lba_block);
    if (message_arena != submessage_arena) {
      table_lba_block = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, table_lba_block, submessage_arena);
    }
    
  } else {
    
  }
  table_lba_block_ = table_lba_block;
  // @@protoc_insertion_point(field_set_allocated:StorageEngineInstance.LBARequest.SST.table_lba_block)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// LBARequest

// map<string, .StorageEngineInstance.LBARequest.SST> sst_list = 1;
inline int LBARequest::_internal_sst_list_size() const {
  return sst_list_.size();
}
inline int LBARequest::sst_list_size() const {
  return _internal_sst_list_size();
}
inline void LBARequest::clear_sst_list() {
  sst_list_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::StorageEngineInstance::LBARequest_SST >&
LBARequest::_internal_sst_list() const {
  return sst_list_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::StorageEngineInstance::LBARequest_SST >&
LBARequest::sst_list() const {
  // @@protoc_insertion_point(field_map:StorageEngineInstance.LBARequest.sst_list)
  return _internal_sst_list();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::StorageEngineInstance::LBARequest_SST >*
LBARequest::_internal_mutable_sst_list() {
  return sst_list_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::StorageEngineInstance::LBARequest_SST >*
LBARequest::mutable_sst_list() {
  // @@protoc_insertion_point(field_mutable_map:StorageEngineInstance.LBARequest.sst_list)
  return _internal_mutable_sst_list();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// PBAResponse_SST

// map<string, .StorageEngineInstance.TableBlock> table_pba_block = 1;
inline int PBAResponse_SST::_internal_table_pba_block_size() const {
  return table_pba_block_.size();
}
inline int PBAResponse_SST::table_pba_block_size() const {
  return _internal_table_pba_block_size();
}
inline void PBAResponse_SST::clear_table_pba_block() {
  table_pba_block_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::StorageEngineInstance::TableBlock >&
PBAResponse_SST::_internal_table_pba_block() const {
  return table_pba_block_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::StorageEngineInstance::TableBlock >&
PBAResponse_SST::table_pba_block() const {
  // @@protoc_insertion_point(field_map:StorageEngineInstance.PBAResponse.SST.table_pba_block)
  return _internal_table_pba_block();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::StorageEngineInstance::TableBlock >*
PBAResponse_SST::_internal_mutable_table_pba_block() {
  return table_pba_block_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::StorageEngineInstance::TableBlock >*
PBAResponse_SST::mutable_table_pba_block() {
  // @@protoc_insertion_point(field_mutable_map:StorageEngineInstance.PBAResponse.SST.table_pba_block)
  return _internal_mutable_table_pba_block();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// PBAResponse

// map<string, .StorageEngineInstance.PBAResponse.SST> sst_list = 1;
inline int PBAResponse::_internal_sst_list_size() const {
  return sst_list_.size();
}
inline int PBAResponse::sst_list_size() const {
  return _internal_sst_list_size();
}
inline void PBAResponse::clear_sst_list() {
  sst_list_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::StorageEngineInstance::PBAResponse_SST >&
PBAResponse::_internal_sst_list() const {
  return sst_list_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::StorageEngineInstance::PBAResponse_SST >&
PBAResponse::sst_list() const {
  // @@protoc_insertion_point(field_map:StorageEngineInstance.PBAResponse.sst_list)
  return _internal_sst_list();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::StorageEngineInstance::PBAResponse_SST >*
PBAResponse::_internal_mutable_sst_list() {
  return sst_list_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::StorageEngineInstance::PBAResponse_SST >*
PBAResponse::mutable_sst_list() {
  // @@protoc_insertion_point(field_mutable_map:StorageEngineInstance.PBAResponse.sst_list)
  return _internal_mutable_sst_list();
}

// -------------------------------------------------------------------

// WALRequest

// string db_name = 1;
inline void WALRequest::clear_db_name() {
  db_name_.ClearToEmpty();
}
inline const std::string& WALRequest::db_name() const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.WALRequest.db_name)
  return _internal_db_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WALRequest::set_db_name(ArgT0&& arg0, ArgT... args) {
 
 db_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:StorageEngineInstance.WALRequest.db_name)
}
inline std::string* WALRequest::mutable_db_name() {
  std::string* _s = _internal_mutable_db_name();
  // @@protoc_insertion_point(field_mutable:StorageEngineInstance.WALRequest.db_name)
  return _s;
}
inline const std::string& WALRequest::_internal_db_name() const {
  return db_name_.Get();
}
inline void WALRequest::_internal_set_db_name(const std::string& value) {
  
  db_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* WALRequest::_internal_mutable_db_name() {
  
  return db_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* WALRequest::release_db_name() {
  // @@protoc_insertion_point(field_release:StorageEngineInstance.WALRequest.db_name)
  return db_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void WALRequest::set_allocated_db_name(std::string* db_name) {
  if (db_name != nullptr) {
    
  } else {
    
  }
  db_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), db_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (db_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    db_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:StorageEngineInstance.WALRequest.db_name)
}

// string table_name = 2;
inline void WALRequest::clear_table_name() {
  table_name_.ClearToEmpty();
}
inline const std::string& WALRequest::table_name() const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.WALRequest.table_name)
  return _internal_table_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WALRequest::set_table_name(ArgT0&& arg0, ArgT... args) {
 
 table_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:StorageEngineInstance.WALRequest.table_name)
}
inline std::string* WALRequest::mutable_table_name() {
  std::string* _s = _internal_mutable_table_name();
  // @@protoc_insertion_point(field_mutable:StorageEngineInstance.WALRequest.table_name)
  return _s;
}
inline const std::string& WALRequest::_internal_table_name() const {
  return table_name_.Get();
}
inline void WALRequest::_internal_set_table_name(const std::string& value) {
  
  table_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* WALRequest::_internal_mutable_table_name() {
  
  return table_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* WALRequest::release_table_name() {
  // @@protoc_insertion_point(field_release:StorageEngineInstance.WALRequest.table_name)
  return table_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void WALRequest::set_allocated_table_name(std::string* table_name) {
  if (table_name != nullptr) {
    
  } else {
    
  }
  table_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), table_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (table_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    table_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:StorageEngineInstance.WALRequest.table_name)
}

// -------------------------------------------------------------------

// WALResponse

// repeated string deleted_key = 1;
inline int WALResponse::_internal_deleted_key_size() const {
  return deleted_key_.size();
}
inline int WALResponse::deleted_key_size() const {
  return _internal_deleted_key_size();
}
inline void WALResponse::clear_deleted_key() {
  deleted_key_.Clear();
}
inline std::string* WALResponse::add_deleted_key() {
  std::string* _s = _internal_add_deleted_key();
  // @@protoc_insertion_point(field_add_mutable:StorageEngineInstance.WALResponse.deleted_key)
  return _s;
}
inline const std::string& WALResponse::_internal_deleted_key(int index) const {
  return deleted_key_.Get(index);
}
inline const std::string& WALResponse::deleted_key(int index) const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.WALResponse.deleted_key)
  return _internal_deleted_key(index);
}
inline std::string* WALResponse::mutable_deleted_key(int index) {
  // @@protoc_insertion_point(field_mutable:StorageEngineInstance.WALResponse.deleted_key)
  return deleted_key_.Mutable(index);
}
inline void WALResponse::set_deleted_key(int index, const std::string& value) {
  deleted_key_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:StorageEngineInstance.WALResponse.deleted_key)
}
inline void WALResponse::set_deleted_key(int index, std::string&& value) {
  deleted_key_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:StorageEngineInstance.WALResponse.deleted_key)
}
inline void WALResponse::set_deleted_key(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  deleted_key_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:StorageEngineInstance.WALResponse.deleted_key)
}
inline void WALResponse::set_deleted_key(int index, const char* value, size_t size) {
  deleted_key_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:StorageEngineInstance.WALResponse.deleted_key)
}
inline std::string* WALResponse::_internal_add_deleted_key() {
  return deleted_key_.Add();
}
inline void WALResponse::add_deleted_key(const std::string& value) {
  deleted_key_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:StorageEngineInstance.WALResponse.deleted_key)
}
inline void WALResponse::add_deleted_key(std::string&& value) {
  deleted_key_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:StorageEngineInstance.WALResponse.deleted_key)
}
inline void WALResponse::add_deleted_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  deleted_key_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:StorageEngineInstance.WALResponse.deleted_key)
}
inline void WALResponse::add_deleted_key(const char* value, size_t size) {
  deleted_key_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:StorageEngineInstance.WALResponse.deleted_key)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
WALResponse::deleted_key() const {
  // @@protoc_insertion_point(field_list:StorageEngineInstance.WALResponse.deleted_key)
  return deleted_key_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
WALResponse::mutable_deleted_key() {
  // @@protoc_insertion_point(field_mutable_list:StorageEngineInstance.WALResponse.deleted_key)
  return &deleted_key_;
}

// repeated string inserted_key = 2;
inline int WALResponse::_internal_inserted_key_size() const {
  return inserted_key_.size();
}
inline int WALResponse::inserted_key_size() const {
  return _internal_inserted_key_size();
}
inline void WALResponse::clear_inserted_key() {
  inserted_key_.Clear();
}
inline std::string* WALResponse::add_inserted_key() {
  std::string* _s = _internal_add_inserted_key();
  // @@protoc_insertion_point(field_add_mutable:StorageEngineInstance.WALResponse.inserted_key)
  return _s;
}
inline const std::string& WALResponse::_internal_inserted_key(int index) const {
  return inserted_key_.Get(index);
}
inline const std::string& WALResponse::inserted_key(int index) const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.WALResponse.inserted_key)
  return _internal_inserted_key(index);
}
inline std::string* WALResponse::mutable_inserted_key(int index) {
  // @@protoc_insertion_point(field_mutable:StorageEngineInstance.WALResponse.inserted_key)
  return inserted_key_.Mutable(index);
}
inline void WALResponse::set_inserted_key(int index, const std::string& value) {
  inserted_key_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:StorageEngineInstance.WALResponse.inserted_key)
}
inline void WALResponse::set_inserted_key(int index, std::string&& value) {
  inserted_key_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:StorageEngineInstance.WALResponse.inserted_key)
}
inline void WALResponse::set_inserted_key(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  inserted_key_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:StorageEngineInstance.WALResponse.inserted_key)
}
inline void WALResponse::set_inserted_key(int index, const char* value, size_t size) {
  inserted_key_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:StorageEngineInstance.WALResponse.inserted_key)
}
inline std::string* WALResponse::_internal_add_inserted_key() {
  return inserted_key_.Add();
}
inline void WALResponse::add_inserted_key(const std::string& value) {
  inserted_key_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:StorageEngineInstance.WALResponse.inserted_key)
}
inline void WALResponse::add_inserted_key(std::string&& value) {
  inserted_key_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:StorageEngineInstance.WALResponse.inserted_key)
}
inline void WALResponse::add_inserted_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  inserted_key_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:StorageEngineInstance.WALResponse.inserted_key)
}
inline void WALResponse::add_inserted_key(const char* value, size_t size) {
  inserted_key_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:StorageEngineInstance.WALResponse.inserted_key)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
WALResponse::inserted_key() const {
  // @@protoc_insertion_point(field_list:StorageEngineInstance.WALResponse.inserted_key)
  return inserted_key_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
WALResponse::mutable_inserted_key() {
  // @@protoc_insertion_point(field_mutable_list:StorageEngineInstance.WALResponse.inserted_key)
  return &inserted_key_;
}

// repeated string inserted_value = 3;
inline int WALResponse::_internal_inserted_value_size() const {
  return inserted_value_.size();
}
inline int WALResponse::inserted_value_size() const {
  return _internal_inserted_value_size();
}
inline void WALResponse::clear_inserted_value() {
  inserted_value_.Clear();
}
inline std::string* WALResponse::add_inserted_value() {
  std::string* _s = _internal_add_inserted_value();
  // @@protoc_insertion_point(field_add_mutable:StorageEngineInstance.WALResponse.inserted_value)
  return _s;
}
inline const std::string& WALResponse::_internal_inserted_value(int index) const {
  return inserted_value_.Get(index);
}
inline const std::string& WALResponse::inserted_value(int index) const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.WALResponse.inserted_value)
  return _internal_inserted_value(index);
}
inline std::string* WALResponse::mutable_inserted_value(int index) {
  // @@protoc_insertion_point(field_mutable:StorageEngineInstance.WALResponse.inserted_value)
  return inserted_value_.Mutable(index);
}
inline void WALResponse::set_inserted_value(int index, const std::string& value) {
  inserted_value_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:StorageEngineInstance.WALResponse.inserted_value)
}
inline void WALResponse::set_inserted_value(int index, std::string&& value) {
  inserted_value_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:StorageEngineInstance.WALResponse.inserted_value)
}
inline void WALResponse::set_inserted_value(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  inserted_value_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:StorageEngineInstance.WALResponse.inserted_value)
}
inline void WALResponse::set_inserted_value(int index, const char* value, size_t size) {
  inserted_value_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:StorageEngineInstance.WALResponse.inserted_value)
}
inline std::string* WALResponse::_internal_add_inserted_value() {
  return inserted_value_.Add();
}
inline void WALResponse::add_inserted_value(const std::string& value) {
  inserted_value_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:StorageEngineInstance.WALResponse.inserted_value)
}
inline void WALResponse::add_inserted_value(std::string&& value) {
  inserted_value_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:StorageEngineInstance.WALResponse.inserted_value)
}
inline void WALResponse::add_inserted_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  inserted_value_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:StorageEngineInstance.WALResponse.inserted_value)
}
inline void WALResponse::add_inserted_value(const char* value, size_t size) {
  inserted_value_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:StorageEngineInstance.WALResponse.inserted_value)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
WALResponse::inserted_value() const {
  // @@protoc_insertion_point(field_list:StorageEngineInstance.WALResponse.inserted_value)
  return inserted_value_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
WALResponse::mutable_inserted_value() {
  // @@protoc_insertion_point(field_mutable_list:StorageEngineInstance.WALResponse.inserted_value)
  return &inserted_value_;
}

// -------------------------------------------------------------------

// VolumeRequest

// float capacity = 1;
inline void VolumeRequest::clear_capacity() {
  capacity_ = 0;
}
inline float VolumeRequest::_internal_capacity() const {
  return capacity_;
}
inline float VolumeRequest::capacity() const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.VolumeRequest.capacity)
  return _internal_capacity();
}
inline void VolumeRequest::_internal_set_capacity(float value) {
  
  capacity_ = value;
}
inline void VolumeRequest::set_capacity(float value) {
  _internal_set_capacity(value);
  // @@protoc_insertion_point(field_set:StorageEngineInstance.VolumeRequest.capacity)
}

// int32 using_csd = 2;
inline void VolumeRequest::clear_using_csd() {
  using_csd_ = 0;
}
inline int32_t VolumeRequest::_internal_using_csd() const {
  return using_csd_;
}
inline int32_t VolumeRequest::using_csd() const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.VolumeRequest.using_csd)
  return _internal_using_csd();
}
inline void VolumeRequest::_internal_set_using_csd(int32_t value) {
  
  using_csd_ = value;
}
inline void VolumeRequest::set_using_csd(int32_t value) {
  _internal_set_using_csd(value);
  // @@protoc_insertion_point(field_set:StorageEngineInstance.VolumeRequest.using_csd)
}

// -------------------------------------------------------------------

// AllocatedVolumeInfo_Allocation

// string csd_id = 1;
inline void AllocatedVolumeInfo_Allocation::clear_csd_id() {
  csd_id_.ClearToEmpty();
}
inline const std::string& AllocatedVolumeInfo_Allocation::csd_id() const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.AllocatedVolumeInfo.Allocation.csd_id)
  return _internal_csd_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AllocatedVolumeInfo_Allocation::set_csd_id(ArgT0&& arg0, ArgT... args) {
 
 csd_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:StorageEngineInstance.AllocatedVolumeInfo.Allocation.csd_id)
}
inline std::string* AllocatedVolumeInfo_Allocation::mutable_csd_id() {
  std::string* _s = _internal_mutable_csd_id();
  // @@protoc_insertion_point(field_mutable:StorageEngineInstance.AllocatedVolumeInfo.Allocation.csd_id)
  return _s;
}
inline const std::string& AllocatedVolumeInfo_Allocation::_internal_csd_id() const {
  return csd_id_.Get();
}
inline void AllocatedVolumeInfo_Allocation::_internal_set_csd_id(const std::string& value) {
  
  csd_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AllocatedVolumeInfo_Allocation::_internal_mutable_csd_id() {
  
  return csd_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AllocatedVolumeInfo_Allocation::release_csd_id() {
  // @@protoc_insertion_point(field_release:StorageEngineInstance.AllocatedVolumeInfo.Allocation.csd_id)
  return csd_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AllocatedVolumeInfo_Allocation::set_allocated_csd_id(std::string* csd_id) {
  if (csd_id != nullptr) {
    
  } else {
    
  }
  csd_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), csd_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (csd_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    csd_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:StorageEngineInstance.AllocatedVolumeInfo.Allocation.csd_id)
}

// string capacity = 2;
inline void AllocatedVolumeInfo_Allocation::clear_capacity() {
  capacity_.ClearToEmpty();
}
inline const std::string& AllocatedVolumeInfo_Allocation::capacity() const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.AllocatedVolumeInfo.Allocation.capacity)
  return _internal_capacity();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AllocatedVolumeInfo_Allocation::set_capacity(ArgT0&& arg0, ArgT... args) {
 
 capacity_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:StorageEngineInstance.AllocatedVolumeInfo.Allocation.capacity)
}
inline std::string* AllocatedVolumeInfo_Allocation::mutable_capacity() {
  std::string* _s = _internal_mutable_capacity();
  // @@protoc_insertion_point(field_mutable:StorageEngineInstance.AllocatedVolumeInfo.Allocation.capacity)
  return _s;
}
inline const std::string& AllocatedVolumeInfo_Allocation::_internal_capacity() const {
  return capacity_.Get();
}
inline void AllocatedVolumeInfo_Allocation::_internal_set_capacity(const std::string& value) {
  
  capacity_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AllocatedVolumeInfo_Allocation::_internal_mutable_capacity() {
  
  return capacity_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AllocatedVolumeInfo_Allocation::release_capacity() {
  // @@protoc_insertion_point(field_release:StorageEngineInstance.AllocatedVolumeInfo.Allocation.capacity)
  return capacity_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AllocatedVolumeInfo_Allocation::set_allocated_capacity(std::string* capacity) {
  if (capacity != nullptr) {
    
  } else {
    
  }
  capacity_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), capacity,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (capacity_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    capacity_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:StorageEngineInstance.AllocatedVolumeInfo.Allocation.capacity)
}

// string partition_name = 3;
inline void AllocatedVolumeInfo_Allocation::clear_partition_name() {
  partition_name_.ClearToEmpty();
}
inline const std::string& AllocatedVolumeInfo_Allocation::partition_name() const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.AllocatedVolumeInfo.Allocation.partition_name)
  return _internal_partition_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AllocatedVolumeInfo_Allocation::set_partition_name(ArgT0&& arg0, ArgT... args) {
 
 partition_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:StorageEngineInstance.AllocatedVolumeInfo.Allocation.partition_name)
}
inline std::string* AllocatedVolumeInfo_Allocation::mutable_partition_name() {
  std::string* _s = _internal_mutable_partition_name();
  // @@protoc_insertion_point(field_mutable:StorageEngineInstance.AllocatedVolumeInfo.Allocation.partition_name)
  return _s;
}
inline const std::string& AllocatedVolumeInfo_Allocation::_internal_partition_name() const {
  return partition_name_.Get();
}
inline void AllocatedVolumeInfo_Allocation::_internal_set_partition_name(const std::string& value) {
  
  partition_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AllocatedVolumeInfo_Allocation::_internal_mutable_partition_name() {
  
  return partition_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AllocatedVolumeInfo_Allocation::release_partition_name() {
  // @@protoc_insertion_point(field_release:StorageEngineInstance.AllocatedVolumeInfo.Allocation.partition_name)
  return partition_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AllocatedVolumeInfo_Allocation::set_allocated_partition_name(std::string* partition_name) {
  if (partition_name != nullptr) {
    
  } else {
    
  }
  partition_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), partition_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (partition_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    partition_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:StorageEngineInstance.AllocatedVolumeInfo.Allocation.partition_name)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// AllocatedVolumeInfo

// map<string, .StorageEngineInstance.AllocatedVolumeInfo.Allocation> csd_allocation_map = 1;
inline int AllocatedVolumeInfo::_internal_csd_allocation_map_size() const {
  return csd_allocation_map_.size();
}
inline int AllocatedVolumeInfo::csd_allocation_map_size() const {
  return _internal_csd_allocation_map_size();
}
inline void AllocatedVolumeInfo::clear_csd_allocation_map() {
  csd_allocation_map_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::StorageEngineInstance::AllocatedVolumeInfo_Allocation >&
AllocatedVolumeInfo::_internal_csd_allocation_map() const {
  return csd_allocation_map_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::StorageEngineInstance::AllocatedVolumeInfo_Allocation >&
AllocatedVolumeInfo::csd_allocation_map() const {
  // @@protoc_insertion_point(field_map:StorageEngineInstance.AllocatedVolumeInfo.csd_allocation_map)
  return _internal_csd_allocation_map();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::StorageEngineInstance::AllocatedVolumeInfo_Allocation >*
AllocatedVolumeInfo::_internal_mutable_csd_allocation_map() {
  return csd_allocation_map_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::StorageEngineInstance::AllocatedVolumeInfo_Allocation >*
AllocatedVolumeInfo::mutable_csd_allocation_map() {
  // @@protoc_insertion_point(field_mutable_map:StorageEngineInstance.AllocatedVolumeInfo.csd_allocation_map)
  return _internal_mutable_csd_allocation_map();
}

// -------------------------------------------------------------------

// TmaxRequest_Chunk

// int64 offset = 1;
inline void TmaxRequest_Chunk::clear_offset() {
  offset_ = int64_t{0};
}
inline int64_t TmaxRequest_Chunk::_internal_offset() const {
  return offset_;
}
inline int64_t TmaxRequest_Chunk::offset() const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.TmaxRequest.Chunk.offset)
  return _internal_offset();
}
inline void TmaxRequest_Chunk::_internal_set_offset(int64_t value) {
  
  offset_ = value;
}
inline void TmaxRequest_Chunk::set_offset(int64_t value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:StorageEngineInstance.TmaxRequest.Chunk.offset)
}

// int32 length = 2;
inline void TmaxRequest_Chunk::clear_length() {
  length_ = 0;
}
inline int32_t TmaxRequest_Chunk::_internal_length() const {
  return length_;
}
inline int32_t TmaxRequest_Chunk::length() const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.TmaxRequest.Chunk.length)
  return _internal_length();
}
inline void TmaxRequest_Chunk::_internal_set_length(int32_t value) {
  
  length_ = value;
}
inline void TmaxRequest_Chunk::set_length(int32_t value) {
  _internal_set_length(value);
  // @@protoc_insertion_point(field_set:StorageEngineInstance.TmaxRequest.Chunk.length)
}

// -------------------------------------------------------------------

// TmaxRequest

// int32 query_id = 1;
inline void TmaxRequest::clear_query_id() {
  query_id_ = 0;
}
inline int32_t TmaxRequest::_internal_query_id() const {
  return query_id_;
}
inline int32_t TmaxRequest::query_id() const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.TmaxRequest.query_id)
  return _internal_query_id();
}
inline void TmaxRequest::_internal_set_query_id(int32_t value) {
  
  query_id_ = value;
}
inline void TmaxRequest::set_query_id(int32_t value) {
  _internal_set_query_id(value);
  // @@protoc_insertion_point(field_set:StorageEngineInstance.TmaxRequest.query_id)
}

// int32 work_id = 2;
inline void TmaxRequest::clear_work_id() {
  work_id_ = 0;
}
inline int32_t TmaxRequest::_internal_work_id() const {
  return work_id_;
}
inline int32_t TmaxRequest::work_id() const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.TmaxRequest.work_id)
  return _internal_work_id();
}
inline void TmaxRequest::_internal_set_work_id(int32_t value) {
  
  work_id_ = value;
}
inline void TmaxRequest::set_work_id(int32_t value) {
  _internal_set_work_id(value);
  // @@protoc_insertion_point(field_set:StorageEngineInstance.TmaxRequest.work_id)
}

// repeated .StorageEngineInstance.TmaxRequest.Chunk chunks = 3;
inline int TmaxRequest::_internal_chunks_size() const {
  return chunks_.size();
}
inline int TmaxRequest::chunks_size() const {
  return _internal_chunks_size();
}
inline void TmaxRequest::clear_chunks() {
  chunks_.Clear();
}
inline ::StorageEngineInstance::TmaxRequest_Chunk* TmaxRequest::mutable_chunks(int index) {
  // @@protoc_insertion_point(field_mutable:StorageEngineInstance.TmaxRequest.chunks)
  return chunks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::StorageEngineInstance::TmaxRequest_Chunk >*
TmaxRequest::mutable_chunks() {
  // @@protoc_insertion_point(field_mutable_list:StorageEngineInstance.TmaxRequest.chunks)
  return &chunks_;
}
inline const ::StorageEngineInstance::TmaxRequest_Chunk& TmaxRequest::_internal_chunks(int index) const {
  return chunks_.Get(index);
}
inline const ::StorageEngineInstance::TmaxRequest_Chunk& TmaxRequest::chunks(int index) const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.TmaxRequest.chunks)
  return _internal_chunks(index);
}
inline ::StorageEngineInstance::TmaxRequest_Chunk* TmaxRequest::_internal_add_chunks() {
  return chunks_.Add();
}
inline ::StorageEngineInstance::TmaxRequest_Chunk* TmaxRequest::add_chunks() {
  ::StorageEngineInstance::TmaxRequest_Chunk* _add = _internal_add_chunks();
  // @@protoc_insertion_point(field_add:StorageEngineInstance.TmaxRequest.chunks)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::StorageEngineInstance::TmaxRequest_Chunk >&
TmaxRequest::chunks() const {
  // @@protoc_insertion_point(field_list:StorageEngineInstance.TmaxRequest.chunks)
  return chunks_;
}

// string file_name = 4;
inline void TmaxRequest::clear_file_name() {
  file_name_.ClearToEmpty();
}
inline const std::string& TmaxRequest::file_name() const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.TmaxRequest.file_name)
  return _internal_file_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TmaxRequest::set_file_name(ArgT0&& arg0, ArgT... args) {
 
 file_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:StorageEngineInstance.TmaxRequest.file_name)
}
inline std::string* TmaxRequest::mutable_file_name() {
  std::string* _s = _internal_mutable_file_name();
  // @@protoc_insertion_point(field_mutable:StorageEngineInstance.TmaxRequest.file_name)
  return _s;
}
inline const std::string& TmaxRequest::_internal_file_name() const {
  return file_name_.Get();
}
inline void TmaxRequest::_internal_set_file_name(const std::string& value) {
  
  file_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TmaxRequest::_internal_mutable_file_name() {
  
  return file_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TmaxRequest::release_file_name() {
  // @@protoc_insertion_point(field_release:StorageEngineInstance.TmaxRequest.file_name)
  return file_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TmaxRequest::set_allocated_file_name(std::string* file_name) {
  if (file_name != nullptr) {
    
  } else {
    
  }
  file_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), file_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (file_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    file_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:StorageEngineInstance.TmaxRequest.file_name)
}

// string csd_name = 5;
inline void TmaxRequest::clear_csd_name() {
  csd_name_.ClearToEmpty();
}
inline const std::string& TmaxRequest::csd_name() const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.TmaxRequest.csd_name)
  return _internal_csd_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TmaxRequest::set_csd_name(ArgT0&& arg0, ArgT... args) {
 
 csd_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:StorageEngineInstance.TmaxRequest.csd_name)
}
inline std::string* TmaxRequest::mutable_csd_name() {
  std::string* _s = _internal_mutable_csd_name();
  // @@protoc_insertion_point(field_mutable:StorageEngineInstance.TmaxRequest.csd_name)
  return _s;
}
inline const std::string& TmaxRequest::_internal_csd_name() const {
  return csd_name_.Get();
}
inline void TmaxRequest::_internal_set_csd_name(const std::string& value) {
  
  csd_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TmaxRequest::_internal_mutable_csd_name() {
  
  return csd_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TmaxRequest::release_csd_name() {
  // @@protoc_insertion_point(field_release:StorageEngineInstance.TmaxRequest.csd_name)
  return csd_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TmaxRequest::set_allocated_csd_name(std::string* csd_name) {
  if (csd_name != nullptr) {
    
  } else {
    
  }
  csd_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), csd_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (csd_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    csd_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:StorageEngineInstance.TmaxRequest.csd_name)
}

// string table_filter = 6;
inline void TmaxRequest::clear_table_filter() {
  table_filter_.ClearToEmpty();
}
inline const std::string& TmaxRequest::table_filter() const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.TmaxRequest.table_filter)
  return _internal_table_filter();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TmaxRequest::set_table_filter(ArgT0&& arg0, ArgT... args) {
 
 table_filter_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:StorageEngineInstance.TmaxRequest.table_filter)
}
inline std::string* TmaxRequest::mutable_table_filter() {
  std::string* _s = _internal_mutable_table_filter();
  // @@protoc_insertion_point(field_mutable:StorageEngineInstance.TmaxRequest.table_filter)
  return _s;
}
inline const std::string& TmaxRequest::_internal_table_filter() const {
  return table_filter_.Get();
}
inline void TmaxRequest::_internal_set_table_filter(const std::string& value) {
  
  table_filter_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TmaxRequest::_internal_mutable_table_filter() {
  
  return table_filter_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TmaxRequest::release_table_filter() {
  // @@protoc_insertion_point(field_release:StorageEngineInstance.TmaxRequest.table_filter)
  return table_filter_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TmaxRequest::set_allocated_table_filter(std::string* table_filter) {
  if (table_filter != nullptr) {
    
  } else {
    
  }
  table_filter_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), table_filter,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (table_filter_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    table_filter_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:StorageEngineInstance.TmaxRequest.table_filter)
}

// string column_projection = 7;
inline void TmaxRequest::clear_column_projection() {
  column_projection_.ClearToEmpty();
}
inline const std::string& TmaxRequest::column_projection() const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.TmaxRequest.column_projection)
  return _internal_column_projection();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TmaxRequest::set_column_projection(ArgT0&& arg0, ArgT... args) {
 
 column_projection_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:StorageEngineInstance.TmaxRequest.column_projection)
}
inline std::string* TmaxRequest::mutable_column_projection() {
  std::string* _s = _internal_mutable_column_projection();
  // @@protoc_insertion_point(field_mutable:StorageEngineInstance.TmaxRequest.column_projection)
  return _s;
}
inline const std::string& TmaxRequest::_internal_column_projection() const {
  return column_projection_.Get();
}
inline void TmaxRequest::_internal_set_column_projection(const std::string& value) {
  
  column_projection_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TmaxRequest::_internal_mutable_column_projection() {
  
  return column_projection_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TmaxRequest::release_column_projection() {
  // @@protoc_insertion_point(field_release:StorageEngineInstance.TmaxRequest.column_projection)
  return column_projection_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TmaxRequest::set_allocated_column_projection(std::string* column_projection) {
  if (column_projection != nullptr) {
    
  } else {
    
  }
  column_projection_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), column_projection,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (column_projection_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    column_projection_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:StorageEngineInstance.TmaxRequest.column_projection)
}

// -------------------------------------------------------------------

// TmaxResponse

// string result = 1;
inline void TmaxResponse::clear_result() {
  result_.ClearToEmpty();
}
inline const std::string& TmaxResponse::result() const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.TmaxResponse.result)
  return _internal_result();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TmaxResponse::set_result(ArgT0&& arg0, ArgT... args) {
 
 result_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:StorageEngineInstance.TmaxResponse.result)
}
inline std::string* TmaxResponse::mutable_result() {
  std::string* _s = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:StorageEngineInstance.TmaxResponse.result)
  return _s;
}
inline const std::string& TmaxResponse::_internal_result() const {
  return result_.Get();
}
inline void TmaxResponse::_internal_set_result(const std::string& value) {
  
  result_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TmaxResponse::_internal_mutable_result() {
  
  return result_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TmaxResponse::release_result() {
  // @@protoc_insertion_point(field_release:StorageEngineInstance.TmaxResponse.result)
  return result_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TmaxResponse::set_allocated_result(std::string* result) {
  if (result != nullptr) {
    
  } else {
    
  }
  result_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), result,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (result_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    result_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:StorageEngineInstance.TmaxResponse.result)
}

// -------------------------------------------------------------------

// Empty

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace StorageEngineInstance

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::StorageEngineInstance::SnippetRequest_SnippetType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::StorageEngineInstance::SnippetRequest_SnippetType>() {
  return ::StorageEngineInstance::SnippetRequest_SnippetType_descriptor();
}
template <> struct is_proto_enum< ::StorageEngineInstance::Snippet_Filter_OperType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::StorageEngineInstance::Snippet_Filter_OperType>() {
  return ::StorageEngineInstance::Snippet_Filter_OperType_descriptor();
}
template <> struct is_proto_enum< ::StorageEngineInstance::Snippet_Projection_SelectType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::StorageEngineInstance::Snippet_Projection_SelectType>() {
  return ::StorageEngineInstance::Snippet_Projection_SelectType_descriptor();
}
template <> struct is_proto_enum< ::StorageEngineInstance::Snippet_Order_OrderDirection> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::StorageEngineInstance::Snippet_Order_OrderDirection>() {
  return ::StorageEngineInstance::Snippet_Order_OrderDirection_descriptor();
}
template <> struct is_proto_enum< ::StorageEngineInstance::Snippet_ValueType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::StorageEngineInstance::Snippet_ValueType>() {
  return ::StorageEngineInstance::Snippet_ValueType_descriptor();
}
template <> struct is_proto_enum< ::StorageEngineInstance::QueryResult_Column_ColType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::StorageEngineInstance::QueryResult_Column_ColType>() {
  return ::StorageEngineInstance::QueryResult_Column_ColType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_storage_5fengine_5finstance_2eproto
